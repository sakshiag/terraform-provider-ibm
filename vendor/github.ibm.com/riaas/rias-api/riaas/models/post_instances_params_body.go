// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostInstancesParamsBody instanceFromImageTemplate
// swagger:model postInstancesParamsBody
type PostInstancesParamsBody struct {

	// boot volume attachment
	BootVolumeAttachment *VolumeAttachmentTemplate `json:"boot_volume_attachment,omitempty"`

	// flavor
	Flavor *NameLocator `json:"flavor,omitempty"`

	// generation
	Generation Generation `json:"generation,omitempty"`

	// image
	Image *ResourceLocator `json:"image,omitempty"`

	// The public SSH keys to install on the server; if no keys are provided the server will be inaccessible unless the image used provides a means of access
	Keys []*KeyLocator `json:"keys,omitempty"`

	// The user-defined name for this server
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// Collection of network interfaces to create for the server
	NetworkInterfaces []*NetworkInterfaceTemplate `json:"network_interfaces,omitempty"`

	// primary network interface
	PrimaryNetworkInterface *PrimaryNetworkInterfaceTemplate `json:"primary_network_interface,omitempty"`

	// profile
	Profile *NameLocator `json:"profile,omitempty"`

	// resource group
	ResourceGroup *PostInstancesParamsBodyResourceGroup `json:"resource_group,omitempty"`

	// A collection of tags for this resource
	Tags []string `json:"tags,omitempty"`

	// User data to be made available when setting up the server
	UserData string `json:"user_data,omitempty"`

	// Collection of volume interfaces
	VolumeAttachments []*VolumeAttachmentTemplate `json:"volume_attachments,omitempty"`

	// vpc
	Vpc *ResourceLocator `json:"vpc,omitempty"`

	// zone
	Zone *ZoneReference `json:"zone,omitempty"`
}

// Validate validates this post instances params body
func (m *PostInstancesParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBootVolumeAttachment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlavor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryNetworkInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostInstancesParamsBody) validateBootVolumeAttachment(formats strfmt.Registry) error {

	if swag.IsZero(m.BootVolumeAttachment) { // not required
		return nil
	}

	if m.BootVolumeAttachment != nil {
		if err := m.BootVolumeAttachment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("boot_volume_attachment")
			}
			return err
		}
	}

	return nil
}

func (m *PostInstancesParamsBody) validateFlavor(formats strfmt.Registry) error {

	if swag.IsZero(m.Flavor) { // not required
		return nil
	}

	if m.Flavor != nil {
		if err := m.Flavor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flavor")
			}
			return err
		}
	}

	return nil
}

func (m *PostInstancesParamsBody) validateGeneration(formats strfmt.Registry) error {

	if swag.IsZero(m.Generation) { // not required
		return nil
	}

	if err := m.Generation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("generation")
		}
		return err
	}

	return nil
}

func (m *PostInstancesParamsBody) validateImage(formats strfmt.Registry) error {

	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *PostInstancesParamsBody) validateKeys(formats strfmt.Registry) error {

	if swag.IsZero(m.Keys) { // not required
		return nil
	}

	for i := 0; i < len(m.Keys); i++ {
		if swag.IsZero(m.Keys[i]) { // not required
			continue
		}

		if m.Keys[i] != nil {
			if err := m.Keys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostInstancesParamsBody) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *PostInstancesParamsBody) validateNetworkInterfaces(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkInterfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkInterfaces); i++ {
		if swag.IsZero(m.NetworkInterfaces[i]) { // not required
			continue
		}

		if m.NetworkInterfaces[i] != nil {
			if err := m.NetworkInterfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("network_interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostInstancesParamsBody) validatePrimaryNetworkInterface(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryNetworkInterface) { // not required
		return nil
	}

	if m.PrimaryNetworkInterface != nil {
		if err := m.PrimaryNetworkInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primary_network_interface")
			}
			return err
		}
	}

	return nil
}

func (m *PostInstancesParamsBody) validateProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.Profile) { // not required
		return nil
	}

	if m.Profile != nil {
		if err := m.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

func (m *PostInstancesParamsBody) validateResourceGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceGroup) { // not required
		return nil
	}

	if m.ResourceGroup != nil {
		if err := m.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_group")
			}
			return err
		}
	}

	return nil
}

func (m *PostInstancesParamsBody) validateVolumeAttachments(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumeAttachments) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeAttachments); i++ {
		if swag.IsZero(m.VolumeAttachments[i]) { // not required
			continue
		}

		if m.VolumeAttachments[i] != nil {
			if err := m.VolumeAttachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volume_attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostInstancesParamsBody) validateVpc(formats strfmt.Registry) error {

	if swag.IsZero(m.Vpc) { // not required
		return nil
	}

	if m.Vpc != nil {
		if err := m.Vpc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc")
			}
			return err
		}
	}

	return nil
}

func (m *PostInstancesParamsBody) validateZone(formats strfmt.Registry) error {

	if swag.IsZero(m.Zone) { // not required
		return nil
	}

	if m.Zone != nil {
		if err := m.Zone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostInstancesParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostInstancesParamsBody) UnmarshalBinary(b []byte) error {
	var res PostInstancesParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
