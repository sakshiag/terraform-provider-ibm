// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PostSecurityGroupsParamsBody SecurityGroupTemplate
// swagger:model postSecurityGroupsParamsBody
type PostSecurityGroupsParamsBody struct {

	// The user-assigned name of this security group. If the user does not provide a name, one will be automatically assigned. Security group names must be unique, within the scope of a user account.
	Name string `json:"name,omitempty"`

	// resource group
	ResourceGroup *PostSecurityGroupsParamsBodyResourceGroup `json:"resource_group,omitempty"`

	// Collection of rule templates for rules to be created along with the security group
	Rules []*SecurityGroupRuleTemplate `json:"rules,omitempty"`

	// A collection of tags for this resource
	Tags []string `json:"tags,omitempty"`

	// vpc
	Vpc *PostSecurityGroupsParamsBodyVpc `json:"vpc,omitempty"`
}

// Validate validates this post security groups params body
func (m *PostSecurityGroupsParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostSecurityGroupsParamsBody) validateResourceGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceGroup) { // not required
		return nil
	}

	if m.ResourceGroup != nil {
		if err := m.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_group")
			}
			return err
		}
	}

	return nil
}

func (m *PostSecurityGroupsParamsBody) validateRules(formats strfmt.Registry) error {

	if swag.IsZero(m.Rules) { // not required
		return nil
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostSecurityGroupsParamsBody) validateVpc(formats strfmt.Registry) error {

	if swag.IsZero(m.Vpc) { // not required
		return nil
	}

	if m.Vpc != nil {
		if err := m.Vpc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostSecurityGroupsParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostSecurityGroupsParamsBody) UnmarshalBinary(b []byte) error {
	var res PostSecurityGroupsParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
