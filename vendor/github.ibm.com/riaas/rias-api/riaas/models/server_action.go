// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerAction ServerAction
// swagger:model server_action
type ServerAction struct {

	// The date and time that the action was completed
	CompletedAt strfmt.DateTime `json:"completed_at,omitempty"`

	// The date and time that the action was created
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The URL for this action
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The identifier for this action
	ID strfmt.UUID `json:"id,omitempty"`

	// The date and time that the action was started
	StartedAt strfmt.DateTime `json:"started_at,omitempty"`

	// The current status of this action
	Status string `json:"status,omitempty"`

	// The type of action
	Type string `json:"type,omitempty"`
}

// Validate validates this server action
func (m *ServerAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerAction) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.Pattern("href", "body", string(m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

var serverActionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","running","failed","completed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverActionTypeStatusPropEnum = append(serverActionTypeStatusPropEnum, v)
	}
}

const (
	// ServerActionStatusPending captures enum value "pending"
	ServerActionStatusPending string = "pending"
	// ServerActionStatusRunning captures enum value "running"
	ServerActionStatusRunning string = "running"
	// ServerActionStatusFailed captures enum value "failed"
	ServerActionStatusFailed string = "failed"
	// ServerActionStatusCompleted captures enum value "completed"
	ServerActionStatusCompleted string = "completed"
)

// prop value enum
func (m *ServerAction) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serverActionTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServerAction) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var serverActionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["start","stop","reboot","reset"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverActionTypeTypePropEnum = append(serverActionTypeTypePropEnum, v)
	}
}

const (
	// ServerActionTypeStart captures enum value "start"
	ServerActionTypeStart string = "start"
	// ServerActionTypeStop captures enum value "stop"
	ServerActionTypeStop string = "stop"
	// ServerActionTypeReboot captures enum value "reboot"
	ServerActionTypeReboot string = "reboot"
	// ServerActionTypeReset captures enum value "reset"
	ServerActionTypeReset string = "reset"
)

// prop value enum
func (m *ServerAction) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serverActionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServerAction) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerAction) UnmarshalBinary(b []byte) error {
	var res ServerAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
