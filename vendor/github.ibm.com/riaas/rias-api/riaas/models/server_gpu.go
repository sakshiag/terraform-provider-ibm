// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerGpu GPU
//
// The GPU(s) for this server
// swagger:model serverGpu
type ServerGpu struct {

	// The number of logical GPU cores per GPU
	// Minimum: 1
	Cores int64 `json:"cores,omitempty"`

	// The number of GPUs
	// Minimum: 1
	Count int64 `json:"count,omitempty"`

	// The manufacturer of the GPU
	Manufacturer string `json:"manufacturer,omitempty"`

	// The amount of memory in megabytes
	// Maximum: 524288
	// Minimum: 512
	// Multiple Of: 256
	Memory int64 `json:"memory,omitempty"`

	// The model number of the GPU
	Model string `json:"model,omitempty"`
}

// Validate validates this server gpu
func (m *ServerGpu) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCores(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateManufacturer(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerGpu) validateCores(formats strfmt.Registry) error {

	if swag.IsZero(m.Cores) { // not required
		return nil
	}

	if err := validate.MinimumInt("cores", "body", int64(m.Cores), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *ServerGpu) validateCount(formats strfmt.Registry) error {

	if swag.IsZero(m.Count) { // not required
		return nil
	}

	if err := validate.MinimumInt("count", "body", int64(m.Count), 1, false); err != nil {
		return err
	}

	return nil
}

var serverGpuTypeManufacturerPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nvidia"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverGpuTypeManufacturerPropEnum = append(serverGpuTypeManufacturerPropEnum, v)
	}
}

const (
	// ServerGpuManufacturerNvidia captures enum value "nvidia"
	ServerGpuManufacturerNvidia string = "nvidia"
)

// prop value enum
func (m *ServerGpu) validateManufacturerEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serverGpuTypeManufacturerPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServerGpu) validateManufacturer(formats strfmt.Registry) error {

	if swag.IsZero(m.Manufacturer) { // not required
		return nil
	}

	// value enum
	if err := m.validateManufacturerEnum("manufacturer", "body", m.Manufacturer); err != nil {
		return err
	}

	return nil
}

func (m *ServerGpu) validateMemory(formats strfmt.Registry) error {

	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if err := validate.MinimumInt("memory", "body", int64(m.Memory), 512, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("memory", "body", int64(m.Memory), 524288, false); err != nil {
		return err
	}

	if err := validate.MultipleOf("memory", "body", float64(m.Memory), 256); err != nil {
		return err
	}

	return nil
}

var serverGpuTypeModelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["k40","k80"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverGpuTypeModelPropEnum = append(serverGpuTypeModelPropEnum, v)
	}
}

const (
	// ServerGpuModelK40 captures enum value "k40"
	ServerGpuModelK40 string = "k40"
	// ServerGpuModelK80 captures enum value "k80"
	ServerGpuModelK80 string = "k80"
)

// prop value enum
func (m *ServerGpu) validateModelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serverGpuTypeModelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServerGpu) validateModel(formats strfmt.Registry) error {

	if swag.IsZero(m.Model) { // not required
		return nil
	}

	// value enum
	if err := m.validateModelEnum("model", "body", m.Model); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerGpu) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerGpu) UnmarshalBinary(b []byte) error {
	var res ServerGpu
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
