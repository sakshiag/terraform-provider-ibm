// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// VolumeAttachmentTemplateVolume VolumeContext
// swagger:model volumeAttachmentTemplateVolume
type VolumeAttachmentTemplateVolume struct {
	ResourceLocator

	VolumeContext

	// source snapshot
	SourceSnapshot *ResourceLocator `json:"source_snapshot,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VolumeAttachmentTemplateVolume) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ResourceLocator
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ResourceLocator = aO0

	// AO1
	var aO1 VolumeContext
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.VolumeContext = aO1

	// now for regular properties
	var propsVolumeAttachmentTemplateVolume struct {
		SourceSnapshot *ResourceLocator `json:"source_snapshot,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsVolumeAttachmentTemplateVolume); err != nil {
		return err
	}
	m.SourceSnapshot = propsVolumeAttachmentTemplateVolume.SourceSnapshot

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VolumeAttachmentTemplateVolume) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ResourceLocator)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.VolumeContext)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	// now for regular properties
	var propsVolumeAttachmentTemplateVolume struct {
		SourceSnapshot *ResourceLocator `json:"source_snapshot,omitempty"`
	}
	propsVolumeAttachmentTemplateVolume.SourceSnapshot = m.SourceSnapshot

	jsonDataPropsVolumeAttachmentTemplateVolume, errVolumeAttachmentTemplateVolume := swag.WriteJSON(propsVolumeAttachmentTemplateVolume)
	if errVolumeAttachmentTemplateVolume != nil {
		return nil, errVolumeAttachmentTemplateVolume
	}
	_parts = append(_parts, jsonDataPropsVolumeAttachmentTemplateVolume)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this volume attachment template volume
func (m *VolumeAttachmentTemplateVolume) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ResourceLocator
	if err := m.ResourceLocator.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with VolumeContext
	if err := m.VolumeContext.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceSnapshot(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeAttachmentTemplateVolume) validateSourceSnapshot(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceSnapshot) { // not required
		return nil
	}

	if m.SourceSnapshot != nil {
		if err := m.SourceSnapshot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_snapshot")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeAttachmentTemplateVolume) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeAttachmentTemplateVolume) UnmarshalBinary(b []byte) error {
	var res VolumeAttachmentTemplateVolume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
