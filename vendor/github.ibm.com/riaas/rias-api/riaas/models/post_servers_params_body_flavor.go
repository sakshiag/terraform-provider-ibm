// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostServersParamsBodyFlavor FlavorIdentityByCRN
//
// The identity of the flavor the server is to have
// swagger:model postServersParamsBodyFlavor
type PostServersParamsBodyFlavor struct {

	// The CRN for this flavor
	Crn string `json:"crn,omitempty"`

	// The name for this flavor
	// Pattern: ^[A-Za-z][-A-Za-z0-9_.]*$
	Name *string `json:"name,omitempty"`
}

func (m *PostServersParamsBodyFlavor) UnmarshalJSON(b []byte) error {
	type PostServersParamsBodyFlavorAlias PostServersParamsBodyFlavor
	var t PostServersParamsBodyFlavorAlias
	if err := json.Unmarshal([]byte("{\"name\":\"u1.1x2\"}"), &t); err != nil {
		return err
	}
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*m = PostServersParamsBodyFlavor(t)
	return nil
}

// Validate validates this post servers params body flavor
func (m *PostServersParamsBodyFlavor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostServersParamsBodyFlavor) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `^[A-Za-z][-A-Za-z0-9_.]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostServersParamsBodyFlavor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostServersParamsBodyFlavor) UnmarshalBinary(b []byte) error {
	var res PostServersParamsBodyFlavor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
