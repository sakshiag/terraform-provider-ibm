// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RiaaserrorErrorsItems Error
// swagger:model riaaserrorErrorsItems
type RiaaserrorErrorsItems struct {

	// A snake case string succinctly identifying the problem
	// Pattern: ^[a-z]+(_[a-z]+)*$
	Code string `json:"code,omitempty"`

	// An explanation of the solution to the problem
	Message string `json:"message,omitempty"`

	// Link to documentation about this error
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	MoreInfo string `json:"more_info,omitempty"`

	// target
	Target *RiaaserrorErrorsItemsTarget `json:"target,omitempty"`
}

// Validate validates this riaaserror errors items
func (m *RiaaserrorErrorsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoreInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RiaaserrorErrorsItems) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.Pattern("code", "body", string(m.Code), `^[a-z]+(_[a-z]+)*$`); err != nil {
		return err
	}

	return nil
}

func (m *RiaaserrorErrorsItems) validateMoreInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.MoreInfo) { // not required
		return nil
	}

	if err := validate.Pattern("more_info", "body", string(m.MoreInfo), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *RiaaserrorErrorsItems) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RiaaserrorErrorsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RiaaserrorErrorsItems) UnmarshalBinary(b []byte) error {
	var res RiaaserrorErrorsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
