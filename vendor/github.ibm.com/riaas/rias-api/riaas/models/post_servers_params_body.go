// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostServersParamsBody ServerFromImageTemplate
// swagger:model postServersParamsBody
type PostServersParamsBody struct {

	// boot volume attachment
	BootVolumeAttachment *PostServersParamsBodyBootVolumeAttachment `json:"boot_volume_attachment,omitempty"`

	// flavor
	Flavor *PostServersParamsBodyFlavor `json:"flavor,omitempty"`

	// generation
	Generation Generation `json:"generation,omitempty"`

	// image
	Image *PostServersParamsBodyImage `json:"image,omitempty"`

	// keys
	Keys PostServersParamsBodyKeys `json:"keys,omitempty"`

	// The user-defined name for this server
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// network interfaces
	NetworkInterfaces PostServersParamsBodyNetworkInterfaces `json:"network_interfaces,omitempty"`

	// primary network interface
	PrimaryNetworkInterface *PostServersParamsBodyPrimaryNetworkInterface `json:"primary_network_interface,omitempty"`

	// profile
	Profile *PostServersParamsBodyProfile `json:"profile,omitempty"`

	// resource group
	ResourceGroup *PostServersParamsBodyResourceGroup `json:"resource_group,omitempty"`

	// A collection of tags for this resource
	Tags []string `json:"tags,omitempty"`

	// Server Type
	Type *string `json:"type,omitempty"`

	// User data to be made available when setting up the server
	UserData string `json:"user_data,omitempty"`

	// volume attachments
	VolumeAttachments PostServersParamsBodyVolumeAttachments `json:"volume_attachments,omitempty"`

	// vpc
	Vpc *PostServersParamsBodyVpc `json:"vpc,omitempty"`

	// zone
	Zone *NameReference `json:"zone,omitempty"`
}

// Validate validates this post servers params body
func (m *PostServersParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBootVolumeAttachment(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFlavor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGeneration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrimaryNetworkInterface(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResourceGroup(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVpc(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostServersParamsBody) validateBootVolumeAttachment(formats strfmt.Registry) error {

	if swag.IsZero(m.BootVolumeAttachment) { // not required
		return nil
	}

	if m.BootVolumeAttachment != nil {

		if err := m.BootVolumeAttachment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("boot_volume_attachment")
			}
			return err
		}
	}

	return nil
}

func (m *PostServersParamsBody) validateFlavor(formats strfmt.Registry) error {

	if swag.IsZero(m.Flavor) { // not required
		return nil
	}

	if m.Flavor != nil {

		if err := m.Flavor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flavor")
			}
			return err
		}
	}

	return nil
}

func (m *PostServersParamsBody) validateGeneration(formats strfmt.Registry) error {

	if swag.IsZero(m.Generation) { // not required
		return nil
	}

	if err := m.Generation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("generation")
		}
		return err
	}

	return nil
}

func (m *PostServersParamsBody) validateImage(formats strfmt.Registry) error {

	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {

		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *PostServersParamsBody) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *PostServersParamsBody) validatePrimaryNetworkInterface(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryNetworkInterface) { // not required
		return nil
	}

	if m.PrimaryNetworkInterface != nil {

		if err := m.PrimaryNetworkInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primary_network_interface")
			}
			return err
		}
	}

	return nil
}

func (m *PostServersParamsBody) validateProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.Profile) { // not required
		return nil
	}

	if m.Profile != nil {

		if err := m.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

func (m *PostServersParamsBody) validateResourceGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceGroup) { // not required
		return nil
	}

	if m.ResourceGroup != nil {

		if err := m.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_group")
			}
			return err
		}
	}

	return nil
}

func (m *PostServersParamsBody) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	return nil
}

var postServersParamsBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["virtual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postServersParamsBodyTypeTypePropEnum = append(postServersParamsBodyTypeTypePropEnum, v)
	}
}

const (
	// PostServersParamsBodyTypeVirtual captures enum value "virtual"
	PostServersParamsBodyTypeVirtual string = "virtual"
)

// prop value enum
func (m *PostServersParamsBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postServersParamsBodyTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostServersParamsBody) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *PostServersParamsBody) validateVpc(formats strfmt.Registry) error {

	if swag.IsZero(m.Vpc) { // not required
		return nil
	}

	if m.Vpc != nil {

		if err := m.Vpc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc")
			}
			return err
		}
	}

	return nil
}

func (m *PostServersParamsBody) validateZone(formats strfmt.Registry) error {

	if swag.IsZero(m.Zone) { // not required
		return nil
	}

	if m.Zone != nil {

		if err := m.Zone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostServersParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostServersParamsBody) UnmarshalBinary(b []byte) error {
	var res PostServersParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
