// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Server Server
// swagger:model server
type Server struct {

	// boot volume attachment
	BootVolumeAttachment *VolumeAttachmentReference `json:"boot_volume_attachment,omitempty"`

	// cpu
	CPU *ServerCPU `json:"cpu,omitempty"`

	// The date and time that the server was created
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The CRN for this server
	Crn string `json:"crn,omitempty"`

	// flavor
	Flavor *ServerFlavor `json:"flavor,omitempty"`

	// generation
	Generation Generation `json:"generation,omitempty"`

	// gpu
	Gpu *ServerGpu `json:"gpu,omitempty"`

	// The URL for this server
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The unique identifier for this server
	ID strfmt.UUID `json:"id,omitempty"`

	// image
	Image *ResourceReference `json:"image,omitempty"`

	// The amount of memory in megabytes
	// Maximum: 524288
	// Minimum: 512
	// Multiple Of: 256
	Memory int64 `json:"memory,omitempty"`

	// The user-defined name for this server
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// network interfaces
	NetworkInterfaces ServerNetworkInterfaces `json:"network_interfaces,omitempty"`

	// primary network interface
	PrimaryNetworkInterface *NetworkInterfaceReference `json:"primary_network_interface,omitempty"`

	// profile
	Profile *ResourceReference `json:"profile,omitempty"`

	// resource group
	ResourceGroup *ResourceReference `json:"resource_group,omitempty"`

	// The status of the server
	Status string `json:"status,omitempty"`

	// A collection of tags for this resource
	Tags []string `json:"tags,omitempty"`

	// Server Type
	Type string `json:"type,omitempty"`

	// volume attachments
	VolumeAttachments ServerVolumeAttachments `json:"volume_attachments,omitempty"`

	// vpc
	Vpc *ResourceReference `json:"vpc,omitempty"`

	// zone
	Zone *ServerZone `json:"zone,omitempty"`
}

// Validate validates this server
func (m *Server) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPU(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFlavor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGeneration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGpu(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHref(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResourceGroup(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVpc(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Server) validateCPU(formats strfmt.Registry) error {

	if swag.IsZero(m.CPU) { // not required
		return nil
	}

	if m.CPU != nil {

		if err := m.CPU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

func (m *Server) validateFlavor(formats strfmt.Registry) error {

	if swag.IsZero(m.Flavor) { // not required
		return nil
	}

	if m.Flavor != nil {

		if err := m.Flavor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flavor")
			}
			return err
		}
	}

	return nil
}

func (m *Server) validateGeneration(formats strfmt.Registry) error {

	if swag.IsZero(m.Generation) { // not required
		return nil
	}

	if err := m.Generation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("generation")
		}
		return err
	}

	return nil
}

func (m *Server) validateGpu(formats strfmt.Registry) error {

	if swag.IsZero(m.Gpu) { // not required
		return nil
	}

	if m.Gpu != nil {

		if err := m.Gpu.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpu")
			}
			return err
		}
	}

	return nil
}

func (m *Server) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.Pattern("href", "body", string(m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateImage(formats strfmt.Registry) error {

	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {

		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *Server) validateMemory(formats strfmt.Registry) error {

	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if err := validate.MinimumInt("memory", "body", int64(m.Memory), 512, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("memory", "body", int64(m.Memory), 524288, false); err != nil {
		return err
	}

	if err := validate.MultipleOf("memory", "body", float64(m.Memory), 256); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.Profile) { // not required
		return nil
	}

	if m.Profile != nil {

		if err := m.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

func (m *Server) validateResourceGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceGroup) { // not required
		return nil
	}

	if m.ResourceGroup != nil {

		if err := m.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_group")
			}
			return err
		}
	}

	return nil
}

var serverTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stopped","starting","running","pausing","paused","resuming","stopping","restarting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTypeStatusPropEnum = append(serverTypeStatusPropEnum, v)
	}
}

const (
	// ServerStatusStopped captures enum value "stopped"
	ServerStatusStopped string = "stopped"
	// ServerStatusStarting captures enum value "starting"
	ServerStatusStarting string = "starting"
	// ServerStatusRunning captures enum value "running"
	ServerStatusRunning string = "running"
	// ServerStatusPausing captures enum value "pausing"
	ServerStatusPausing string = "pausing"
	// ServerStatusPaused captures enum value "paused"
	ServerStatusPaused string = "paused"
	// ServerStatusResuming captures enum value "resuming"
	ServerStatusResuming string = "resuming"
	// ServerStatusStopping captures enum value "stopping"
	ServerStatusStopping string = "stopping"
	// ServerStatusRestarting captures enum value "restarting"
	ServerStatusRestarting string = "restarting"
)

// prop value enum
func (m *Server) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serverTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Server) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	return nil
}

var serverTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["virtual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTypeTypePropEnum = append(serverTypeTypePropEnum, v)
	}
}

const (
	// ServerTypeVirtual captures enum value "virtual"
	ServerTypeVirtual string = "virtual"
)

// prop value enum
func (m *Server) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serverTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Server) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateVpc(formats strfmt.Registry) error {

	if swag.IsZero(m.Vpc) { // not required
		return nil
	}

	if m.Vpc != nil {

		if err := m.Vpc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc")
			}
			return err
		}
	}

	return nil
}

func (m *Server) validateZone(formats strfmt.Registry) error {

	if swag.IsZero(m.Zone) { // not required
		return nil
	}

	if m.Zone != nil {

		if err := m.Zone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Server) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Server) UnmarshalBinary(b []byte) error {
	var res Server
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
