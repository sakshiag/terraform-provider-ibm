// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GetFlavorsOKBody FlavorCollection
// swagger:model getFlavorsOKBody
type GetFlavorsOKBody struct {
	Pagination

	// Collection of flavors
	Flavors []*Flavor `json:"flavors"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *GetFlavorsOKBody) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Pagination
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Pagination = aO0

	// now for regular properties
	var propsGetFlavorsOKBody struct {
		Flavors []*Flavor `json:"flavors"`
	}
	if err := swag.ReadJSON(raw, &propsGetFlavorsOKBody); err != nil {
		return err
	}
	m.Flavors = propsGetFlavorsOKBody.Flavors

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m GetFlavorsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.Pagination)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsGetFlavorsOKBody struct {
		Flavors []*Flavor `json:"flavors"`
	}
	propsGetFlavorsOKBody.Flavors = m.Flavors

	jsonDataPropsGetFlavorsOKBody, errGetFlavorsOKBody := swag.WriteJSON(propsGetFlavorsOKBody)
	if errGetFlavorsOKBody != nil {
		return nil, errGetFlavorsOKBody
	}
	_parts = append(_parts, jsonDataPropsGetFlavorsOKBody)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get flavors o k body
func (m *GetFlavorsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Pagination
	if err := m.Pagination.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlavors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetFlavorsOKBody) validateFlavors(formats strfmt.Registry) error {

	if swag.IsZero(m.Flavors) { // not required
		return nil
	}

	for i := 0; i < len(m.Flavors); i++ {
		if swag.IsZero(m.Flavors[i]) { // not required
			continue
		}

		if m.Flavors[i] != nil {
			if err := m.Flavors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flavors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetFlavorsOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetFlavorsOKBody) UnmarshalBinary(b []byte) error {
	var res GetFlavorsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
