// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostVolumesParamsBody VolumeTemplateFromSnapshot
// swagger:model postVolumesParamsBody
type PostVolumesParamsBody struct {

	// If set to true, this volume will be automatically deleted if the only server it is attached to is deleted
	AutoDelete *bool `json:"auto_delete,omitempty"`

	// The capacity of the volume in gigabytes
	// Minimum: 10
	Capacity int64 `json:"capacity,omitempty"`

	// encryption key
	EncryptionKey *PostVolumesParamsBodyEncryptionKey `json:"encryption_key,omitempty"`

	// The bandwidth for the volume
	// Enum: [1000 10000 100000]
	Iops int64 `json:"iops,omitempty"`

	// The user-defined name for this volume
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// profile
	Profile *PostVolumesParamsBodyProfile `json:"profile,omitempty"`

	// resource group
	ResourceGroup *PostVolumesParamsBodyResourceGroup `json:"resource_group,omitempty"`

	// zone
	Zone *PostVolumesParamsBodyZone `json:"zone,omitempty"`
}

// Validate validates this post volumes params body
func (m *PostVolumesParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostVolumesParamsBody) validateCapacity(formats strfmt.Registry) error {

	if swag.IsZero(m.Capacity) { // not required
		return nil
	}

	if err := validate.MinimumInt("capacity", "body", int64(m.Capacity), 10, false); err != nil {
		return err
	}

	return nil
}

func (m *PostVolumesParamsBody) validateEncryptionKey(formats strfmt.Registry) error {

	if swag.IsZero(m.EncryptionKey) { // not required
		return nil
	}

	if m.EncryptionKey != nil {
		if err := m.EncryptionKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryption_key")
			}
			return err
		}
	}

	return nil
}

var postVolumesParamsBodyTypeIopsPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1000,10000,100000]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postVolumesParamsBodyTypeIopsPropEnum = append(postVolumesParamsBodyTypeIopsPropEnum, v)
	}
}

// prop value enum
func (m *PostVolumesParamsBody) validateIopsEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, postVolumesParamsBodyTypeIopsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostVolumesParamsBody) validateIops(formats strfmt.Registry) error {

	if swag.IsZero(m.Iops) { // not required
		return nil
	}

	// value enum
	if err := m.validateIopsEnum("iops", "body", m.Iops); err != nil {
		return err
	}

	return nil
}

func (m *PostVolumesParamsBody) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *PostVolumesParamsBody) validateProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.Profile) { // not required
		return nil
	}

	if m.Profile != nil {
		if err := m.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

func (m *PostVolumesParamsBody) validateResourceGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceGroup) { // not required
		return nil
	}

	if m.ResourceGroup != nil {
		if err := m.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_group")
			}
			return err
		}
	}

	return nil
}

func (m *PostVolumesParamsBody) validateZone(formats strfmt.Registry) error {

	if swag.IsZero(m.Zone) { // not required
		return nil
	}

	if m.Zone != nil {
		if err := m.Zone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostVolumesParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostVolumesParamsBody) UnmarshalBinary(b []byte) error {
	var res PostVolumesParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
