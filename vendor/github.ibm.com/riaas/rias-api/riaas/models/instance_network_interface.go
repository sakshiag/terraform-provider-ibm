// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstanceNetworkInterface NetworkInterface
// swagger:model instance_network_interface
type InstanceNetworkInterface struct {

	// The date and time that the network interface was created
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The CRN for this network interface
	Crn string `json:"crn,omitempty"`

	// floating ips
	FloatingIps InstanceNetworkInterfaceFloatingIps `json:"floating_ips,omitempty"`

	// The URL for this network interface
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The unique identifier for this network interface
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this network interface
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// The network interface port speed in Mbps
	PortSpeed int64 `json:"port_speed,omitempty"`

	// The primary IPv4 address
	PrimaryIPV4Address string `json:"primary_ipv4_address,omitempty"`

	// The primary IPv6 address in compressed notation as specified by RFC 5952
	PrimaryIPV6Address string `json:"primary_ipv6_address,omitempty"`

	// resource group
	ResourceGroup *ResourceReference `json:"resource_group,omitempty"`

	// Collection seconary IP addresses
	SecondaryAddresses []string `json:"secondary_addresses,omitempty"`

	// security groups
	SecurityGroups InstanceNetworkInterfaceSecurityGroups `json:"security_groups,omitempty"`

	// The status of the volume
	Status string `json:"status,omitempty"`

	// subnet
	Subnet *ResourceReference `json:"subnet,omitempty"`

	// A collection of tags for this resource
	Tags []string `json:"tags,omitempty"`

	// The type of this network interface as it relates to a instance
	Type string `json:"type,omitempty"`
}

// Validate validates this instance network interface
func (m *InstanceNetworkInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResourceGroup(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSecondaryAddresses(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceNetworkInterface) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.Pattern("href", "body", string(m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *InstanceNetworkInterface) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *InstanceNetworkInterface) validateResourceGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceGroup) { // not required
		return nil
	}

	if m.ResourceGroup != nil {

		if err := m.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_group")
			}
			return err
		}
	}

	return nil
}

func (m *InstanceNetworkInterface) validateSecondaryAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.SecondaryAddresses) { // not required
		return nil
	}

	return nil
}

var instanceNetworkInterfaceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["available","failed","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceNetworkInterfaceTypeStatusPropEnum = append(instanceNetworkInterfaceTypeStatusPropEnum, v)
	}
}

const (
	// InstanceNetworkInterfaceStatusAvailable captures enum value "available"
	InstanceNetworkInterfaceStatusAvailable string = "available"
	// InstanceNetworkInterfaceStatusFailed captures enum value "failed"
	InstanceNetworkInterfaceStatusFailed string = "failed"
	// InstanceNetworkInterfaceStatusPending captures enum value "pending"
	InstanceNetworkInterfaceStatusPending string = "pending"
)

// prop value enum
func (m *InstanceNetworkInterface) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instanceNetworkInterfaceTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InstanceNetworkInterface) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *InstanceNetworkInterface) validateSubnet(formats strfmt.Registry) error {

	if swag.IsZero(m.Subnet) { // not required
		return nil
	}

	if m.Subnet != nil {

		if err := m.Subnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

func (m *InstanceNetworkInterface) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	return nil
}

var instanceNetworkInterfaceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["primary","secondary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceNetworkInterfaceTypeTypePropEnum = append(instanceNetworkInterfaceTypeTypePropEnum, v)
	}
}

const (
	// InstanceNetworkInterfaceTypePrimary captures enum value "primary"
	InstanceNetworkInterfaceTypePrimary string = "primary"
	// InstanceNetworkInterfaceTypeSecondary captures enum value "secondary"
	InstanceNetworkInterfaceTypeSecondary string = "secondary"
)

// prop value enum
func (m *InstanceNetworkInterface) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instanceNetworkInterfaceTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InstanceNetworkInterface) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceNetworkInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceNetworkInterface) UnmarshalBinary(b []byte) error {
	var res InstanceNetworkInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
