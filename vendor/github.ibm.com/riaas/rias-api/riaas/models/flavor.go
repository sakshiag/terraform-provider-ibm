// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Flavor Flavor
// swagger:model flavor
type Flavor struct {

	// cpu
	CPU *FlavorCPU `json:"cpu,omitempty"`

	// The CRN for this flavor
	Crn string `json:"crn,omitempty"`

	// gpu
	Gpu *FlavorGpu `json:"gpu,omitempty"`

	// The URL for this flavor
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The maximum network bandwidth
	MaxBandwidth int64 `json:"max_bandwidth,omitempty"`

	// The maximum iops
	MaxIops int64 `json:"max_iops,omitempty"`

	// The maximum number of network interfaces
	MaxNetworkInterfaces int64 `json:"max_network_interfaces,omitempty"`

	// The maximum number of volumes
	MaxVolumes int64 `json:"max_volumes,omitempty"`

	// The amount of memory in megabytes
	// Maximum: 524288
	// Minimum: 512
	// Multiple Of: 256
	Memory int64 `json:"memory,omitempty"`

	// The name for this flavor
	// Pattern: ^[A-Za-z][-A-Za-z0-9_.]*$
	Name *string `json:"name,omitempty"`
}

// Validate validates this flavor
func (m *Flavor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Flavor) validateCPU(formats strfmt.Registry) error {

	if swag.IsZero(m.CPU) { // not required
		return nil
	}

	if m.CPU != nil {
		if err := m.CPU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

func (m *Flavor) validateGpu(formats strfmt.Registry) error {

	if swag.IsZero(m.Gpu) { // not required
		return nil
	}

	if m.Gpu != nil {
		if err := m.Gpu.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpu")
			}
			return err
		}
	}

	return nil
}

func (m *Flavor) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.Pattern("href", "body", string(m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *Flavor) validateMemory(formats strfmt.Registry) error {

	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if err := validate.MinimumInt("memory", "body", int64(m.Memory), 512, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("memory", "body", int64(m.Memory), 524288, false); err != nil {
		return err
	}

	if err := validate.MultipleOf("memory", "body", float64(m.Memory), 256); err != nil {
		return err
	}

	return nil
}

func (m *Flavor) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `^[A-Za-z][-A-Za-z0-9_.]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Flavor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Flavor) UnmarshalBinary(b []byte) error {
	var res Flavor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
