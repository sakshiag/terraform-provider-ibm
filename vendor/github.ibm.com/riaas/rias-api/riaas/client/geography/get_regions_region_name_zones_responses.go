// Code generated by go-swagger; DO NOT EDIT.

package geography

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/riaas/rias-api/riaas/models"
)

// GetRegionsRegionNameZonesReader is a Reader for the GetRegionsRegionNameZones structure.
type GetRegionsRegionNameZonesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRegionsRegionNameZonesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetRegionsRegionNameZonesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetRegionsRegionNameZonesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetRegionsRegionNameZonesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewGetRegionsRegionNameZonesOK creates a GetRegionsRegionNameZonesOK with default headers values
func NewGetRegionsRegionNameZonesOK() *GetRegionsRegionNameZonesOK {
	return &GetRegionsRegionNameZonesOK{}
}

/*GetRegionsRegionNameZonesOK handles this case with default header values.

dummy
*/
type GetRegionsRegionNameZonesOK struct {
	Payload *models.GetRegionsRegionNameZonesOKBody
}

func (o *GetRegionsRegionNameZonesOK) Error() string {
	return fmt.Sprintf("[GET /regions/{region_name}/zones][%d] getRegionsRegionNameZonesOK  %+v", 200, o.Payload)
}

func (o *GetRegionsRegionNameZonesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetRegionsRegionNameZonesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRegionsRegionNameZonesNotFound creates a GetRegionsRegionNameZonesNotFound with default headers values
func NewGetRegionsRegionNameZonesNotFound() *GetRegionsRegionNameZonesNotFound {
	return &GetRegionsRegionNameZonesNotFound{}
}

/*GetRegionsRegionNameZonesNotFound handles this case with default header values.

error
*/
type GetRegionsRegionNameZonesNotFound struct {
	Payload *models.Riaaserror
}

func (o *GetRegionsRegionNameZonesNotFound) Error() string {
	return fmt.Sprintf("[GET /regions/{region_name}/zones][%d] getRegionsRegionNameZonesNotFound  %+v", 404, o.Payload)
}

func (o *GetRegionsRegionNameZonesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRegionsRegionNameZonesDefault creates a GetRegionsRegionNameZonesDefault with default headers values
func NewGetRegionsRegionNameZonesDefault(code int) *GetRegionsRegionNameZonesDefault {
	return &GetRegionsRegionNameZonesDefault{
		_statusCode: code,
	}
}

/*GetRegionsRegionNameZonesDefault handles this case with default header values.

unexpectederror
*/
type GetRegionsRegionNameZonesDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the get regions region name zones default response
func (o *GetRegionsRegionNameZonesDefault) Code() int {
	return o._statusCode
}

func (o *GetRegionsRegionNameZonesDefault) Error() string {
	return fmt.Sprintf("[GET /regions/{region_name}/zones][%d] GetRegionsRegionNameZones default  %+v", o._statusCode, o.Payload)
}

func (o *GetRegionsRegionNameZonesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
