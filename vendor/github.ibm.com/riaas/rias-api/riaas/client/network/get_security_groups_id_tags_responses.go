// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/riaas/rias-api/riaas/models"
)

// GetSecurityGroupsIDTagsReader is a Reader for the GetSecurityGroupsIDTags structure.
type GetSecurityGroupsIDTagsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSecurityGroupsIDTagsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSecurityGroupsIDTagsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetSecurityGroupsIDTagsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetSecurityGroupsIDTagsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewGetSecurityGroupsIDTagsOK creates a GetSecurityGroupsIDTagsOK with default headers values
func NewGetSecurityGroupsIDTagsOK() *GetSecurityGroupsIDTagsOK {
	return &GetSecurityGroupsIDTagsOK{}
}

/*GetSecurityGroupsIDTagsOK handles this case with default header values.

dummy
*/
type GetSecurityGroupsIDTagsOK struct {
	Payload *models.GetSecurityGroupsIDTagsOKBody
}

func (o *GetSecurityGroupsIDTagsOK) Error() string {
	return fmt.Sprintf("[GET /security_groups/{id}/tags][%d] getSecurityGroupsIdTagsOK  %+v", 200, o.Payload)
}

func (o *GetSecurityGroupsIDTagsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetSecurityGroupsIDTagsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSecurityGroupsIDTagsNotFound creates a GetSecurityGroupsIDTagsNotFound with default headers values
func NewGetSecurityGroupsIDTagsNotFound() *GetSecurityGroupsIDTagsNotFound {
	return &GetSecurityGroupsIDTagsNotFound{}
}

/*GetSecurityGroupsIDTagsNotFound handles this case with default header values.

error
*/
type GetSecurityGroupsIDTagsNotFound struct {
	Payload *models.Riaaserror
}

func (o *GetSecurityGroupsIDTagsNotFound) Error() string {
	return fmt.Sprintf("[GET /security_groups/{id}/tags][%d] getSecurityGroupsIdTagsNotFound  %+v", 404, o.Payload)
}

func (o *GetSecurityGroupsIDTagsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSecurityGroupsIDTagsDefault creates a GetSecurityGroupsIDTagsDefault with default headers values
func NewGetSecurityGroupsIDTagsDefault(code int) *GetSecurityGroupsIDTagsDefault {
	return &GetSecurityGroupsIDTagsDefault{
		_statusCode: code,
	}
}

/*GetSecurityGroupsIDTagsDefault handles this case with default header values.

unexpectederror
*/
type GetSecurityGroupsIDTagsDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the get security groups ID tags default response
func (o *GetSecurityGroupsIDTagsDefault) Code() int {
	return o._statusCode
}

func (o *GetSecurityGroupsIDTagsDefault) Error() string {
	return fmt.Sprintf("[GET /security_groups/{id}/tags][%d] GetSecurityGroupsIDTags default  %+v", o._statusCode, o.Payload)
}

func (o *GetSecurityGroupsIDTagsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
