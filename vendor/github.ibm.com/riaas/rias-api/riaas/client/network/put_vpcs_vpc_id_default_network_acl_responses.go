// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/riaas/rias-api/riaas/models"
)

// PutVpcsVpcIDDefaultNetworkACLReader is a Reader for the PutVpcsVpcIDDefaultNetworkACL structure.
type PutVpcsVpcIDDefaultNetworkACLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutVpcsVpcIDDefaultNetworkACLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPutVpcsVpcIDDefaultNetworkACLCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutVpcsVpcIDDefaultNetworkACLBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutVpcsVpcIDDefaultNetworkACLDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewPutVpcsVpcIDDefaultNetworkACLCreated creates a PutVpcsVpcIDDefaultNetworkACLCreated with default headers values
func NewPutVpcsVpcIDDefaultNetworkACLCreated() *PutVpcsVpcIDDefaultNetworkACLCreated {
	return &PutVpcsVpcIDDefaultNetworkACLCreated{}
}

/*PutVpcsVpcIDDefaultNetworkACLCreated handles this case with default header values.

dummy
*/
type PutVpcsVpcIDDefaultNetworkACLCreated struct {
	Payload *models.NetworkACL
}

func (o *PutVpcsVpcIDDefaultNetworkACLCreated) Error() string {
	return fmt.Sprintf("[PUT /vpcs/{vpc_id}/default_network_acl][%d] putVpcsVpcIdDefaultNetworkAclCreated  %+v", 201, o.Payload)
}

func (o *PutVpcsVpcIDDefaultNetworkACLCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NetworkACL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVpcsVpcIDDefaultNetworkACLBadRequest creates a PutVpcsVpcIDDefaultNetworkACLBadRequest with default headers values
func NewPutVpcsVpcIDDefaultNetworkACLBadRequest() *PutVpcsVpcIDDefaultNetworkACLBadRequest {
	return &PutVpcsVpcIDDefaultNetworkACLBadRequest{}
}

/*PutVpcsVpcIDDefaultNetworkACLBadRequest handles this case with default header values.

error
*/
type PutVpcsVpcIDDefaultNetworkACLBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PutVpcsVpcIDDefaultNetworkACLBadRequest) Error() string {
	return fmt.Sprintf("[PUT /vpcs/{vpc_id}/default_network_acl][%d] putVpcsVpcIdDefaultNetworkAclBadRequest  %+v", 400, o.Payload)
}

func (o *PutVpcsVpcIDDefaultNetworkACLBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVpcsVpcIDDefaultNetworkACLDefault creates a PutVpcsVpcIDDefaultNetworkACLDefault with default headers values
func NewPutVpcsVpcIDDefaultNetworkACLDefault(code int) *PutVpcsVpcIDDefaultNetworkACLDefault {
	return &PutVpcsVpcIDDefaultNetworkACLDefault{
		_statusCode: code,
	}
}

/*PutVpcsVpcIDDefaultNetworkACLDefault handles this case with default header values.

unexpectederror
*/
type PutVpcsVpcIDDefaultNetworkACLDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the put vpcs vpc ID default network ACL default response
func (o *PutVpcsVpcIDDefaultNetworkACLDefault) Code() int {
	return o._statusCode
}

func (o *PutVpcsVpcIDDefaultNetworkACLDefault) Error() string {
	return fmt.Sprintf("[PUT /vpcs/{vpc_id}/default_network_acl][%d] PutVpcsVpcIDDefaultNetworkACL default  %+v", o._statusCode, o.Payload)
}

func (o *PutVpcsVpcIDDefaultNetworkACLDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
