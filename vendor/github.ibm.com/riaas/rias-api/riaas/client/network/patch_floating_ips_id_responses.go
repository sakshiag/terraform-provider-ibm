// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/riaas/rias-api/riaas/models"
)

// PatchFloatingIpsIDReader is a Reader for the PatchFloatingIpsID structure.
type PatchFloatingIpsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchFloatingIpsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchFloatingIpsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchFloatingIpsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchFloatingIpsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchFloatingIpsIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewPatchFloatingIpsIDOK creates a PatchFloatingIpsIDOK with default headers values
func NewPatchFloatingIpsIDOK() *PatchFloatingIpsIDOK {
	return &PatchFloatingIpsIDOK{}
}

/*PatchFloatingIpsIDOK handles this case with default header values.

dummy
*/
type PatchFloatingIpsIDOK struct {
	Payload *models.FloatingIP
}

func (o *PatchFloatingIpsIDOK) Error() string {
	return fmt.Sprintf("[PATCH /floating_ips/{id}][%d] patchFloatingIpsIdOK  %+v", 200, o.Payload)
}

func (o *PatchFloatingIpsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FloatingIP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchFloatingIpsIDBadRequest creates a PatchFloatingIpsIDBadRequest with default headers values
func NewPatchFloatingIpsIDBadRequest() *PatchFloatingIpsIDBadRequest {
	return &PatchFloatingIpsIDBadRequest{}
}

/*PatchFloatingIpsIDBadRequest handles this case with default header values.

error
*/
type PatchFloatingIpsIDBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PatchFloatingIpsIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /floating_ips/{id}][%d] patchFloatingIpsIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchFloatingIpsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchFloatingIpsIDNotFound creates a PatchFloatingIpsIDNotFound with default headers values
func NewPatchFloatingIpsIDNotFound() *PatchFloatingIpsIDNotFound {
	return &PatchFloatingIpsIDNotFound{}
}

/*PatchFloatingIpsIDNotFound handles this case with default header values.

error
*/
type PatchFloatingIpsIDNotFound struct {
	Payload *models.Riaaserror
}

func (o *PatchFloatingIpsIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /floating_ips/{id}][%d] patchFloatingIpsIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchFloatingIpsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchFloatingIpsIDDefault creates a PatchFloatingIpsIDDefault with default headers values
func NewPatchFloatingIpsIDDefault(code int) *PatchFloatingIpsIDDefault {
	return &PatchFloatingIpsIDDefault{
		_statusCode: code,
	}
}

/*PatchFloatingIpsIDDefault handles this case with default header values.

unexpectederror
*/
type PatchFloatingIpsIDDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the patch floating ips ID default response
func (o *PatchFloatingIpsIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchFloatingIpsIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /floating_ips/{id}][%d] PatchFloatingIpsID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchFloatingIpsIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
