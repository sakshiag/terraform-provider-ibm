// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/riaas/rias-api/riaas/models"
)

// GetFloatingIpsIDTagsTagNameReader is a Reader for the GetFloatingIpsIDTagsTagName structure.
type GetFloatingIpsIDTagsTagNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFloatingIpsIDTagsTagNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewGetFloatingIpsIDTagsTagNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetFloatingIpsIDTagsTagNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetFloatingIpsIDTagsTagNameDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewGetFloatingIpsIDTagsTagNameNoContent creates a GetFloatingIpsIDTagsTagNameNoContent with default headers values
func NewGetFloatingIpsIDTagsTagNameNoContent() *GetFloatingIpsIDTagsTagNameNoContent {
	return &GetFloatingIpsIDTagsTagNameNoContent{}
}

/*GetFloatingIpsIDTagsTagNameNoContent handles this case with default header values.

error
*/
type GetFloatingIpsIDTagsTagNameNoContent struct {
	Payload *models.Riaaserror
}

func (o *GetFloatingIpsIDTagsTagNameNoContent) Error() string {
	return fmt.Sprintf("[GET /floating_ips/{id}/tags/{tag_name}][%d] getFloatingIpsIdTagsTagNameNoContent  %+v", 204, o.Payload)
}

func (o *GetFloatingIpsIDTagsTagNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFloatingIpsIDTagsTagNameNotFound creates a GetFloatingIpsIDTagsTagNameNotFound with default headers values
func NewGetFloatingIpsIDTagsTagNameNotFound() *GetFloatingIpsIDTagsTagNameNotFound {
	return &GetFloatingIpsIDTagsTagNameNotFound{}
}

/*GetFloatingIpsIDTagsTagNameNotFound handles this case with default header values.

error
*/
type GetFloatingIpsIDTagsTagNameNotFound struct {
	Payload *models.Riaaserror
}

func (o *GetFloatingIpsIDTagsTagNameNotFound) Error() string {
	return fmt.Sprintf("[GET /floating_ips/{id}/tags/{tag_name}][%d] getFloatingIpsIdTagsTagNameNotFound  %+v", 404, o.Payload)
}

func (o *GetFloatingIpsIDTagsTagNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFloatingIpsIDTagsTagNameDefault creates a GetFloatingIpsIDTagsTagNameDefault with default headers values
func NewGetFloatingIpsIDTagsTagNameDefault(code int) *GetFloatingIpsIDTagsTagNameDefault {
	return &GetFloatingIpsIDTagsTagNameDefault{
		_statusCode: code,
	}
}

/*GetFloatingIpsIDTagsTagNameDefault handles this case with default header values.

unexpectederror
*/
type GetFloatingIpsIDTagsTagNameDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the get floating ips ID tags tag name default response
func (o *GetFloatingIpsIDTagsTagNameDefault) Code() int {
	return o._statusCode
}

func (o *GetFloatingIpsIDTagsTagNameDefault) Error() string {
	return fmt.Sprintf("[GET /floating_ips/{id}/tags/{tag_name}][%d] GetFloatingIpsIDTagsTagName default  %+v", o._statusCode, o.Payload)
}

func (o *GetFloatingIpsIDTagsTagNameDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
