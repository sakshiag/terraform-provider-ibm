// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/riaas/rias-api/riaas/models"
)

// GetPublicGatewaysIDTagsReader is a Reader for the GetPublicGatewaysIDTags structure.
type GetPublicGatewaysIDTagsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPublicGatewaysIDTagsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPublicGatewaysIDTagsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetPublicGatewaysIDTagsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetPublicGatewaysIDTagsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewGetPublicGatewaysIDTagsOK creates a GetPublicGatewaysIDTagsOK with default headers values
func NewGetPublicGatewaysIDTagsOK() *GetPublicGatewaysIDTagsOK {
	return &GetPublicGatewaysIDTagsOK{}
}

/*GetPublicGatewaysIDTagsOK handles this case with default header values.

dummy
*/
type GetPublicGatewaysIDTagsOK struct {
	Payload *models.GetPublicGatewaysIDTagsOKBody
}

func (o *GetPublicGatewaysIDTagsOK) Error() string {
	return fmt.Sprintf("[GET /public_gateways/{id}/tags][%d] getPublicGatewaysIdTagsOK  %+v", 200, o.Payload)
}

func (o *GetPublicGatewaysIDTagsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetPublicGatewaysIDTagsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicGatewaysIDTagsNotFound creates a GetPublicGatewaysIDTagsNotFound with default headers values
func NewGetPublicGatewaysIDTagsNotFound() *GetPublicGatewaysIDTagsNotFound {
	return &GetPublicGatewaysIDTagsNotFound{}
}

/*GetPublicGatewaysIDTagsNotFound handles this case with default header values.

error
*/
type GetPublicGatewaysIDTagsNotFound struct {
	Payload *models.Riaaserror
}

func (o *GetPublicGatewaysIDTagsNotFound) Error() string {
	return fmt.Sprintf("[GET /public_gateways/{id}/tags][%d] getPublicGatewaysIdTagsNotFound  %+v", 404, o.Payload)
}

func (o *GetPublicGatewaysIDTagsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicGatewaysIDTagsDefault creates a GetPublicGatewaysIDTagsDefault with default headers values
func NewGetPublicGatewaysIDTagsDefault(code int) *GetPublicGatewaysIDTagsDefault {
	return &GetPublicGatewaysIDTagsDefault{
		_statusCode: code,
	}
}

/*GetPublicGatewaysIDTagsDefault handles this case with default header values.

unexpectederror
*/
type GetPublicGatewaysIDTagsDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the get public gateways ID tags default response
func (o *GetPublicGatewaysIDTagsDefault) Code() int {
	return o._statusCode
}

func (o *GetPublicGatewaysIDTagsDefault) Error() string {
	return fmt.Sprintf("[GET /public_gateways/{id}/tags][%d] GetPublicGatewaysIDTags default  %+v", o._statusCode, o.Payload)
}

func (o *GetPublicGatewaysIDTagsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
