// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/riaas/rias-api/riaas/models"
)

// GetSubnetsServerIDTagsReader is a Reader for the GetSubnetsServerIDTags structure.
type GetSubnetsServerIDTagsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSubnetsServerIDTagsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSubnetsServerIDTagsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetSubnetsServerIDTagsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetSubnetsServerIDTagsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewGetSubnetsServerIDTagsOK creates a GetSubnetsServerIDTagsOK with default headers values
func NewGetSubnetsServerIDTagsOK() *GetSubnetsServerIDTagsOK {
	return &GetSubnetsServerIDTagsOK{}
}

/*GetSubnetsServerIDTagsOK handles this case with default header values.

dummy
*/
type GetSubnetsServerIDTagsOK struct {
	Payload *models.GetSubnetsServerIDTagsOKBody
}

func (o *GetSubnetsServerIDTagsOK) Error() string {
	return fmt.Sprintf("[GET /subnets/{server_id}/tags][%d] getSubnetsServerIdTagsOK  %+v", 200, o.Payload)
}

func (o *GetSubnetsServerIDTagsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetSubnetsServerIDTagsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubnetsServerIDTagsNotFound creates a GetSubnetsServerIDTagsNotFound with default headers values
func NewGetSubnetsServerIDTagsNotFound() *GetSubnetsServerIDTagsNotFound {
	return &GetSubnetsServerIDTagsNotFound{}
}

/*GetSubnetsServerIDTagsNotFound handles this case with default header values.

error
*/
type GetSubnetsServerIDTagsNotFound struct {
	Payload *models.Riaaserror
}

func (o *GetSubnetsServerIDTagsNotFound) Error() string {
	return fmt.Sprintf("[GET /subnets/{server_id}/tags][%d] getSubnetsServerIdTagsNotFound  %+v", 404, o.Payload)
}

func (o *GetSubnetsServerIDTagsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubnetsServerIDTagsDefault creates a GetSubnetsServerIDTagsDefault with default headers values
func NewGetSubnetsServerIDTagsDefault(code int) *GetSubnetsServerIDTagsDefault {
	return &GetSubnetsServerIDTagsDefault{
		_statusCode: code,
	}
}

/*GetSubnetsServerIDTagsDefault handles this case with default header values.

unexpectederror
*/
type GetSubnetsServerIDTagsDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the get subnets server ID tags default response
func (o *GetSubnetsServerIDTagsDefault) Code() int {
	return o._statusCode
}

func (o *GetSubnetsServerIDTagsDefault) Error() string {
	return fmt.Sprintf("[GET /subnets/{server_id}/tags][%d] GetSubnetsServerIDTags default  %+v", o._statusCode, o.Payload)
}

func (o *GetSubnetsServerIDTagsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
