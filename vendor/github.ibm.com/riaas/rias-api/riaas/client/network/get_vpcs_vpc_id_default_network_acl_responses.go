// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/riaas/rias-api/riaas/models"
)

// GetVpcsVpcIDDefaultNetworkACLReader is a Reader for the GetVpcsVpcIDDefaultNetworkACL structure.
type GetVpcsVpcIDDefaultNetworkACLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVpcsVpcIDDefaultNetworkACLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetVpcsVpcIDDefaultNetworkACLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetVpcsVpcIDDefaultNetworkACLNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetVpcsVpcIDDefaultNetworkACLDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewGetVpcsVpcIDDefaultNetworkACLOK creates a GetVpcsVpcIDDefaultNetworkACLOK with default headers values
func NewGetVpcsVpcIDDefaultNetworkACLOK() *GetVpcsVpcIDDefaultNetworkACLOK {
	return &GetVpcsVpcIDDefaultNetworkACLOK{}
}

/*GetVpcsVpcIDDefaultNetworkACLOK handles this case with default header values.

dummy
*/
type GetVpcsVpcIDDefaultNetworkACLOK struct {
	Payload *models.NetworkACL
}

func (o *GetVpcsVpcIDDefaultNetworkACLOK) Error() string {
	return fmt.Sprintf("[GET /vpcs/{vpc_id}/default_network_acl][%d] getVpcsVpcIdDefaultNetworkAclOK  %+v", 200, o.Payload)
}

func (o *GetVpcsVpcIDDefaultNetworkACLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NetworkACL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVpcsVpcIDDefaultNetworkACLNotFound creates a GetVpcsVpcIDDefaultNetworkACLNotFound with default headers values
func NewGetVpcsVpcIDDefaultNetworkACLNotFound() *GetVpcsVpcIDDefaultNetworkACLNotFound {
	return &GetVpcsVpcIDDefaultNetworkACLNotFound{}
}

/*GetVpcsVpcIDDefaultNetworkACLNotFound handles this case with default header values.

error
*/
type GetVpcsVpcIDDefaultNetworkACLNotFound struct {
	Payload *models.Riaaserror
}

func (o *GetVpcsVpcIDDefaultNetworkACLNotFound) Error() string {
	return fmt.Sprintf("[GET /vpcs/{vpc_id}/default_network_acl][%d] getVpcsVpcIdDefaultNetworkAclNotFound  %+v", 404, o.Payload)
}

func (o *GetVpcsVpcIDDefaultNetworkACLNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVpcsVpcIDDefaultNetworkACLDefault creates a GetVpcsVpcIDDefaultNetworkACLDefault with default headers values
func NewGetVpcsVpcIDDefaultNetworkACLDefault(code int) *GetVpcsVpcIDDefaultNetworkACLDefault {
	return &GetVpcsVpcIDDefaultNetworkACLDefault{
		_statusCode: code,
	}
}

/*GetVpcsVpcIDDefaultNetworkACLDefault handles this case with default header values.

unexpectederror
*/
type GetVpcsVpcIDDefaultNetworkACLDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the get vpcs vpc ID default network ACL default response
func (o *GetVpcsVpcIDDefaultNetworkACLDefault) Code() int {
	return o._statusCode
}

func (o *GetVpcsVpcIDDefaultNetworkACLDefault) Error() string {
	return fmt.Sprintf("[GET /vpcs/{vpc_id}/default_network_acl][%d] GetVpcsVpcIDDefaultNetworkACL default  %+v", o._statusCode, o.Payload)
}

func (o *GetVpcsVpcIDDefaultNetworkACLDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
