// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/riaas/rias-api/riaas/models"
)

// GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressReader is a Reader for the GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddress structure.
type GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressOK creates a GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressOK with default headers values
func NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressOK() *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressOK {
	return &GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressOK{}
}

/*GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressOK handles this case with default header values.

The associated floating IP was retrieved successfully.
*/
type GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressOK struct {
	Payload *models.FloatingIP
}

func (o *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressOK) Error() string {
	return fmt.Sprintf("[GET /instances/{instance_id}/network_interfaces/{network_interface_id}/floating_ips/{address}][%d] getInstancesInstanceIdNetworkInterfacesNetworkInterfaceIdFloatingIpsAddressOK  %+v", 200, o.Payload)
}

func (o *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FloatingIP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound creates a GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound with default headers values
func NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound() *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound {
	return &GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound{}
}

/*GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound handles this case with default header values.

The floating IP address is not associated with a network interface with the specified identifier
*/
type GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound struct {
	Payload *models.Riaaserror
}

func (o *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound) Error() string {
	return fmt.Sprintf("[GET /instances/{instance_id}/network_interfaces/{network_interface_id}/floating_ips/{address}][%d] getInstancesInstanceIdNetworkInterfacesNetworkInterfaceIdFloatingIpsAddressNotFound  %+v", 404, o.Payload)
}

func (o *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault creates a GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault with default headers values
func NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault(code int) *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault {
	return &GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault{
		_statusCode: code,
	}
}

/*GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault handles this case with default header values.

unexpectederror
*/
type GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the get instances instance ID network interfaces network interface ID floating ips address default response
func (o *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault) Code() int {
	return o._statusCode
}

func (o *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault) Error() string {
	return fmt.Sprintf("[GET /instances/{instance_id}/network_interfaces/{network_interface_id}/floating_ips/{address}][%d] GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddress default  %+v", o._statusCode, o.Payload)
}

func (o *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
