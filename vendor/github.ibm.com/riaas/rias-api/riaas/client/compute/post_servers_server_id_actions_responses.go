// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.ibm.com/riaas/rias-api/riaas/models"
)

// PostServersServerIDActionsReader is a Reader for the PostServersServerIDActions structure.
type PostServersServerIDActionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostServersServerIDActionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostServersServerIDActionsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostServersServerIDActionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPostServersServerIDActionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewPostServersServerIDActionsCreated creates a PostServersServerIDActionsCreated with default headers values
func NewPostServersServerIDActionsCreated() *PostServersServerIDActionsCreated {
	return &PostServersServerIDActionsCreated{}
}

/*PostServersServerIDActionsCreated handles this case with default header values.

dummy
*/
type PostServersServerIDActionsCreated struct {
	Payload *models.ServerAction
}

func (o *PostServersServerIDActionsCreated) Error() string {
	return fmt.Sprintf("[POST /servers/{server_id}/actions][%d] postServersServerIdActionsCreated  %+v", 201, o.Payload)
}

func (o *PostServersServerIDActionsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServerAction)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostServersServerIDActionsBadRequest creates a PostServersServerIDActionsBadRequest with default headers values
func NewPostServersServerIDActionsBadRequest() *PostServersServerIDActionsBadRequest {
	return &PostServersServerIDActionsBadRequest{}
}

/*PostServersServerIDActionsBadRequest handles this case with default header values.

error
*/
type PostServersServerIDActionsBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PostServersServerIDActionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /servers/{server_id}/actions][%d] postServersServerIdActionsBadRequest  %+v", 400, o.Payload)
}

func (o *PostServersServerIDActionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostServersServerIDActionsDefault creates a PostServersServerIDActionsDefault with default headers values
func NewPostServersServerIDActionsDefault(code int) *PostServersServerIDActionsDefault {
	return &PostServersServerIDActionsDefault{
		_statusCode: code,
	}
}

/*PostServersServerIDActionsDefault handles this case with default header values.

unexpectederror
*/
type PostServersServerIDActionsDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the post servers server ID actions default response
func (o *PostServersServerIDActionsDefault) Code() int {
	return o._statusCode
}

func (o *PostServersServerIDActionsDefault) Error() string {
	return fmt.Sprintf("[POST /servers/{server_id}/actions][%d] PostServersServerIDActions default  %+v", o._statusCode, o.Payload)
}

func (o *PostServersServerIDActionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
