// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetServersServerIDNetworkInterfacesParams creates a new GetServersServerIDNetworkInterfacesParams object
// with the default values initialized.
func NewGetServersServerIDNetworkInterfacesParams() *GetServersServerIDNetworkInterfacesParams {
	var ()
	return &GetServersServerIDNetworkInterfacesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetServersServerIDNetworkInterfacesParamsWithTimeout creates a new GetServersServerIDNetworkInterfacesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetServersServerIDNetworkInterfacesParamsWithTimeout(timeout time.Duration) *GetServersServerIDNetworkInterfacesParams {
	var ()
	return &GetServersServerIDNetworkInterfacesParams{

		timeout: timeout,
	}
}

// NewGetServersServerIDNetworkInterfacesParamsWithContext creates a new GetServersServerIDNetworkInterfacesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetServersServerIDNetworkInterfacesParamsWithContext(ctx context.Context) *GetServersServerIDNetworkInterfacesParams {
	var ()
	return &GetServersServerIDNetworkInterfacesParams{

		Context: ctx,
	}
}

// NewGetServersServerIDNetworkInterfacesParamsWithHTTPClient creates a new GetServersServerIDNetworkInterfacesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetServersServerIDNetworkInterfacesParamsWithHTTPClient(client *http.Client) *GetServersServerIDNetworkInterfacesParams {
	var ()
	return &GetServersServerIDNetworkInterfacesParams{
		HTTPClient: client,
	}
}

/*GetServersServerIDNetworkInterfacesParams contains all the parameters to send to the API endpoint
for the get servers server ID network interfaces operation typically these are written to a http.Request
*/
type GetServersServerIDNetworkInterfacesParams struct {

	/*ResourceGroupID
	  Filters the collection to resources within the resource group of the specified identifier

	*/
	ResourceGroupID *string
	/*ServerID
	  The server identifier

	*/
	ServerID string
	/*Tag
	  Filters the collection to resources containing the specified tag

	*/
	Tag *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get servers server ID network interfaces params
func (o *GetServersServerIDNetworkInterfacesParams) WithTimeout(timeout time.Duration) *GetServersServerIDNetworkInterfacesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get servers server ID network interfaces params
func (o *GetServersServerIDNetworkInterfacesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get servers server ID network interfaces params
func (o *GetServersServerIDNetworkInterfacesParams) WithContext(ctx context.Context) *GetServersServerIDNetworkInterfacesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get servers server ID network interfaces params
func (o *GetServersServerIDNetworkInterfacesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get servers server ID network interfaces params
func (o *GetServersServerIDNetworkInterfacesParams) WithHTTPClient(client *http.Client) *GetServersServerIDNetworkInterfacesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get servers server ID network interfaces params
func (o *GetServersServerIDNetworkInterfacesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithResourceGroupID adds the resourceGroupID to the get servers server ID network interfaces params
func (o *GetServersServerIDNetworkInterfacesParams) WithResourceGroupID(resourceGroupID *string) *GetServersServerIDNetworkInterfacesParams {
	o.SetResourceGroupID(resourceGroupID)
	return o
}

// SetResourceGroupID adds the resourceGroupId to the get servers server ID network interfaces params
func (o *GetServersServerIDNetworkInterfacesParams) SetResourceGroupID(resourceGroupID *string) {
	o.ResourceGroupID = resourceGroupID
}

// WithServerID adds the serverID to the get servers server ID network interfaces params
func (o *GetServersServerIDNetworkInterfacesParams) WithServerID(serverID string) *GetServersServerIDNetworkInterfacesParams {
	o.SetServerID(serverID)
	return o
}

// SetServerID adds the serverId to the get servers server ID network interfaces params
func (o *GetServersServerIDNetworkInterfacesParams) SetServerID(serverID string) {
	o.ServerID = serverID
}

// WithTag adds the tag to the get servers server ID network interfaces params
func (o *GetServersServerIDNetworkInterfacesParams) WithTag(tag *string) *GetServersServerIDNetworkInterfacesParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the get servers server ID network interfaces params
func (o *GetServersServerIDNetworkInterfacesParams) SetTag(tag *string) {
	o.Tag = tag
}

// WriteToRequest writes these params to a swagger request
func (o *GetServersServerIDNetworkInterfacesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ResourceGroupID != nil {

		// query param resource_group.id
		var qrResourceGroupID string
		if o.ResourceGroupID != nil {
			qrResourceGroupID = *o.ResourceGroupID
		}
		qResourceGroupID := qrResourceGroupID
		if qResourceGroupID != "" {
			if err := r.SetQueryParam("resource_group.id", qResourceGroupID); err != nil {
				return err
			}
		}

	}

	// path param server_id
	if err := r.SetPathParam("server_id", o.ServerID); err != nil {
		return err
	}

	if o.Tag != nil {

		// query param tag
		var qrTag string
		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {
			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
