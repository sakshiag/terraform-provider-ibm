// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.ibm.com/riaas/rias-api/riaas/models"
)

// GetServersServerIDActionsReader is a Reader for the GetServersServerIDActions structure.
type GetServersServerIDActionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServersServerIDActionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetServersServerIDActionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetServersServerIDActionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetServersServerIDActionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewGetServersServerIDActionsOK creates a GetServersServerIDActionsOK with default headers values
func NewGetServersServerIDActionsOK() *GetServersServerIDActionsOK {
	return &GetServersServerIDActionsOK{}
}

/*GetServersServerIDActionsOK handles this case with default header values.

dummy
*/
type GetServersServerIDActionsOK struct {
	Payload *models.GetServersServerIDActionsOKBody
}

func (o *GetServersServerIDActionsOK) Error() string {
	return fmt.Sprintf("[GET /servers/{server_id}/actions][%d] getServersServerIdActionsOK  %+v", 200, o.Payload)
}

func (o *GetServersServerIDActionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetServersServerIDActionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServersServerIDActionsNotFound creates a GetServersServerIDActionsNotFound with default headers values
func NewGetServersServerIDActionsNotFound() *GetServersServerIDActionsNotFound {
	return &GetServersServerIDActionsNotFound{}
}

/*GetServersServerIDActionsNotFound handles this case with default header values.

error
*/
type GetServersServerIDActionsNotFound struct {
	Payload *models.Riaaserror
}

func (o *GetServersServerIDActionsNotFound) Error() string {
	return fmt.Sprintf("[GET /servers/{server_id}/actions][%d] getServersServerIdActionsNotFound  %+v", 404, o.Payload)
}

func (o *GetServersServerIDActionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServersServerIDActionsDefault creates a GetServersServerIDActionsDefault with default headers values
func NewGetServersServerIDActionsDefault(code int) *GetServersServerIDActionsDefault {
	return &GetServersServerIDActionsDefault{
		_statusCode: code,
	}
}

/*GetServersServerIDActionsDefault handles this case with default header values.

unexpectederror
*/
type GetServersServerIDActionsDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the get servers server ID actions default response
func (o *GetServersServerIDActionsDefault) Code() int {
	return o._statusCode
}

func (o *GetServersServerIDActionsDefault) Error() string {
	return fmt.Sprintf("[GET /servers/{server_id}/actions][%d] GetServersServerIDActions default  %+v", o._statusCode, o.Payload)
}

func (o *GetServersServerIDActionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
