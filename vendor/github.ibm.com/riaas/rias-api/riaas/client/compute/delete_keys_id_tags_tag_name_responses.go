// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/riaas/rias-api/riaas/models"
)

// DeleteKeysIDTagsTagNameReader is a Reader for the DeleteKeysIDTagsTagName structure.
type DeleteKeysIDTagsTagNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteKeysIDTagsTagNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteKeysIDTagsTagNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewDeleteKeysIDTagsTagNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteKeysIDTagsTagNameDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewDeleteKeysIDTagsTagNameNoContent creates a DeleteKeysIDTagsTagNameNoContent with default headers values
func NewDeleteKeysIDTagsTagNameNoContent() *DeleteKeysIDTagsTagNameNoContent {
	return &DeleteKeysIDTagsTagNameNoContent{}
}

/*DeleteKeysIDTagsTagNameNoContent handles this case with default header values.

error
*/
type DeleteKeysIDTagsTagNameNoContent struct {
	Payload *models.Riaaserror
}

func (o *DeleteKeysIDTagsTagNameNoContent) Error() string {
	return fmt.Sprintf("[DELETE /keys/{id}/tags/{tag_name}][%d] deleteKeysIdTagsTagNameNoContent  %+v", 204, o.Payload)
}

func (o *DeleteKeysIDTagsTagNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteKeysIDTagsTagNameNotFound creates a DeleteKeysIDTagsTagNameNotFound with default headers values
func NewDeleteKeysIDTagsTagNameNotFound() *DeleteKeysIDTagsTagNameNotFound {
	return &DeleteKeysIDTagsTagNameNotFound{}
}

/*DeleteKeysIDTagsTagNameNotFound handles this case with default header values.

error
*/
type DeleteKeysIDTagsTagNameNotFound struct {
	Payload *models.Riaaserror
}

func (o *DeleteKeysIDTagsTagNameNotFound) Error() string {
	return fmt.Sprintf("[DELETE /keys/{id}/tags/{tag_name}][%d] deleteKeysIdTagsTagNameNotFound  %+v", 404, o.Payload)
}

func (o *DeleteKeysIDTagsTagNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteKeysIDTagsTagNameDefault creates a DeleteKeysIDTagsTagNameDefault with default headers values
func NewDeleteKeysIDTagsTagNameDefault(code int) *DeleteKeysIDTagsTagNameDefault {
	return &DeleteKeysIDTagsTagNameDefault{
		_statusCode: code,
	}
}

/*DeleteKeysIDTagsTagNameDefault handles this case with default header values.

unexpectederror
*/
type DeleteKeysIDTagsTagNameDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the delete keys ID tags tag name default response
func (o *DeleteKeysIDTagsTagNameDefault) Code() int {
	return o._statusCode
}

func (o *DeleteKeysIDTagsTagNameDefault) Error() string {
	return fmt.Sprintf("[DELETE /keys/{id}/tags/{tag_name}][%d] DeleteKeysIDTagsTagName default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteKeysIDTagsTagNameDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
