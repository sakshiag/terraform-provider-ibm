// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/riaas/rias-api/riaas/models"
)

// PatchInstancesInstanceIDNetworkInterfacesIDReader is a Reader for the PatchInstancesInstanceIDNetworkInterfacesID structure.
type PatchInstancesInstanceIDNetworkInterfacesIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchInstancesInstanceIDNetworkInterfacesIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPatchInstancesInstanceIDNetworkInterfacesIDCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchInstancesInstanceIDNetworkInterfacesIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchInstancesInstanceIDNetworkInterfacesIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchInstancesInstanceIDNetworkInterfacesIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewPatchInstancesInstanceIDNetworkInterfacesIDCreated creates a PatchInstancesInstanceIDNetworkInterfacesIDCreated with default headers values
func NewPatchInstancesInstanceIDNetworkInterfacesIDCreated() *PatchInstancesInstanceIDNetworkInterfacesIDCreated {
	return &PatchInstancesInstanceIDNetworkInterfacesIDCreated{}
}

/*PatchInstancesInstanceIDNetworkInterfacesIDCreated handles this case with default header values.

dummy
*/
type PatchInstancesInstanceIDNetworkInterfacesIDCreated struct {
	Payload *models.InstanceNetworkInterface
}

func (o *PatchInstancesInstanceIDNetworkInterfacesIDCreated) Error() string {
	return fmt.Sprintf("[PATCH /instances/{instance_id}/network_interfaces/{id}][%d] patchInstancesInstanceIdNetworkInterfacesIdCreated  %+v", 201, o.Payload)
}

func (o *PatchInstancesInstanceIDNetworkInterfacesIDCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InstanceNetworkInterface)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchInstancesInstanceIDNetworkInterfacesIDBadRequest creates a PatchInstancesInstanceIDNetworkInterfacesIDBadRequest with default headers values
func NewPatchInstancesInstanceIDNetworkInterfacesIDBadRequest() *PatchInstancesInstanceIDNetworkInterfacesIDBadRequest {
	return &PatchInstancesInstanceIDNetworkInterfacesIDBadRequest{}
}

/*PatchInstancesInstanceIDNetworkInterfacesIDBadRequest handles this case with default header values.

error
*/
type PatchInstancesInstanceIDNetworkInterfacesIDBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PatchInstancesInstanceIDNetworkInterfacesIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /instances/{instance_id}/network_interfaces/{id}][%d] patchInstancesInstanceIdNetworkInterfacesIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchInstancesInstanceIDNetworkInterfacesIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchInstancesInstanceIDNetworkInterfacesIDNotFound creates a PatchInstancesInstanceIDNetworkInterfacesIDNotFound with default headers values
func NewPatchInstancesInstanceIDNetworkInterfacesIDNotFound() *PatchInstancesInstanceIDNetworkInterfacesIDNotFound {
	return &PatchInstancesInstanceIDNetworkInterfacesIDNotFound{}
}

/*PatchInstancesInstanceIDNetworkInterfacesIDNotFound handles this case with default header values.

error
*/
type PatchInstancesInstanceIDNetworkInterfacesIDNotFound struct {
	Payload *models.Riaaserror
}

func (o *PatchInstancesInstanceIDNetworkInterfacesIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /instances/{instance_id}/network_interfaces/{id}][%d] patchInstancesInstanceIdNetworkInterfacesIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchInstancesInstanceIDNetworkInterfacesIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchInstancesInstanceIDNetworkInterfacesIDDefault creates a PatchInstancesInstanceIDNetworkInterfacesIDDefault with default headers values
func NewPatchInstancesInstanceIDNetworkInterfacesIDDefault(code int) *PatchInstancesInstanceIDNetworkInterfacesIDDefault {
	return &PatchInstancesInstanceIDNetworkInterfacesIDDefault{
		_statusCode: code,
	}
}

/*PatchInstancesInstanceIDNetworkInterfacesIDDefault handles this case with default header values.

unexpectederror
*/
type PatchInstancesInstanceIDNetworkInterfacesIDDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the patch instances instance ID network interfaces ID default response
func (o *PatchInstancesInstanceIDNetworkInterfacesIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchInstancesInstanceIDNetworkInterfacesIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /instances/{instance_id}/network_interfaces/{id}][%d] PatchInstancesInstanceIDNetworkInterfacesID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchInstancesInstanceIDNetworkInterfacesIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
