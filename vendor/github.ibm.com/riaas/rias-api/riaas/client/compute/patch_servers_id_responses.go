// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.ibm.com/riaas/rias-api/riaas/models"
)

// PatchServersIDReader is a Reader for the PatchServersID structure.
type PatchServersIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchServersIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchServersIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchServersIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchServersIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchServersIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewPatchServersIDOK creates a PatchServersIDOK with default headers values
func NewPatchServersIDOK() *PatchServersIDOK {
	return &PatchServersIDOK{}
}

/*PatchServersIDOK handles this case with default header values.

dummy
*/
type PatchServersIDOK struct {
	Payload *models.Server
}

func (o *PatchServersIDOK) Error() string {
	return fmt.Sprintf("[PATCH /servers/{id}][%d] patchServersIdOK  %+v", 200, o.Payload)
}

func (o *PatchServersIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Server)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchServersIDBadRequest creates a PatchServersIDBadRequest with default headers values
func NewPatchServersIDBadRequest() *PatchServersIDBadRequest {
	return &PatchServersIDBadRequest{}
}

/*PatchServersIDBadRequest handles this case with default header values.

error
*/
type PatchServersIDBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PatchServersIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /servers/{id}][%d] patchServersIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchServersIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchServersIDNotFound creates a PatchServersIDNotFound with default headers values
func NewPatchServersIDNotFound() *PatchServersIDNotFound {
	return &PatchServersIDNotFound{}
}

/*PatchServersIDNotFound handles this case with default header values.

error
*/
type PatchServersIDNotFound struct {
	Payload *models.Riaaserror
}

func (o *PatchServersIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /servers/{id}][%d] patchServersIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchServersIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchServersIDDefault creates a PatchServersIDDefault with default headers values
func NewPatchServersIDDefault(code int) *PatchServersIDDefault {
	return &PatchServersIDDefault{
		_statusCode: code,
	}
}

/*PatchServersIDDefault handles this case with default header values.

unexpectederror
*/
type PatchServersIDDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the patch servers ID default response
func (o *PatchServersIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchServersIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /servers/{id}][%d] PatchServersID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchServersIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
