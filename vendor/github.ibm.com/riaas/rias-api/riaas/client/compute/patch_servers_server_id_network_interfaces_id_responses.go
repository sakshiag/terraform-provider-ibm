// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.ibm.com/riaas/rias-api/riaas/models"
)

// PatchServersServerIDNetworkInterfacesIDReader is a Reader for the PatchServersServerIDNetworkInterfacesID structure.
type PatchServersServerIDNetworkInterfacesIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchServersServerIDNetworkInterfacesIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPatchServersServerIDNetworkInterfacesIDCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchServersServerIDNetworkInterfacesIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchServersServerIDNetworkInterfacesIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchServersServerIDNetworkInterfacesIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewPatchServersServerIDNetworkInterfacesIDCreated creates a PatchServersServerIDNetworkInterfacesIDCreated with default headers values
func NewPatchServersServerIDNetworkInterfacesIDCreated() *PatchServersServerIDNetworkInterfacesIDCreated {
	return &PatchServersServerIDNetworkInterfacesIDCreated{}
}

/*PatchServersServerIDNetworkInterfacesIDCreated handles this case with default header values.

dummy
*/
type PatchServersServerIDNetworkInterfacesIDCreated struct {
	Payload *models.ServerNetworkInterface
}

func (o *PatchServersServerIDNetworkInterfacesIDCreated) Error() string {
	return fmt.Sprintf("[PATCH /servers/{server_id}/network_interfaces/{id}][%d] patchServersServerIdNetworkInterfacesIdCreated  %+v", 201, o.Payload)
}

func (o *PatchServersServerIDNetworkInterfacesIDCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServerNetworkInterface)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchServersServerIDNetworkInterfacesIDBadRequest creates a PatchServersServerIDNetworkInterfacesIDBadRequest with default headers values
func NewPatchServersServerIDNetworkInterfacesIDBadRequest() *PatchServersServerIDNetworkInterfacesIDBadRequest {
	return &PatchServersServerIDNetworkInterfacesIDBadRequest{}
}

/*PatchServersServerIDNetworkInterfacesIDBadRequest handles this case with default header values.

error
*/
type PatchServersServerIDNetworkInterfacesIDBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PatchServersServerIDNetworkInterfacesIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /servers/{server_id}/network_interfaces/{id}][%d] patchServersServerIdNetworkInterfacesIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchServersServerIDNetworkInterfacesIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchServersServerIDNetworkInterfacesIDNotFound creates a PatchServersServerIDNetworkInterfacesIDNotFound with default headers values
func NewPatchServersServerIDNetworkInterfacesIDNotFound() *PatchServersServerIDNetworkInterfacesIDNotFound {
	return &PatchServersServerIDNetworkInterfacesIDNotFound{}
}

/*PatchServersServerIDNetworkInterfacesIDNotFound handles this case with default header values.

error
*/
type PatchServersServerIDNetworkInterfacesIDNotFound struct {
	Payload *models.Riaaserror
}

func (o *PatchServersServerIDNetworkInterfacesIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /servers/{server_id}/network_interfaces/{id}][%d] patchServersServerIdNetworkInterfacesIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchServersServerIDNetworkInterfacesIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchServersServerIDNetworkInterfacesIDDefault creates a PatchServersServerIDNetworkInterfacesIDDefault with default headers values
func NewPatchServersServerIDNetworkInterfacesIDDefault(code int) *PatchServersServerIDNetworkInterfacesIDDefault {
	return &PatchServersServerIDNetworkInterfacesIDDefault{
		_statusCode: code,
	}
}

/*PatchServersServerIDNetworkInterfacesIDDefault handles this case with default header values.

unexpectederror
*/
type PatchServersServerIDNetworkInterfacesIDDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the patch servers server ID network interfaces ID default response
func (o *PatchServersServerIDNetworkInterfacesIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchServersServerIDNetworkInterfacesIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /servers/{server_id}/network_interfaces/{id}][%d] PatchServersServerIDNetworkInterfacesID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchServersServerIDNetworkInterfacesIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
