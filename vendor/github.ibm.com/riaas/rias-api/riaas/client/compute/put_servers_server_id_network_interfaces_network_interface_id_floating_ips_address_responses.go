// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.ibm.com/riaas/rias-api/riaas/models"
)

// PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressReader is a Reader for the PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddress structure.
type PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewPutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressCreated creates a PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressCreated with default headers values
func NewPutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressCreated() *PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressCreated {
	return &PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressCreated{}
}

/*PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressCreated handles this case with default header values.

The floating IP was successfully associated with the network interface.
*/
type PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressCreated struct {
	Payload *models.FloatingIP
}

func (o *PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressCreated) Error() string {
	return fmt.Sprintf("[PUT /servers/{server_id}/network_interfaces/{network_interface_id}/floating_ips/{address}][%d] putServersServerIdNetworkInterfacesNetworkInterfaceIdFloatingIpsAddressCreated  %+v", 201, o.Payload)
}

func (o *PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FloatingIP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest creates a PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest with default headers values
func NewPutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest() *PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest {
	return &PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest{}
}

/*PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest handles this case with default header values.

The specified floating IP could not be associated with the specified network interface.
*/
type PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest) Error() string {
	return fmt.Sprintf("[PUT /servers/{server_id}/network_interfaces/{network_interface_id}/floating_ips/{address}][%d] putServersServerIdNetworkInterfacesNetworkInterfaceIdFloatingIpsAddressBadRequest  %+v", 400, o.Payload)
}

func (o *PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault creates a PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault with default headers values
func NewPutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault(code int) *PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault {
	return &PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault{
		_statusCode: code,
	}
}

/*PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault handles this case with default header values.

unexpectederror
*/
type PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the put servers server ID network interfaces network interface ID floating ips address default response
func (o *PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault) Code() int {
	return o._statusCode
}

func (o *PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault) Error() string {
	return fmt.Sprintf("[PUT /servers/{server_id}/network_interfaces/{network_interface_id}/floating_ips/{address}][%d] PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddress default  %+v", o._statusCode, o.Payload)
}

func (o *PutServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
