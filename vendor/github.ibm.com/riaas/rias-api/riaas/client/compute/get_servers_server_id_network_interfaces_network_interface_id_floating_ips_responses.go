// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.ibm.com/riaas/rias-api/riaas/models"
)

// GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsReader is a Reader for the GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIps structure.
type GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewGetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK creates a GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK with default headers values
func NewGetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK() *GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK {
	return &GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK{}
}

/*GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK handles this case with default header values.

The associated floating IPs were retrieved successfully.
*/
type GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK struct {
	Payload *models.GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOKBody
}

func (o *GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK) Error() string {
	return fmt.Sprintf("[GET /servers/{server_id}/network_interfaces/{network_interface_id}/floating_ips][%d] getServersServerIdNetworkInterfacesNetworkInterfaceIdFloatingIpsOK  %+v", 200, o.Payload)
}

func (o *GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound creates a GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound with default headers values
func NewGetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound() *GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound {
	return &GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound{}
}

/*GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound handles this case with default header values.

A network interface with the specified identifier could not be found.
*/
type GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound struct {
	Payload *models.Riaaserror
}

func (o *GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound) Error() string {
	return fmt.Sprintf("[GET /servers/{server_id}/network_interfaces/{network_interface_id}/floating_ips][%d] getServersServerIdNetworkInterfacesNetworkInterfaceIdFloatingIpsNotFound  %+v", 404, o.Payload)
}

func (o *GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault creates a GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault with default headers values
func NewGetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault(code int) *GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault {
	return &GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault{
		_statusCode: code,
	}
}

/*GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault handles this case with default header values.

unexpectederror
*/
type GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the get servers server ID network interfaces network interface ID floating ips default response
func (o *GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault) Code() int {
	return o._statusCode
}

func (o *GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault) Error() string {
	return fmt.Sprintf("[GET /servers/{server_id}/network_interfaces/{network_interface_id}/floating_ips][%d] GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIps default  %+v", o._statusCode, o.Payload)
}

func (o *GetServersServerIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
