// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.ibm.com/riaas/rias-api/riaas/models"
)

// PatchServersServerIDVolumeAttachmentsIDReader is a Reader for the PatchServersServerIDVolumeAttachmentsID structure.
type PatchServersServerIDVolumeAttachmentsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchServersServerIDVolumeAttachmentsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPatchServersServerIDVolumeAttachmentsIDCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchServersServerIDVolumeAttachmentsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchServersServerIDVolumeAttachmentsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchServersServerIDVolumeAttachmentsIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewPatchServersServerIDVolumeAttachmentsIDCreated creates a PatchServersServerIDVolumeAttachmentsIDCreated with default headers values
func NewPatchServersServerIDVolumeAttachmentsIDCreated() *PatchServersServerIDVolumeAttachmentsIDCreated {
	return &PatchServersServerIDVolumeAttachmentsIDCreated{}
}

/*PatchServersServerIDVolumeAttachmentsIDCreated handles this case with default header values.

dummy
*/
type PatchServersServerIDVolumeAttachmentsIDCreated struct {
	Payload *models.ServerVolumeAttachment
}

func (o *PatchServersServerIDVolumeAttachmentsIDCreated) Error() string {
	return fmt.Sprintf("[PATCH /servers/{server_id}/volume_attachments/{id}][%d] patchServersServerIdVolumeAttachmentsIdCreated  %+v", 201, o.Payload)
}

func (o *PatchServersServerIDVolumeAttachmentsIDCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServerVolumeAttachment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchServersServerIDVolumeAttachmentsIDBadRequest creates a PatchServersServerIDVolumeAttachmentsIDBadRequest with default headers values
func NewPatchServersServerIDVolumeAttachmentsIDBadRequest() *PatchServersServerIDVolumeAttachmentsIDBadRequest {
	return &PatchServersServerIDVolumeAttachmentsIDBadRequest{}
}

/*PatchServersServerIDVolumeAttachmentsIDBadRequest handles this case with default header values.

error
*/
type PatchServersServerIDVolumeAttachmentsIDBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PatchServersServerIDVolumeAttachmentsIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /servers/{server_id}/volume_attachments/{id}][%d] patchServersServerIdVolumeAttachmentsIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchServersServerIDVolumeAttachmentsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchServersServerIDVolumeAttachmentsIDNotFound creates a PatchServersServerIDVolumeAttachmentsIDNotFound with default headers values
func NewPatchServersServerIDVolumeAttachmentsIDNotFound() *PatchServersServerIDVolumeAttachmentsIDNotFound {
	return &PatchServersServerIDVolumeAttachmentsIDNotFound{}
}

/*PatchServersServerIDVolumeAttachmentsIDNotFound handles this case with default header values.

error
*/
type PatchServersServerIDVolumeAttachmentsIDNotFound struct {
	Payload *models.Riaaserror
}

func (o *PatchServersServerIDVolumeAttachmentsIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /servers/{server_id}/volume_attachments/{id}][%d] patchServersServerIdVolumeAttachmentsIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchServersServerIDVolumeAttachmentsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchServersServerIDVolumeAttachmentsIDDefault creates a PatchServersServerIDVolumeAttachmentsIDDefault with default headers values
func NewPatchServersServerIDVolumeAttachmentsIDDefault(code int) *PatchServersServerIDVolumeAttachmentsIDDefault {
	return &PatchServersServerIDVolumeAttachmentsIDDefault{
		_statusCode: code,
	}
}

/*PatchServersServerIDVolumeAttachmentsIDDefault handles this case with default header values.

unexpectederror
*/
type PatchServersServerIDVolumeAttachmentsIDDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the patch servers server ID volume attachments ID default response
func (o *PatchServersServerIDVolumeAttachmentsIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchServersServerIDVolumeAttachmentsIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /servers/{server_id}/volume_attachments/{id}][%d] PatchServersServerIDVolumeAttachmentsID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchServersServerIDVolumeAttachmentsIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
