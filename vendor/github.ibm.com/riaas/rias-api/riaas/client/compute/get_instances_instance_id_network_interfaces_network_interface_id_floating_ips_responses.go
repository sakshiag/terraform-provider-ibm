// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/riaas/rias-api/riaas/models"
)

// GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsReader is a Reader for the GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIps structure.
type GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK creates a GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK with default headers values
func NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK() *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK {
	return &GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK{}
}

/*GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK handles this case with default header values.

The associated floating IPs were retrieved successfully.
*/
type GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK struct {
	Payload *models.GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOKBody
}

func (o *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK) Error() string {
	return fmt.Sprintf("[GET /instances/{instance_id}/network_interfaces/{network_interface_id}/floating_ips][%d] getInstancesInstanceIdNetworkInterfacesNetworkInterfaceIdFloatingIpsOK  %+v", 200, o.Payload)
}

func (o *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound creates a GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound with default headers values
func NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound() *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound {
	return &GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound{}
}

/*GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound handles this case with default header values.

A network interface with the specified identifier could not be found.
*/
type GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound struct {
	Payload *models.Riaaserror
}

func (o *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound) Error() string {
	return fmt.Sprintf("[GET /instances/{instance_id}/network_interfaces/{network_interface_id}/floating_ips][%d] getInstancesInstanceIdNetworkInterfacesNetworkInterfaceIdFloatingIpsNotFound  %+v", 404, o.Payload)
}

func (o *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault creates a GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault with default headers values
func NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault(code int) *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault {
	return &GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault{
		_statusCode: code,
	}
}

/*GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault handles this case with default header values.

unexpectederror
*/
type GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the get instances instance ID network interfaces network interface ID floating ips default response
func (o *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault) Code() int {
	return o._statusCode
}

func (o *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault) Error() string {
	return fmt.Sprintf("[GET /instances/{instance_id}/network_interfaces/{network_interface_id}/floating_ips][%d] GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIps default  %+v", o._statusCode, o.Payload)
}

func (o *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
