// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.ibm.com/riaas/rias-api/riaas/models"
)

// PutVolumesVolumeIDSnapshotsIDTagsTagNameReader is a Reader for the PutVolumesVolumeIDSnapshotsIDTagsTagName structure.
type PutVolumesVolumeIDSnapshotsIDTagsTagNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutVolumesVolumeIDSnapshotsIDTagsTagNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPutVolumesVolumeIDSnapshotsIDTagsTagNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutVolumesVolumeIDSnapshotsIDTagsTagNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutVolumesVolumeIDSnapshotsIDTagsTagNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutVolumesVolumeIDSnapshotsIDTagsTagNameDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewPutVolumesVolumeIDSnapshotsIDTagsTagNameNoContent creates a PutVolumesVolumeIDSnapshotsIDTagsTagNameNoContent with default headers values
func NewPutVolumesVolumeIDSnapshotsIDTagsTagNameNoContent() *PutVolumesVolumeIDSnapshotsIDTagsTagNameNoContent {
	return &PutVolumesVolumeIDSnapshotsIDTagsTagNameNoContent{}
}

/*PutVolumesVolumeIDSnapshotsIDTagsTagNameNoContent handles this case with default header values.

error
*/
type PutVolumesVolumeIDSnapshotsIDTagsTagNameNoContent struct {
	Payload *models.Riaaserror
}

func (o *PutVolumesVolumeIDSnapshotsIDTagsTagNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /volumes/{volume_id}/snapshots/{id}/tags/{tag_name}][%d] putVolumesVolumeIdSnapshotsIdTagsTagNameNoContent  %+v", 204, o.Payload)
}

func (o *PutVolumesVolumeIDSnapshotsIDTagsTagNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVolumesVolumeIDSnapshotsIDTagsTagNameBadRequest creates a PutVolumesVolumeIDSnapshotsIDTagsTagNameBadRequest with default headers values
func NewPutVolumesVolumeIDSnapshotsIDTagsTagNameBadRequest() *PutVolumesVolumeIDSnapshotsIDTagsTagNameBadRequest {
	return &PutVolumesVolumeIDSnapshotsIDTagsTagNameBadRequest{}
}

/*PutVolumesVolumeIDSnapshotsIDTagsTagNameBadRequest handles this case with default header values.

error
*/
type PutVolumesVolumeIDSnapshotsIDTagsTagNameBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PutVolumesVolumeIDSnapshotsIDTagsTagNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /volumes/{volume_id}/snapshots/{id}/tags/{tag_name}][%d] putVolumesVolumeIdSnapshotsIdTagsTagNameBadRequest  %+v", 400, o.Payload)
}

func (o *PutVolumesVolumeIDSnapshotsIDTagsTagNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVolumesVolumeIDSnapshotsIDTagsTagNameNotFound creates a PutVolumesVolumeIDSnapshotsIDTagsTagNameNotFound with default headers values
func NewPutVolumesVolumeIDSnapshotsIDTagsTagNameNotFound() *PutVolumesVolumeIDSnapshotsIDTagsTagNameNotFound {
	return &PutVolumesVolumeIDSnapshotsIDTagsTagNameNotFound{}
}

/*PutVolumesVolumeIDSnapshotsIDTagsTagNameNotFound handles this case with default header values.

error
*/
type PutVolumesVolumeIDSnapshotsIDTagsTagNameNotFound struct {
	Payload *models.Riaaserror
}

func (o *PutVolumesVolumeIDSnapshotsIDTagsTagNameNotFound) Error() string {
	return fmt.Sprintf("[PUT /volumes/{volume_id}/snapshots/{id}/tags/{tag_name}][%d] putVolumesVolumeIdSnapshotsIdTagsTagNameNotFound  %+v", 404, o.Payload)
}

func (o *PutVolumesVolumeIDSnapshotsIDTagsTagNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVolumesVolumeIDSnapshotsIDTagsTagNameDefault creates a PutVolumesVolumeIDSnapshotsIDTagsTagNameDefault with default headers values
func NewPutVolumesVolumeIDSnapshotsIDTagsTagNameDefault(code int) *PutVolumesVolumeIDSnapshotsIDTagsTagNameDefault {
	return &PutVolumesVolumeIDSnapshotsIDTagsTagNameDefault{
		_statusCode: code,
	}
}

/*PutVolumesVolumeIDSnapshotsIDTagsTagNameDefault handles this case with default header values.

unexpectederror
*/
type PutVolumesVolumeIDSnapshotsIDTagsTagNameDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the put volumes volume ID snapshots ID tags tag name default response
func (o *PutVolumesVolumeIDSnapshotsIDTagsTagNameDefault) Code() int {
	return o._statusCode
}

func (o *PutVolumesVolumeIDSnapshotsIDTagsTagNameDefault) Error() string {
	return fmt.Sprintf("[PUT /volumes/{volume_id}/snapshots/{id}/tags/{tag_name}][%d] PutVolumesVolumeIDSnapshotsIDTagsTagName default  %+v", o._statusCode, o.Payload)
}

func (o *PutVolumesVolumeIDSnapshotsIDTagsTagNameDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
