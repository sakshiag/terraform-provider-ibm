// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.ibm.com/riaas/rias-api/riaas/models"
)

// GetVolumesVolumeIDSnapshotsIDReader is a Reader for the GetVolumesVolumeIDSnapshotsID structure.
type GetVolumesVolumeIDSnapshotsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVolumesVolumeIDSnapshotsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetVolumesVolumeIDSnapshotsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetVolumesVolumeIDSnapshotsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetVolumesVolumeIDSnapshotsIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		
		return nil, result
	}
}

// NewGetVolumesVolumeIDSnapshotsIDOK creates a GetVolumesVolumeIDSnapshotsIDOK with default headers values
func NewGetVolumesVolumeIDSnapshotsIDOK() *GetVolumesVolumeIDSnapshotsIDOK {
	return &GetVolumesVolumeIDSnapshotsIDOK{}
}

/*GetVolumesVolumeIDSnapshotsIDOK handles this case with default header values.

dummy
*/
type GetVolumesVolumeIDSnapshotsIDOK struct {
	Payload *models.VolumeSnapshot
}

func (o *GetVolumesVolumeIDSnapshotsIDOK) Error() string {
	return fmt.Sprintf("[GET /volumes/{volume_id}/snapshots/{id}][%d] getVolumesVolumeIdSnapshotsIdOK  %+v", 200, o.Payload)
}

func (o *GetVolumesVolumeIDSnapshotsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VolumeSnapshot)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVolumesVolumeIDSnapshotsIDNotFound creates a GetVolumesVolumeIDSnapshotsIDNotFound with default headers values
func NewGetVolumesVolumeIDSnapshotsIDNotFound() *GetVolumesVolumeIDSnapshotsIDNotFound {
	return &GetVolumesVolumeIDSnapshotsIDNotFound{}
}

/*GetVolumesVolumeIDSnapshotsIDNotFound handles this case with default header values.

error
*/
type GetVolumesVolumeIDSnapshotsIDNotFound struct {
	Payload *models.Riaaserror
}

func (o *GetVolumesVolumeIDSnapshotsIDNotFound) Error() string {
	return fmt.Sprintf("[GET /volumes/{volume_id}/snapshots/{id}][%d] getVolumesVolumeIdSnapshotsIdNotFound  %+v", 404, o.Payload)
}

func (o *GetVolumesVolumeIDSnapshotsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVolumesVolumeIDSnapshotsIDDefault creates a GetVolumesVolumeIDSnapshotsIDDefault with default headers values
func NewGetVolumesVolumeIDSnapshotsIDDefault(code int) *GetVolumesVolumeIDSnapshotsIDDefault {
	return &GetVolumesVolumeIDSnapshotsIDDefault{
		_statusCode: code,
	}
}

/*GetVolumesVolumeIDSnapshotsIDDefault handles this case with default header values.

unexpectederror
*/
type GetVolumesVolumeIDSnapshotsIDDefault struct {
	_statusCode int

	Payload *models.Riaaserror
}

// Code gets the status code for the get volumes volume ID snapshots ID default response
func (o *GetVolumesVolumeIDSnapshotsIDDefault) Code() int {
	return o._statusCode
}

func (o *GetVolumesVolumeIDSnapshotsIDDefault) Error() string {
	return fmt.Sprintf("[GET /volumes/{volume_id}/snapshots/{id}][%d] GetVolumesVolumeIDSnapshotsID default  %+v", o._statusCode, o.Payload)
}

func (o *GetVolumesVolumeIDSnapshotsIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
