// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteVolumesID deletes specified volume

This request deletes a volume. This operation cannot be reversed. In order for this request to succeed, the volume must not be attached to any servers.
*/
func (a *Client) DeleteVolumesID(params *DeleteVolumesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVolumesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVolumesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVolumesID",
		Method:             "DELETE",
		PathPattern:        "/volumes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVolumesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVolumesIDNoContent), nil

}

/*
GetVolumes retrieves all volumes

This request retrieves all volumes in the region. Volumes are network-connected block storage devices which may be attached to one or more servers in the same region.
*/
func (a *Client) GetVolumes(params *GetVolumesParams, authInfo runtime.ClientAuthInfoWriter) (*GetVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolumes",
		Method:             "GET",
		PathPattern:        "/volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVolumesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVolumesOK), nil

}

/*
GetVolumesID retrieves specified volume

This request retrieves a single volume specified by the identifier in the URL.
*/
func (a *Client) GetVolumesID(params *GetVolumesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetVolumesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolumesID",
		Method:             "GET",
		PathPattern:        "/volumes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVolumesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVolumesIDOK), nil

}

/*
PatchVolumesID updates specified volume

This request updates a volume with the information in a provided volume patch. The volume patch object is structured in the same way as a retrieved volume and can contain an updated name, IOPS rate, or (increased) capacity for the volume.
*/
func (a *Client) PatchVolumesID(params *PatchVolumesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchVolumesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchVolumesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchVolumesID",
		Method:             "PATCH",
		PathPattern:        "/volumes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchVolumesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchVolumesIDOK), nil

}

/*
PostVolumes creates a volume

This request creates a new volume from a volume template. The volume template object is structured in the same way as a retrieved volume, and contains the information necessary to create the new volume.
*/
func (a *Client) PostVolumes(params *PostVolumesParams, authInfo runtime.ClientAuthInfoWriter) (*PostVolumesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVolumesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVolumes",
		Method:             "POST",
		PathPattern:        "/volumes",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVolumesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVolumesCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
