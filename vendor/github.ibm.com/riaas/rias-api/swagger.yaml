basePath: /v1
definitions:
  NameReference:
    description: The name identity of the resource
    properties:
      name: {description: The name for this zone, example: us-south-1, format: name,
        pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
    title: NameIdentity
    type: object
  Next:
    description: A reference to the next page of resources; this reference is included
      for all pages except the last page
    properties:
      href: {description: The URL for the next page of resources, example: 'http://iaas.bluemix.net/v1/flavors?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
    type: object
  SecurityGroupRuleTemplate:
    description: When 'protocol' is either of 'tcp' or 'udp', then the rule may also
      contain fields to specify a port range.
    example:
      direction: ingress
      ip_version: ipv4
      port_max: 22
      port_min: 22
      protocol: tcp
      remote: {cidr: 192.168.0.0/24}
    properties:
      code: {description: 'The ICMP code to to allow. Valid values from 0 to 255.
          If missing, allow all codes.', example: 0, type: integer, x-nullable: true}
      direction:
        description: The direction of traffic to enforce (ingress, egress)
        enum: [ingress, egress]
        example: ingress
        type: string
      ip_version:
        description: The IP version to enforce (ipv4, ipv6). The format of 'remote.address'
          or 'remote.cidr_block' must match this field, if they are used. Also, if
          'remote' references another security group (ie. using remote.id, remote.name,
          remote.crn) then this rule will only apply to IP addresses (network interfaces)
          in that group which match this ip_version.
        enum: [ipv4, ipv6]
        example: ipv4
        type: string
      port_max: {description: 'The highest port in the range of ports to be matched;
          if unspecified, `65535` is used.', example: 65535, type: integer, x-nullable: true}
      port_min: {description: 'The lowest port in the range of ports to be matched;
          if unspecified, `1` is used.', example: 49152, type: integer, x-nullable: true}
      protocol:
        default: all
        description: The protocol to enforce. Must be one of (icmp, tcp, udp, all).
          Defaults to 'all' if omitted.
        enum: [all, icmp, tcp, udp]
        example: tcp
        type: string
      remote:
        description: Uniquely identifies a security group using any one of ID, CRN,
          or name.
        properties:
          address: {description: A single IPv4 or IPv6 address., example: 10.0.1.12,
            type: string}
          cidr_block: {description: 'A range of IPv4 or IPv6 addresses, in CIDR format.',
            example: 10.0.0.0/24, type: string}
          crn: {description: The security group's CRN, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271',
            format: crn, type: string}
          href: {description: The URL for the first page of resources, example: 'http://iaas.bluemix.net/v1/servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces?limit=20',
            format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
            type: string}
          id: {description: The security group's unique identifier., example: be5df5ca-12a0-494b-907e-aa6ec2bfa271,
            format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
            type: string}
        title: SecurityGroupIdentityByName
        type: object
      type: {description: 'The ICMP type to allow. Valid values from 0 to 255. If
          missing, allow all types.', example: 8, type: integer, x-nullable: true}
    title: SecurityGroupRuleTemplate
  address_pool_prefix:
    description: an address prefix in a vpc
    properties:
      cidr: {description: The CIDR block for this prefix., example: 10.0.0.0/24, type: string}
      created_at: {description: The date and time that the prefix was created, format: date-time,
        type: string}
      has_subnets: {description: Indicates whether subnets exist with addresses from
          this prefix., type: boolean}
      href: {description: The URL for this prefix, example: 'https://iaas.bluemix.net/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this prefix, example: be5df5ca-12a0-494b-907e-aa6ec2bfa271,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      name: {description: 'The user-defined name for this prefix. By default the base
          IP address will be the name. For example, for 10.0.0.0/24 the name will
          be 10.0.0.0.', format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      zone:
        description: The zone the floating IP resides in
        properties:
          href: {description: The URL for this zone, example: 'http://iaas.bluemix.net/v1/regions/us-south/zones/us-south-1',
            format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
            type: string}
          name: {description: The name for this zone, example: us-south-1, format: name,
            pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
        title: ZoneReference
        type: object
    title: AddressPoolPrefix
    type: object
  flavor:
    properties:
      cpu:
        description: The CPU for this flavor
        properties:
          architecture:
            description: The CPU architecture
            enum: [amd64, powerpc]
            type: string
          cores: {description: The number of logical CPU cores per CPU, minimum: 1,
            type: integer}
          frequency: {description: The speed of the CPU in megahertz, example: 1000,
            minimum: 500, multipleOf: 500, type: integer}
        title: CPU
      crn: {description: The CRN for this flavor, example: 'crn:v1:bluemix:public::us-south-1::gt:flavor:a1.4x64',
        format: crn, type: string}
      gpu:
        description: The GPU(s) for this flavor
        properties:
          cores: {description: The number of logical GPU cores per GPU, minimum: 1,
            type: integer}
          count: {description: The number of GPUs, minimum: 1, type: integer}
          manufacturer:
            description: The manufacturer of the GPU
            enum: [nvidia]
            type: string
          memory: {description: The amount of memory in megabytes, maximum: 524288,
            minimum: 512, multipleOf: 256, type: integer}
          model:
            description: The model number of the GPU
            enum: [k40, k80]
            type: string
        title: GPU
      href: {description: The URL for this flavor, example: 'http://iaas.bluemix.net/v1/flavors/30e0bc90-2bc3-4a57-b99d-251df2cdc7a2',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      max_bandwidth: {description: The maximum network bandwidth, type: integer}
      max_iops: {description: The maximum iops, type: integer}
      max_network_interfaces: {description: The maximum number of network interfaces,
        type: integer}
      max_volumes: {description: The maximum number of volumes, type: integer}
      memory: {description: The amount of memory in megabytes, maximum: 524288, minimum: 512,
        multipleOf: 256, type: integer}
      name: {default: u1.1x2, description: The name for this flavor, example: a1.4x64,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_.]*$', type: string}
    title: Flavor
  floating_ip:
    properties:
      address: {description: The globally unique IP address, example: 203.0.113.1,
        type: string}
      created_at: {description: The date and time that the floating IP was created,
        format: date-time, type: string}
      crn: {description: The CRN for this floating IP, example: 'crn:v1:bluemix:public::us-south::gt:floating-ip:203.0.113.1',
        format: crn, type: string}
      href: {description: The URL for this floating IPs, example: 'http://iaas.bluemix.net/v1/floating_ips/203.0.113.1',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this floating ip, example: dc5431ef-1fc6-4861-adc9-a59d077d1241,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      name: {description: The user-defined name for this floating IP, example: my-floating-ip,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      resource_group: {$ref: '#/definitions/resource_reference'}
      status:
        description: The status of the floating IP
        enum: [pending, available]
        example: available
        type: string
      tags:
        description: A collection of tags for this resource
        example: [production, backend]
        items: {description: A tag for the resource, type: string}
        type: array
        x-omitempty: true
      target:
        description: The target of this floating IP
        properties:
          crn: {description: The CRN for this public gateway, example: 'crn:v1:bluemix:public::us-south::gt:public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241',
            format: crn, type: string}
          href: {description: The URL for this gateway, example: 'http://iaas.bluemix.net/v1/gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241',
            format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
            type: string}
          id: {description: The unique identifier for this public gateway, example: dc5431ef-1fc6-4861-adc9-a59d077d1241,
            format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
            type: string}
          name: {description: The user-defined name for this public gateway, example: my-gateway,
            format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
          primary_ipv4_address: {description: The primary IPv4 address, type: string}
        title: PublicGatewayReference
        type: object
      zone:
        description: The zone the floating IP resides in
        properties:
          href: {description: The URL for this zone, example: 'http://iaas.bluemix.net/v1/regions/us-south/zones/us-south-1',
            format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
            type: string}
          name: {description: The name for this zone, example: us-south-1, format: name,
            pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
        title: ZoneReference
        type: object
    title: FloatingIP
    type: object
  generation:
    default: gt
    description: The platform generation of the subnet
    enum: [gt, gc]
    example: gt
    type: string
  image:
    properties:
      architecture:
        description: The image architecture
        enum: [amd64, powerpc]
        type: string
      created_at: {description: The date and time that the image was created, format: date-time,
        type: string}
      crn: {description: The CRN for this image, example: 'crn:v1:bluemix:public:rias:us-south-1:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8',
        format: crn, type: string}
      file:
        description: The checksum and download location of the image file
        properties:
          checksum: {description: A SHA-3 checksum of the image file, example: 1e26748b7e61580b2d081a6de3645449960053138c5c70747454810e2110372b4c68492c748ced01f4df402a6787269e6891a4ab1cc4e6a62b21d91719950cf2,
            type: string}
          href: {description: The location of the image file, example: 'https://dal.objectstorage.open.softlayer.com/v1/AUTH_4abf7d7bac2c4eda89c03dd3afa7a0a3/images/ubuntu.qcow2',
            format: url, type: string}
        title: ImageFile
        type: object
      format:
        enum: [raw, qcow2, vmdk, vhdx, vdi, ova, box]
        type: string
      href: {description: The URL for this image, example: 'http://iaas.bluemix.net/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this image, example: 72b27b5c-f4b0-48bb-b954-5becc7c1dcb8,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      name: {description: The user-defined name for this image, example: my-image,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      operating_system:
        description: The operating system included in this image
        properties:
          name: {description: 'The name of the operating system, to be used for display
              purposes', example: Ubuntu Server 16 LTS, type: string}
          vendor: {description: The vendor of the operating system, example: Canonical,
            type: string}
          version: {description: The version of the operating system, example: 16.04.3,
            type: string}
        title: OperatingSystem
        type: object
      status:
        enum: [pending, available, corrupt]
        type: string
      tags:
        description: A collection of tags for this resource
        example: [production, backend]
        items: {description: A tag for the resource, type: string}
        type: array
        x-omitempty: true
      visibility:
        description: Whether the image is publicly visible or private to the account
        enum: [public, private]
        type: string
    title: Image
    type: object
  InstanceInitialization:
    properties:
      keys:
        type: "array"
        description: "Collection of keys used at initialization of instance"
        items:
          properties:
            crn: {description: The CRN for this key, example: 'crn:v1:bluemix:public:gt::a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803',
              format: crn, type: string}
            fingerprint: {description: The SHA256 fingerprint of the public
                key, example: yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY, type: string}
            id: {description: The unique identifier for this key, example: a6b1a881-2ce8-41a3-80fc-36316a73f803,
              format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
              type: string}
            name: {description: The user-defined name for this key, example: my-key,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
          title: KeyIdentityByFingerprint
          type: object
      password:
        title: "InstanceEncryptedPassword"
        type: object
        properties:
          encryption_key:
            properties:
              crn: {description: The CRN for this key, example: 'crn:v1:bluemix:public:gt::a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803',
                format: crn, type: string}
              fingerprint: {description: The SHA256 fingerprint of the public
                  key, example: yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY, type: string}
              id: {description: The unique identifier for this key, example: a6b1a881-2ce8-41a3-80fc-36316a73f803,
                format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                type: string}
              name: {description: The user-defined name for this key, example: my-key,
                format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            title: KeyIdentityByFingerprint
            type: object
          encrypted_password:
            type: "string"
            format: "byte"
            description: "The administrator password at initialization, encrypted using the first initialized SSH key"
            example: "qQ+/YEApnl1ZtEgIrfprzb065307thTkzlnLqL5ICpesdbBN03dyCQ=="
    title: initialization
    type: object
  instance:
    properties:
      boot_volume_attachment: {$ref: '#/definitions/volume_attachment_reference'}
      cpu:
        description: The CPU for this instance
        properties:
          architecture:
            description: The CPU architecture
            enum: [amd64, powerpc]
            type: string
          cores: {description: The number of logical CPU cores per CPU, minimum: 1,
            type: integer}
          frequency: {description: The speed of the CPU in megahertz, example: 1000,
            minimum: 500, multipleOf: 500, type: integer}
        title: CPU
      created_at: {description: The date and time that the instance was created, format: date-time,
        type: string}
      crn: {description: The CRN for this instance, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a',
        format: crn, type: string}
      flavor: {$ref: '#/definitions/resource_reference'}
      generation: {$ref: '#/definitions/generation'}
      gpu:
        description: The GPU(s) for this instance
        properties:
          cores: {description: The number of logical GPU cores per GPU, minimum: 1,
            type: integer}
          count: {description: The number of GPUs, minimum: 1, type: integer}
          manufacturer:
            description: The manufacturer of the GPU
            enum: [nvidia]
            type: string
          memory: {description: The amount of memory in megabytes, maximum: 524288,
            minimum: 512, multipleOf: 256, type: integer}
          model:
            description: The model number of the GPU
            enum: [k40, k80]
            type: string
        title: GPU
      href: {description: The URL for this instance, example: 'http://iaas.bluemix.net/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this instance, example: 1e09281b-f177-46fb-baf1-bc152b2e391a,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      image: {$ref: '#/definitions/resource_reference'}
      memory: {description: The amount of memory in megabytes, maximum: 524288, minimum: 512,
        multipleOf: 256, type: integer}
      name: {description: The user-defined name for this instance, example: my-instance,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      network_interfaces:
        description: Collection of the instance's network interfaces, not including
          the primary network interface
        items: {$ref: '#/definitions/network_interface_reference'}
        type: array
        x-omitempty: true
      primary_network_interface: {$ref: '#/definitions/network_interface_reference'}
      profile: {$ref: '#/definitions/resource_reference'}
      resource_group: {$ref: '#/definitions/resource_reference'}
      status:
        description: The status of the instance
        enum: [stopped, starting, running, pausing, paused, resuming, stopping, restarting]
        type: string
      tags:
        description: A collection of tags for this resource
        example: [production, backend]
        items: {description: A tag for the resource, type: string}
        type: array
        x-omitempty: true
      type:
        description: instance Type
        enum: [virtual]
        type: string
      volume_attachments:
        description: Collection of volume interfaces
        items: {$ref: '#/definitions/volume_attachment_reference'}
        type: array
        x-omitempty: true
      vpc: {$ref: '#/definitions/resource_reference'}
      zone:
        description: The zone the instance resides in
        properties:
          href: {description: The URL for this zone, example: 'http://iaas.bluemix.net/v1/regions/us-south/zones/us-south-1',
            format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
            type: string}
          name: {description: The name for this zone, example: us-south-1, format: name,
            pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
        title: ZoneReference
        type: object
    title: instance
    type: object
  instance_action:
    properties:
      completed_at: {description: The date and time that the action was completed,
        format: date-time, type: string}
      created_at: {description: The date and time that the action was created, format: date-time,
        type: string}
      href: {description: The URL for this action, example: 'http://iaas.bluemix.net/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/actions/109a1b6e-1242-4de1-be44-38705e9474ed',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The identifier for this action, example: 109a1b6e-1242-4de1-be44-38705e9474ed,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      started_at: {description: The date and time that the action was started, format: date-time,
        type: string}
      status:
        description: The current status of this action
        enum: [pending, running, failed, completed]
        type: string
      type:
        description: The type of action
        enum: [start, stop, reboot, reset]
        type: string
    title: instanceAction
    type: object
  instance_network_interface:
    properties:
      created_at: {description: The date and time that the network interface was created,
        format: date-time, type: string}
      crn: {description: The CRN for this network interface, example: 'crn:v1:staging:public:gt:us-south-1:a/123456::network-interface:10c02d81-0ecb-4dc5-897d-28392913b81e',
        format: crn, type: string}
      floating_ips:
        description: Array of references to floating IPs associated with this network
          interface
        items: {$ref: '#/definitions/resource_reference'}
        type: array
        x-omitempty: true
      href: {description: The URL for this network interface, example: 'http://iaas.bluemix.net/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this network interface, example: 10c02d81-0ecb-4dc5-897d-28392913b81e,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      name: {description: The user-defined name for this network interface, example: my-network-interface,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      port_speed: {description: The network interface port speed in Mbps, example: 10000,
        type: integer}
      primary_ipv4_address: {description: The primary IPv4 address, example: 10.0.0.5,
        type: string}
      primary_ipv6_address: {description: The primary IPv6 address in compressed notation
          as specified by RFC 5952, example: '2001:db8:85a3::8a2e:370:7334', type: string}
      resource_group: {$ref: '#/definitions/resource_reference'}
      secondary_addresses:
        description: Collection seconary IP addresses
        example: [10.0.0.6, '2001:db8:85a3::8a2e:370:7335']
        items: {description: A secondary IP address, type: string}
        type: array
        x-omitempty: true
      security_groups:
        description: Collection of security groups
        items: {$ref: '#/definitions/resource_reference'}
        type: array
        x-omitempty: true
      status:
        description: The status of the volume
        enum: [available, failed, pending]
        example: available
        type: string
      subnet: {$ref: '#/definitions/resource_reference'}
      tags:
        description: A collection of tags for this resource
        example: [production, backend]
        items: {description: A tag for the resource, type: string}
        type: array
        x-omitempty: true
      type:
        description: The type of this network interface as it relates to a instance
        enum: [primary, secondary]
        example: primary
        type: string
    title: NetworkInterface
    type: object
  instance_profile:
    properties:
      crn: {description: The CRN for this instanceprofile, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
        format: crn, type: string}
      family: {example: balanced, type: string}
      generation: {$ref: '#/definitions/generation'}
      href: {description: The URL for this instance profile, example: 'http://iaas.bluemix.net/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      name: {description: The user-defined name for this instance profile, example: my-snapshot,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
    title: instancePackage
    type: object
  instance_volume_attachment:
    properties:
      created_at: {description: The date and time that the volume was attached, format: date-time,
        type: string}
      crn: {description: The CRN for this volume, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::volume-interfacs:82cbf856-9cbb-45fb-b62f-d7bcef32399a',
        format: crn, type: string}
      href: {description: The URL for this volume interface, example: 'http://iaas.bluemix.net/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this volume interface, example: 82cbf856-9cbb-45fb-b62f-d7bcef32399a,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      name: {description: The user-defined name for this volume interface, example: my-volume-interface,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      resource_group: {$ref: '#/definitions/resource_reference'}
      status:
        enum: [attaching, attached, detaching]
        type: string
      tags:
        description: A collection of tags for this resource
        example: [production, backend]
        items: {description: A tag for the resource, type: string}
        type: array
        x-omitempty: true
      volume: {$ref: '#/definitions/resource_reference'}
    title: VolumeAttachment
    type: object
  key:
    properties:
      created_at: {description: The date and time that the key was created, format: date-time,
        type: string}
      crn: {description: The CRN for this key, example: 'crn:v1:bluemix:public:gt::a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803',
        format: crn, type: string}
      fingerprint: {description: The SHA256 fingerprint of the public key, example: yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY,
        type: string}
      href: {description: The URL for this key, example: 'http://iaas.bluemix.net/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this key, example: a6b1a881-2ce8-41a3-80fc-36316a73f803,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      length:
        default: 2048
        description: The length of this key
        enum: [2048, 4096]
        format: int32
        type: integer
      name: {description: The user-defined name for this key, example: my-key, format: name,
        pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      public_key: {description: The public SSH key, example: AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En,
        type: string}
      resource_group: {$ref: '#/definitions/resource_reference'}
      tags:
        description: A collection of tags for this resource
        example: [production, backend]
        items: {description: A tag for the resource, type: string}
        type: array
        x-omitempty: true
      type:
        default: rsa
        description: The cryptosystem used by this key
        enum: [rsa]
        type: string
    title: Key
    type: object
  network_acl:
    properties:
      created_at: {description: The date and time that the network ACL was created,
        format: date-time, type: string}
      crn: {description: The CRN for this network ACL, example: 'crn:v1:bluemix:public:rias:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf',
        format: crn, type: string}
      href: {description: The URL for this network ACL, example: 'http://iaas.bluemix.net/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this network ACL, example: a4e28308-8ee7-46ab-8108-9f881f22bdbf,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      name: {description: The user-defined name for this network ACL, example: my-network-acl,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      resource_group: {$ref: '#/definitions/resource_reference'}
      rules:
        description: The rules for this network ACL
        items: {$ref: '#/definitions/network_acl_rule'}
        type: array
        x-omitempty: true
      subnets:
        description: The subnets to which this network ACL is attached
        items: {$ref: '#/definitions/resource_reference'}
        type: array
        x-omitempty: true
      tags:
        description: A collection of tags for this resource
        example: [production, backend]
        items: {description: A tag for the resource, type: string}
        type: array
        x-omitempty: true
    title: NetworkACL
    type: object
  network_acl_rule:
    example:
      action: allow
      before: {id: 8daca77a-4980-4d33-8f3e-7038797be8f9}
      destination: 192.168.0.0/24
      direction: ingress
      name: my-acl-rule-2
      port_max: 81
      port_min: 80
      protocol: tcp
      source: 10.0.0.5
    properties:
      action:
        description: Whether to allow or deny matching traffic
        enum: [allow, deny]
        type: string
      before: {$ref: '#/definitions/resource_reference'}
      code: {description: 'The ICMP traffic code to allow. Valid values from 0 to
          255. If unspecified, all codes are allowed. This can only be specified if
          type is also specified.', type: integer, x-nullable: true}
      created_at: {description: The date and time that the network ACL Rule was created,
        format: date-time, type: string}
      destination: {description: The destination IP address or CIDR block, example: 192.168.0.0/24,
        type: string}
      direction:
        description: Whether the traffic to be matched is ingress or egress
        enum: [ingress, egress]
        type: string
      href: {description: The URL for this network ACL, example: 'http://iaas.bluemix.net/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this network ACL rule, example: a4e28308-8ee7-46ab-8108-9f881f22bdbf,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      ip_version:
        description: The IP version for this rule
        enum: [ipv4, ipv6]
        type: string
      name: {description: The user-defined name for this network ACL, example: my-network-acl,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      port_max: {description: 'The highest port in the range of ports to be matched;
          if unspecified, `65535` is used.', example: 65535, type: integer, x-nullable: true}
      port_min: {description: 'The lowest port in the range of ports to be matched;
          if unspecified, `1` is used.', example: 49152, type: integer, x-nullable: true}
      protocol: {description: Must be `all` to match all protocols., example: all,
        type: string}
      source: {description: The source IP address or CIDR block, example: 10.0.0.5,
        type: string}
      type: {description: 'The ICMP traffic type to allow. Valid values from 0 to
          254. If unspecified, all types are allowed by this rule.', example: 8, type: integer,
        x-nullable: true}
    title: TupleRule
    type: object
  network_interface_reference:
    allOf:
    - {$ref: '#/definitions/resource_reference'}
    - properties:
        primary_ipv4_address: {description: The primary IPv4 address, type: string}
    title: NetworkInterfaceReference
    type: object
  public_gateway:
    properties:
      created_at: {description: The date and time that the public gateway was created,
        format: date-time, type: string}
      crn: {description: The CRN for this public gateway, example: 'crn:v1:bluemix:public::us-south::gt:public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241',
        format: crn, type: string}
      floating_ip:
        description: Reference to the floating IP which is bound to this public gateway
        properties:
          address: {description: The globally unique IP address, example: 203.0.113.1,
            type: string}
          crn: {description: The CRN for this floating IP, example: 'crn:v1:bluemix:public::us-south::gt:floating-ip:203.0.113.1',
            format: crn, type: string}
          href: {description: The URL for this floating IPs, example: 'http://iaas.bluemix.net/v1/floating_ips/203.0.113.1',
            format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
            type: string}
          id: {description: The unique identifier for this floating ip, example: a4e28308-8ee7-46ab-8108-9f881f22bdbf,
            format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
            type: string}
          name: {description: The user-defined name for this floating IP, example: my-floating-ip,
            format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
        title: FloatingIPReference
        type: object
      href: {description: The URL for this gateway, example: 'http://iaas.bluemix.net/v1/gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this public gateway, example: dc5431ef-1fc6-4861-adc9-a59d077d1241,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      name: {description: The user-defined name for this public gateway, example: my-gateway,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      resource_group: {$ref: '#/definitions/resource_reference'}
      status:
        description: The status of the public gateway
        enum: [available, failed, pending]
        example: available
        type: string
      tags:
        description: A collection of tags for this resource
        example: [production, backend]
        items: {description: A tag for the resource, type: string}
        type: array
        x-omitempty: true
      vpc: {$ref: '#/definitions/resource_reference'}
      zone:
        description: The zone where this public gateway lives
        properties:
          href: {description: The URL for this zone, example: 'http://iaas.bluemix.net/v1/regions/us-south/zones/us-south-1',
            format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
            type: string}
          name: {description: The name for this zone, example: us-south-1, format: name,
            pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
        title: ZoneReference
        type: object
    title: PublicGateway
    type: object
  region:
    properties:
      endpoint: {description: The API endpoint for this region., type: string}
      href: {description: The URL for this region, example: 'http://iaas.bluemix.net/v1/regions/us-south',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      name: {description: The name for this region, example: us-south, format: name,
        pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      status:
        enum: [available, unavailable]
        type: string
    title: Region
    type: object
  resource_reference:
    properties:
      crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
        format: crn, type: string}
      href: {description: The URL for this resource, example: 'http://iaas.bluemix.net/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5/snapshots/349a61d8-7ab1-420f-a690-5fed76ef9d4f',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      name: {description: The user-defined name for this resource, example: my-snapshot,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
    title: reference
    type: object
  riaaserror:
    properties:
      errors:
        description: Array of errors
        items:
          properties:
            code: {description: A snake case string succinctly identifying the problem,
              example: missing_field, pattern: '^[a-z]+(_[a-z]+)*$', type: string}
            message: {description: An explanation of the solution to the problem,
              example: The `flavor.id` field is required., type: string}
            more_info: {description: Link to documentation about this error, example: 'https://console.bluemix.net/docs/iaas/servers.html#template',
              format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
              type: string}
            target:
              properties:
                name: {description: 'The name of the problematic field, query parameter,
                    or header', example: flavor.id, type: string}
                type:
                  description: The type of input where the problem was
                  enum: [field, parameter, header]
                  example: field
                  type: string
              title: ErrorTarget
              type: object
          title: Error
          type: object
        type: array
        x-omitempty: true
      trace: {description: Unique error identifier, example: 86780a34-e651-4b47-9fb0-184a169cc9af,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
    title: ErrorContainer
    type: object
  security_group:
    properties:
      created_at: {description: The date and time that this security group was created,
        format: date-time, type: string}
      crn: {description: The security group's CRN, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271',
        format: crn, type: string}
      href: {description: The security group's canonical URL., example: 'http://iaas.bluemix.net/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The security group's unique identifier., example: be5df5ca-12a0-494b-907e-aa6ec2bfa271,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      name: {description: 'The user-assigned name of this security group. If the user
          does not provide a name, one will be automatically assigned. Security group
          names must be unique, within the scope of a user account.', example: allow_ssh,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      network_interfaces:
        description: Collection of references to network interfaces
        items:
          properties:
            crn: {description: The CRN for this network interface, example: 'crn:v1:staging:public:gt:us-south-1:a/123456::network-interface:10c02d81-0ecb-4dc5-897d-28392913b81e',
              format: crn, type: string}
            href: {description: The URL for this network interface, example: 'http://iaas.bluemix.net/v1/servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e',
              format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
              type: string}
            id: {description: The unique identifier for this network interface, example: 10c02d81-0ecb-4dc5-897d-28392913b81e,
              format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
              type: string}
            name: {description: The user-defined name for this network interface,
              example: my-network-interface, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
              type: string}
            primary_ipv4_address: {description: The primary IPv4 address, type: string}
          title: NetworkInterfaceReference
          type: object
        type: array
        x-omitempty: true
      resource_group: {$ref: '#/definitions/resource_reference'}
      rules:
        description: Collection of references to rules
        items: {$ref: '#/definitions/security_group_rule'}
        type: array
        x-omitempty: true
      tags:
        description: A collection of tags for this resource
        example: [production, backend]
        items: {description: A tag for the resource, type: string}
        type: array
        x-omitempty: true
      vpc: {$ref: '#/definitions/resource_reference'}
    title: SecurityGroup
    type: object
  security_group_rule:
    description: When 'protocol' is either of 'tcp' or 'udp', then the rule may also
      contain fields to specify a port range.
    example:
      direction: ingress
      id: 6f2a6efe-21e2-401c-b237-620aa26ba16a
      ip_version: ipv4
      port_max: 81
      port_min: 80
      protocol: tcp
      remote: {cidr: 192.168.0.0/24}
    properties:
      code: {description: 'The ICMP code to to allow. Valid values from 0 to 255.
          If missing, allow all codes.', example: 0, type: integer, x-nullable: true}
      direction:
        description: The direction of traffic to enforce (ingress, egress)
        enum: [ingress, egress]
        example: ingress
        type: string
      id: {description: The unique identifier for a security group rule, example: 6f2a6efe-21e2-401c-b237-620aa26ba16a,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      ip_version:
        description: The IP version to enforce (ipv4, ipv6). The format of 'remote.address'
          or 'remote.cidr_block' must match this field, if they are used. Also, if
          'remote' references another security group (ie. using remote.id, remote.name,
          remote.crn) then this rule will only apply to IP addresses (network interfaces)
          in that group which match this ip_version.
        enum: [ipv4, ipv6]
        example: ipv4
        type: string
      port_max: {description: 'The inclusive upper TCP/UDP port bound to enforce.
          For a single port, set port_min and port_max to5606 the same value. Valid
          values from 1 to 65535.', example: 22, type: integer, x-nullable: true}
      port_min: {description: 'The inclusive lower TCP/UDP port bound to enforce.
          For a single port, set port_min and port_max to the same value. Valid values
          from 1 to 65535.', example: 22, type: integer, x-nullable: true}
      protocol:
        default: all
        description: The protocol to enforce. Must be one of (icmp, tcp, udp, all).
          Defaults to 'all' if omitted.
        enum: [all, icmp, tcp, udp]
        example: tcp
        type: string
      remote:
        description: Describe the set of network interfaces from which this rule allows
          traffic (or to which, for egress rules.)
        properties:
          address: {description: A single IPv4 or IPv6 address., example: 10.0.1.12,
            type: string}
          cidr_block: {description: 'A range of IPv4 or IPv6 addresses, in CIDR format.',
            example: 10.0.0.0/24, type: string}
          crn: {description: The security group's CRN, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271',
            format: crn, type: string}
          href: {description: The security group's canonical URL., example: 'http://iaas.bluemix.net/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271',
            format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
            type: string}
          id: {description: The security group's unique identifier., example: be5df5ca-12a0-494b-907e-aa6ec2bfa271,
            format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
            type: string}
          name: {description: The security group's user-defined name., example: my-security-group,
            format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
        title: SecurityGroupReference
        type: object
      type: {description: 'The ICMP type to allow. Valid values from 0 to 255. If
          missing, allow all types.', example: 8, type: integer, x-nullable: true}
    title: SecurityGroupRule
    type: object
  server:
    properties:
      boot_volume_attachment: {$ref: '#/definitions/volume_attachment_reference'}
      cpu:
        description: The CPU for this server
        properties:
          architecture:
            description: The CPU architecture
            enum: [amd64, powerpc]
            type: string
          cores: {description: The number of logical CPU cores per CPU, minimum: 1,
            type: integer}
          frequency: {description: The speed of the CPU in megahertz, example: 1000,
            minimum: 500, multipleOf: 500, type: integer}
        title: CPU
      created_at: {description: The date and time that the server was created, format: date-time,
        type: string}
      crn: {description: The CRN for this server, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::server:1e09281b-f177-46fb-baf1-bc152b2e391a',
        format: crn, type: string}
      flavor:
        description: The server's flavor
        properties:
          crn: {description: The CRN for this flavor, example: 'crn:v1:bluemix:public::us-south-1::gt:flavor:a1.4x64',
            format: crn, type: string}
          href: {description: The URL for this flavor, example: 'http://iaas.bluemix.net/v1/flavors/30e0bc90-2bc3-4a57-b99d-251df2cdc7a2',
            format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
            type: string}
          name: {default: u1.1x2, description: The name for this flavor, example: a1.4x64,
            format: name, pattern: '^[A-Za-z][-A-Za-z0-9_.]*$', type: string}
        title: FlavorReference
      generation: {$ref: '#/definitions/generation'}
      gpu:
        description: The GPU(s) for this server
        properties:
          cores: {description: The number of logical GPU cores per GPU, minimum: 1,
            type: integer}
          count: {description: The number of GPUs, minimum: 1, type: integer}
          manufacturer:
            description: The manufacturer of the GPU
            enum: [nvidia]
            type: string
          memory: {description: The amount of memory in megabytes, maximum: 524288,
            minimum: 512, multipleOf: 256, type: integer}
          model:
            description: The model number of the GPU
            enum: [k40, k80]
            type: string
        title: GPU
      href: {description: The URL for this server, example: 'http://iaas.bluemix.net/v1/servers/1e09281b-f177-46fb-baf1-bc152b2e391a',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this server, example: 1e09281b-f177-46fb-baf1-bc152b2e391a,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      image: {$ref: '#/definitions/resource_reference'}
      memory: {description: The amount of memory in megabytes, maximum: 524288, minimum: 512,
        multipleOf: 256, type: integer}
      name: {description: The user-defined name for this server, example: my-server,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      network_interfaces:
        description: Collection of the server's network interfaces, not including
          the primary network interface
        items: {$ref: '#/definitions/network_interface_reference'}
        type: array
        x-omitempty: true
      primary_network_interface: {$ref: '#/definitions/network_interface_reference'}
      profile: {$ref: '#/definitions/resource_reference'}
      resource_group: {$ref: '#/definitions/resource_reference'}
      status:
        description: The status of the server
        enum: [stopped, starting, running, pausing, paused, resuming, stopping, restarting]
        type: string
      tags:
        description: A collection of tags for this resource
        example: [production, backend]
        items: {description: A tag for the resource, type: string}
        type: array
        x-omitempty: true
      type:
        description: Server Type
        enum: [virtual]
        type: string
      volume_attachments:
        description: Collection of volume interfaces
        items: {$ref: '#/definitions/volume_attachment_reference'}
        type: array
        x-omitempty: true
      vpc: {$ref: '#/definitions/resource_reference'}
      zone:
        description: The zone the server resides in
        properties:
          href: {description: The URL for this zone, example: 'http://iaas.bluemix.net/v1/regions/us-south/zones/us-south-1',
            format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
            type: string}
          name: {description: The name for this zone, example: us-south-1, format: name,
            pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
        title: ZoneReference
        type: object
    title: Server
    type: object
  server_action:
    properties:
      completed_at: {description: The date and time that the action was completed,
        format: date-time, type: string}
      created_at: {description: The date and time that the action was created, format: date-time,
        type: string}
      href: {description: The URL for this action, example: 'http://iaas.bluemix.net/v1/servers/1e09281b-f177-46fb-baf1-bc152b2e391a/actions/109a1b6e-1242-4de1-be44-38705e9474ed',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The identifier for this action, example: 109a1b6e-1242-4de1-be44-38705e9474ed,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      started_at: {description: The date and time that the action was started, format: date-time,
        type: string}
      status:
        description: The current status of this action
        enum: [pending, running, failed, completed]
        type: string
      type:
        description: The type of action
        enum: [start, stop, reboot, reset]
        type: string
    title: ServerAction
    type: object
  server_network_interface:
    properties:
      created_at: {description: The date and time that the network interface was created,
        format: date-time, type: string}
      crn: {description: The CRN for this network interface, example: 'crn:v1:staging:public:gt:us-south-1:a/123456::network-interface:10c02d81-0ecb-4dc5-897d-28392913b81e',
        format: crn, type: string}
      floating_ips:
        description: Array of references to floating IPs associated with this network
          interface
        items: {$ref: '#/definitions/resource_reference'}
        type: array
        x-omitempty: true
      href: {description: The URL for this network interface, example: 'http://iaas.bluemix.net/v1/servers/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this network interface, example: 10c02d81-0ecb-4dc5-897d-28392913b81e,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      name: {description: The user-defined name for this network interface, example: my-network-interface,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      port_speed: {description: The network interface port speed in Mbps, example: 10000,
        type: integer}
      primary_ipv4_address: {description: The primary IPv4 address, example: 10.0.0.5,
        type: string}
      primary_ipv6_address: {description: The primary IPv6 address in compressed notation
          as specified by RFC 5952, example: '2001:db8:85a3::8a2e:370:7334', type: string}
      resource_group: {$ref: '#/definitions/resource_reference'}
      secondary_addresses:
        description: Collection seconary IP addresses
        example: [10.0.0.6, '2001:db8:85a3::8a2e:370:7335']
        items: {description: A secondary IP address, type: string}
        type: array
        x-omitempty: true
      security_groups:
        description: Collection of security groups
        items: {$ref: '#/definitions/resource_reference'}
        type: array
        x-omitempty: true
      status:
        description: The status of the volume
        enum: [available, failed, pending]
        example: available
        type: string
      subnet: {$ref: '#/definitions/resource_reference'}
      tags:
        description: A collection of tags for this resource
        example: [production, backend]
        items: {description: A tag for the resource, type: string}
        type: array
        x-omitempty: true
      type:
        description: The type of this network interface as it relates to a server
        enum: [primary, secondary]
        example: primary
        type: string
    title: NetworkInterface
    type: object
  server_profile:
    properties:
      crn: {description: The CRN for this serverprofile, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
        format: crn, type: string}
      family: {example: balanced, type: string}
      generation: {$ref: '#/definitions/generation'}
      href: {description: The URL for this server profile, example: 'http://iaas.bluemix.net/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      name: {description: The user-defined name for this server profile, example: my-snapshot,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
    title: ServerPackage
    type: object
  server_volume_attachment:
    properties:
      created_at: {description: The date and time that the volume was attached, format: date-time,
        type: string}
      crn: {description: The CRN for this volume, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::volume-interfacs:82cbf856-9cbb-45fb-b62f-d7bcef32399a',
        format: crn, type: string}
      href: {description: The URL for this volume interface, example: 'http://iaas.bluemix.net/v1/servers/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this volume interface, example: 82cbf856-9cbb-45fb-b62f-d7bcef32399a,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      name: {description: The user-defined name for this volume interface, example: my-volume-interface,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      resource_group: {$ref: '#/definitions/resource_reference'}
      status:
        enum: [attaching, attached, detaching]
        type: string
      tags:
        description: A collection of tags for this resource
        example: [production, backend]
        items: {description: A tag for the resource, type: string}
        type: array
        x-omitempty: true
      volume: {$ref: '#/definitions/resource_reference'}
    title: VolumeAttachment
    type: object
  subnet:
    properties:
      available_ipv4_address_count: {description: The number of available IPv4 addresses
          in this subnet, example: 15, format: int64, type: integer}
      created_at: {description: The date and time that the subnet was created, format: date-time,
        type: string}
      crn: {description: The CRN for this subnet, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e',
        format: crn, type: string}
      generation: {$ref: '#/definitions/generation'}
      href: {description: The URL for this subnet, example: 'http://iaas.bluemix.net/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this subnet, example: 7ec86020-1c6e-4889-b3f0-a15f2e50f87e,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      ip_version:
        description: The IP version(s) supported by this subnet
        enum: [ipv4, ipv6, both]
        example: both
        type: string
      ipv4_cidr_block: {description: 'The IPv4 range of the subnet, expressed in CIDR
          format', example: 10.0.0.0/24, type: string}
      ipv6_cidr_block: {description: 'The IPv6 range of the subnet, expressed in CIDR
          format', example: '2001:db8:85a3::/64', type: string}
      name: {description: The user-defined name for this subnet, example: my-subnet,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      network_acl: {$ref: '#/definitions/resource_reference'}
      public_gateway: {$ref: '#/definitions/resource_reference'}
      resource_group: {$ref: '#/definitions/resource_reference'}
      status:
        description: The status of the subnet
        enum: [pending, available]
        example: available
        type: string
      tags:
        description: A collection of tags for this resource
        example: [production, backend]
        items: {description: A tag for the resource, type: string}
        type: array
        x-omitempty: true
      total_ipv4_address_count: {description: The total number of IPv4 addresses in
          this subnet, example: 256, format: int64, type: integer}
      vpc: {$ref: '#/definitions/resource_reference'}
      zone:
        description: The zone this subnet resides in
        properties:
          href: {description: The URL for this zone, example: 'http://iaas.bluemix.net/v1/regions/us-south/zones/us-south-1',
            format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
            type: string}
          name: {description: The name for this zone, example: us-south-1, format: name,
            pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
        title: ZoneReference
        type: object
    title: Subnet
    type: object
  volume:
    properties:
      auto_delete: {default: false, description: 'If set to true, this volume will
          be automatically deleted if the only server it is attached to is deleted',
        type: boolean}
      billing_term:
        default: hourly
        description: The billing term for the volume
        enum: [hourly, monthly]
        example: hourly
        type: string
      capacity: {description: The capacity of the volume in gigabytes, example: 100,
        maximum: 64000, minimum: 10, type: integer}
      created_at: {description: The date and time that the volume was created, format: date-time,
        type: string}
      crn: {description: The CRN for this volume, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5',
        format: crn, type: string}
      encryption_key:
        description: The encryption key for the volume
        properties:
          crn: {description: The CRN for the volume encryption key, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::encryption-key:1a6b7274-678d-4dfb-8981-c71dd9d4daa5',
            format: crn, type: string}
        title: VolumeEncryptionKey
        type: object
      href: {description: The URL for this volume, example: 'http://iaas.bluemix.net/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this volume, example: 1a6b7274-678d-4dfb-8981-c71dd9d4daa5,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      iops:
        description: The bandwidth for the volume
        enum: [1000, 10000, 100000]
        type: integer
      name: {description: The user-defined name for this volume, example: my-volume,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      profile: {$ref: '#/definitions/resource_reference'}
      resource_group: {$ref: '#/definitions/resource_reference'}
      source_snapshot: {$ref: '#/definitions/resource_reference'}
      status:
        description: The status of the volume
        enum: [pending, available, pending_deletion]
        example: available
        type: string
      tags:
        description: A collection of tags for this resource
        example: [production, backend]
        items: {description: A tag for the resource, type: string}
        type: array
        x-omitempty: true
      type:
        description: The volume type
        enum: [boot, data]
        type: string
      zone:
        properties:
          href: {description: The URL for this zone, example: 'http://iaas.bluemix.net/v1/regions/us-south/zones/us-south-1',
            format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
            type: string}
          name: {description: The name for this zone, example: us-south-1, format: name,
            pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
        title: ZoneReference
        type: object
    title: Volume
    type: object
  volume_attachment_reference:
    allOf:
    - {$ref: '#/definitions/resource_reference'}
    - properties:
        volume: {$ref: '#/definitions/resource_reference'}
    title: VolumeAttachmentVolumeReference
    type: object
  volume_extended:
    allOf:
    - {$ref: '#/definitions/volume'}
    - properties:
        volume_attachments:
          items:
            allOf:
            - {$ref: '#/definitions/resource_reference'}
            properties:
              server: {$ref: '#/definitions/resource_reference'}
          type: array
          x-omitempty: true
    title: VolumeAttachmentVolumeReference
    type: object
  volume_snapshot:
    properties:
      created_at: {description: The date and time that the snapshot was created, format: date-time,
        type: string}
      crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
        format: crn, type: string}
      href: {description: The URL for this snapshot, example: 'http://iaas.bluemix.net/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5/snapshots/349a61d8-7ab1-420f-a690-5fed76ef9d4f',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this snapshot, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      name: {description: The user-defined name for this snapshot, example: my-snapshot,
        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      resource_group: {$ref: '#/definitions/resource_reference'}
      status:
        description: The status of the snapshot
        enum: [pending, complete]
        type: string
      tags:
        description: A collection of tags for this resource
        example: [production, backend]
        items: {description: A tag for the resource, type: string}
        type: array
        x-omitempty: true
    title: Snapshot
    type: object
  vpc:
    properties:
      created_at: {description: The date and time that the VPC was created, format: date-time,
        type: string}
      crn: {description: The CRN for this VPC, example: 'crn:v1:bluemix:public:gt::a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b',
        format: crn, type: string}
      default_network_acl: {$ref: '#/definitions/resource_reference'}
      href: {description: The URL for this VPC, example: 'http://iaas.bluemix.net/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      id: {description: The unique identifier for this VPC, example: 4727d842-f94f-4a2d-824a-9bc9b02c523b,
        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
        type: string}
      is_default: {description: Indicates whether this is the default VPC for the
          account, type: boolean}
      name: {description: The user-defined name for this VPC, example: my-vpc, format: name,
        pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      resource_group: {$ref: '#/definitions/resource_reference'}
      status:
        enum: [available, pending]
        type: string
      tags:
        description: A collection of tags for this resource
        example: [production, backend]
        items: {description: A tag for the resource, type: string}
        type: array
        x-omitempty: true
    title: VPC
    type: object
  zone:
    properties:
      href: {description: The URL for this zone, example: 'http://iaas.bluemix.net/v1/regions/us-south/zones/us-south-1',
        format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
        type: string}
      name: {description: The name for this zone, example: us-south-1, format: name,
        pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
      region:
        description: The region this zone belongs to
        properties:
          href: {description: The URL for this region, example: 'http://iaas.bluemix.net/v1/regions/us-south',
            format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
            type: string}
          name: {description: The name for this region, example: us-south, format: name,
            pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
        title: RegionReference
        type: object
      status:
        enum: [available, unavailable, impaired]
        type: string
    title: Zone
    type: object
info: {title: Regional API, version: 0.3.0}
paths:
  /flavors:
    get:
      consumes: [application/json]
      description: This request retrieves all flavors available in the region. A flavor
        specifies the basic characteristics of a server, such as number of cores and
        amount of RAM.
      parameters:
      - {description: A server-supplied token determining what resource to start the
          page on, in: query, name: start, required: false, type: string}
      - {default: 50, description: The number of resources to return on a page, format: int32,
        in: query, maximum: 100, minimum: 1, name: limit, required: false, type: integer}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              first:
                description: A reference to the first page of resources
                properties:
                  href: {description: The URL for the first page of resources, example: 'http://iaas.bluemix.net/v1/flavors?limit=20',
                    format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                    type: string}
                type: object
              flavors:
                description: Collection of flavors
                items: {$ref: '#/definitions/flavor'}
                type: array
                x-omitempty: true
              limit: {description: The maximum number of resources can be returned
                  by the request, example: 20, format: int64, maximum: 100, minimum: 1,
                type: integer}
              next: {$ref: '#/definitions/Next'}
              total_count: {description: The total number of resources across all
                  pages, example: 132, format: int64, minimum: 0, type: integer}
            title: FlavorCollection
            type: object
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all flavors
      tags: [Compute]
  /flavors/{id}:
    get:
      consumes: [application/json]
      description: This request retrieves a single flavor specified by the identifier
        in the URL.
      parameters:
      - {description: The flavor identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/flavor'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified flavor
      tags: [Compute]
  /floating_ips:
    get:
      consumes: [application/json]
      description: This request retrieves all floating IPs in the region. Floating
        IPs allow ingress and egress traffic from the Internet to a server.
      parameters:
      - {description: A server-supplied token determining what resource to start the
          page on, in: query, name: start, required: false, type: string}
      - {default: 50, description: The number of resources to return on a page, format: int32,
        in: query, maximum: 100, minimum: 1, name: limit, required: false, type: integer}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      - {description: Filters the collection to resources within the specified zone,
        in: query, name: zone.name, required: false, type: string}
      - {description: Filters the collection to resources within the resource group
          of the specified identifier, in: query, name: resource_group.id, required: false,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              first:
                description: A reference to the first page of resources
                properties:
                  href: {description: The URL for the first page of resources, example: 'http://iaas.bluemix.net/v1/floating_ips?limit=20',
                    format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                    type: string}
                type: object
              floating_ips:
                description: Collection of floating IPs
                items: {$ref: '#/definitions/floating_ip'}
                type: array
                x-omitempty: true
              limit: {description: The maximum number of resources can be returned
                  by the request, example: 20, format: int64, maximum: 100, minimum: 1,
                type: integer}
              next: {$ref: '#/definitions/Next'}
              total_count: {description: The total number of resources across all
                  pages, example: 132, format: int64, minimum: 0, type: integer}
            title: FloatingIPCollection
            type: object
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all floating IPs
      tags: [Network]
    post:
      description: This request reserves a new floating IP.
      parameters:
      - in: body
        name: body
        required: true
        schema:
          example:
            name: my-new-floating-ip
            target: {id: 69e55145-cc7d-4d8e-9e1f-cc3fb60b1793}
          properties:
            name: {description: The user-defined name for this floating IP, example: my-floating-ip,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            resource_group:
              properties:
                id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
              title: idreference
              type: object
            tags:
              description: A collection of tags for this resource
              example: [production, backend]
              items: {description: A tag for the resource, type: string}
              type: array
              x-omitempty: true
            target:
              description: The target this address is to be associated with
              example: {address: 69e55145-cc7d-4d8e-9e1f-cc3fb60b1793}
              properties:
                crn: {description: The CRN for this network interface, example: 'crn:v1:staging:public:gt:us-south-1:a/123456::network-interface:10c02d81-0ecb-4dc5-897d-28392913b81e',
                  format: crn, type: string}
                id: {description: The unique identifier for this network interface,
                  example: 10c02d81-0ecb-4dc5-897d-28392913b81e, format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
                name: {description: The user-defined name for this network interface,
                  example: my-network-interface, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                  type: string}
              title: NetworkInterfaceIdentityByName
              type: object
            zone: {$ref: '#/definitions/NameReference'}
          title: FloatingIPTemplateWithTarget
          type: object
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/floating_ip'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Reserves a floating IP
      tags: [Network]
  /floating_ips/{id}:
    delete:
      consumes: [application/json]
      description: This request releases a floating IP. This operation cannot be reversed.
      parameters:
      - {description: The floating IP address, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Releases specified floating IP
      tags: [Network]
    get:
      consumes: [application/json]
      description: This request retrieves a single floating IP specified by the identifier
        in the URL.
      parameters:
      - {description: The floating IP address, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/floating_ip'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified floating IP
      tags: [Network]
    patch:
      consumes: [application/json]
      description: This request updates a floating IP's name, tags, and/or target.
      parameters:
      - {description: The floating IP address, in: path, name: id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema:
          properties:
            name: {description: The user-defined name for this key, example: my-key,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            target:
              properties:
                id: {description: The unique identifier for this resource group, example: dc5431ef-1fc6-4861-adc9-a59d077d1241,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
              title: NetworkInterfaceIdentity
              type: object
          title: FloatingIPPatch
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/floating_ip'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates specified floating IP
      tags: [Network]
  /floating_ips/{id}/tags:
    get:
      consumes: [application/json]
      description: This request retrieves all tags for the resource specified by the
        identifier in the URL.
      parameters:
      - {description: The floating IP address, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              tags:
                description: A collection of tags for this resource
                example: [production, backend]
                items: {description: A tag for the resource, type: string}
                type: array
                x-omitempty: true
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all tags for a resource
      tags: [Network]
  /floating_ips/{id}/tags/{tag_name}:
    delete:
      consumes: [application/json]
      description: This request removes a tag from a resource.
      parameters:
      - {description: The floating IP address, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Removes a tag from a resource
      tags: [Network]
    get:
      consumes: [application/json]
      description: This request succeeds if a tag exists on the resource and fails
        otherwise.
      parameters:
      - {description: The floating IP address, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Checks if a specific tag exists on a specific resource
      tags: [Network]
    put:
      consumes: [application/json]
      description: This request adds the specified tag to the specified resource.
        A request body is not required, and if supplied, is ignored. It succeeds if
        the tag already exists on the resource.
      parameters:
      - {description: The floating IP address, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Sets a tag on a resource
      tags: [Network]
  /images:
    get:
      consumes: [application/json]
      description: This request retrieves all images available in the region. Images
        represent a specific software configuration for a server. Some images are
        system-provided. Images can also be created from servers or imported from
        another source.
      parameters:
      - {description: A server-supplied token determining what resource to start the
          page on, in: query, name: start, required: false, type: string}
      - {default: 50, description: The number of resources to return on a page, format: int32,
        in: query, maximum: 100, minimum: 1, name: limit, required: false, type: integer}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      - description: Filters the collection to images with the specified visibility
        enum: [public, private]
        in: query
        name: visibility
        required: false
        type: string
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              first:
                description: A reference to the first page of resources
                properties:
                  href: {description: The URL for the first page of resources, example: 'http://iaas.bluemix.net/v1/images?limit=20',
                    format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                    type: string}
                type: object
              images:
                description: Collection of images
                items: {$ref: '#/definitions/image'}
                type: array
                x-omitempty: true
              limit: {description: The maximum number of resources can be returned
                  by the request, example: 20, format: int64, maximum: 100, minimum: 1,
                type: integer}
              next: {$ref: '#/definitions/Next'}
              total_count: {description: The total number of resources across all
                  pages, example: 132, format: int64, minimum: 0, type: integer}
            title: ImageCollection
            type: object
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all images
      tags: [Compute]
    post:
      description: This request creates a new image from an image template. The image
        template object is structured in the same way as a retrieved image, and contains
        the information necessary to create the new image. If a source server is provided
        with the image template, the image will be created from that server; otherwise,
        a URL to the image file on object storage must be provided.
      parameters:
      - in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/image'}
      responses:
        200:
          description: dummy
          headers:
            Location: {description: Upload URL for image file, type: string}
          schema: {$ref: '#/definitions/image'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates an image
      tags: [Compute]
  /images/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes an image. This operation cannot be reversed.
        It will not succeed for system-provided images.
      parameters:
      - {description: The image identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes specified image
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request retrieves a single image specified by the identifier
        in the URL.
      parameters:
      - {description: The image identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/image'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified image
      tags: [Compute]
    patch:
      consumes: [application/json]
      description: This request updates an image's name.
      parameters:
      - {description: The image identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          headers:
            Location: {description: Upload URL for image file, type: string}
          schema: {$ref: '#/definitions/image'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates an image's name
      tags: [Compute]
  /images/{id}/tags:
    get:
      consumes: [application/json]
      description: This request retrieves all tags for the resource specified by the
        identifier in the URL.
      parameters:
      - {description: The image id, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              tags:
                description: A collection of tags for this resource
                example: [production, backend]
                items: {description: A tag for the resource, type: string}
                type: array
                x-omitempty: true
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all tags for a resource
      tags: [Compute]
  /images/{id}/tags/{tag_name}:
    delete:
      consumes: [application/json]
      description: This request removes a tag from a resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Removes a tag from a resource
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request succeeds if a tag exists on the resource and fails
        otherwise.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Checks if a specific tag exists on a specific resource
      tags: [Compute]
    put:
      consumes: [application/json]
      description: This request adds the specified tag to the specified resource.
        A request body is not required, and if supplied, is ignored. It succeeds if
        the tag already exists on the resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Sets a tag on a resource
      tags: [Compute]
  /instance/profiles:
    get:
      consumes: [application/json]
      description: This request retrieves all instance profiles available in the region.
        A instance profile specifies the performance characteristics and pricing model
        for a instance.
      parameters:
      - {description: A server-supplied token determining what resource to start the
          page on, in: query, name: start, required: false, type: string}
      - {default: 50, description: The number of resources to return on a page, format: int32,
        in: query, maximum: 100, minimum: 1, name: limit, required: false, type: integer}
      produces: [application/json]
      responses:
        200:
          description: instance profiles retrieved successfully
          schema:
            properties:
              first:
                properties:
                  href: {example: 'https://iaas.bluemix.net/v1/instance/profiles?limit=20'}
              limit: {description: The maximum number of resources can be returned
                  by the request, example: 20, format: int64, maximum: 100, minimum: 1,
                type: integer}
              next: {$ref: '#/definitions/Next'}
              profiles:
                description: Collection of instance profiels
                items: {$ref: '#/definitions/instance_profile'}
                type: array
                x-omitempty: true
              total_count: {description: The total number of resources across all
                  pages, example: 132, format: int64, minimum: 0, type: integer}
            title: instanceProfileCollection
            type: object
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all instance profiles
      tags: [Compute]
  /instance/profiles/{name}:
    get:
      consumes: [application/json]
      description: This request retrieves a single instance profile specified by the
        name in the URL.
      parameters:
      - {description: The instance profile name, in: path, name: name, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/instance_profile'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified instance action
      tags: [Compute]
  /instances:
    get:
      consumes: [application/json]
      description: This request retrieves all instances in the region.
      parameters:
      - {description: A server-supplied token determining what resource to start the
          page on, in: query, name: start, required: false, type: string}
      - {default: 50, description: The number of resources to return on a page, format: int32,
        in: query, maximum: 100, minimum: 1, name: limit, required: false, type: integer}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      - {description: Filters the collection to resources within the specified zone,
        in: query, name: zone.name, required: false, type: string}
      - {description: Filters the collection to resources within the VPC of the specified
          identifier, in: query, name: vpc.id, required: false, type: string}
      - {description: Filters the collection to resources within the VPC of the specified
          CRN, in: query, name: vpc.crn, required: false, type: string}
      - {description: Filters the collection to resources within the VPC of the specified
          name, in: query, name: vpc.name, required: false, type: string}
      - {description: Filters the collection to instances on the subnet of the specified
          identifier, in: query, name: network_interfaces.subnet.id, required: false,
        type: string}
      - {description: Filters the collection to instances on the subnet of the specified
          CRN, in: query, name: network_interfaces.subnet.crn, required: false, type: string}
      - {description: Filters the collection to instances on the subnet of the specified
          name, in: query, name: network_interfaces.subnet.name, required: false,
        type: string}
      - {description: Filters the collection to resources within the resource group
          of the specified identifier, in: query, name: resource_group.id, required: false,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              first:
                description: A reference to the first page of resources
                properties:
                  href: {description: The URL for the first page of resources, example: 'http://iaas.bluemix.net/v1/instances?limit=20',
                    format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                    type: string}
                type: object
              instances:
                description: Collection of instances
                items: {$ref: '#/definitions/instance'}
                type: array
                x-omitempty: true
              limit: {description: The maximum number of resources can be returned
                  by the request, example: 20, format: int64, maximum: 100, minimum: 1,
                type: integer}
              next: {$ref: '#/definitions/Next'}
              servers:
                description: Collection of instances
                items: {$ref: '#/definitions/instance'}
                type: array
                x-omitempty: true
              total_count: {description: The total number of resources across all
                  pages, example: 132, format: int64, minimum: 0, type: integer}
            title: instanceCollection
            type: object
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all instances
      tags: [Compute]
    post:
      description: This request provisions a new instance for a instance template.
        The instance template object is structured in the same way as a retrieved
        instance, and contains the information necessary to provision the new instance
      parameters:
      - in: body
        name: body
        required: true
        schema:
          example:
            image: {name: my-image}
            keys:
            - {fingerprint: yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY}
            type: virtual
            vpc: {name: my-vpc}
          properties:
            boot_volume_attachment:
              description: The boot volume interface for the instance
              properties:
                name: {description: The user-defined name for this volume interface,
                  example: my-volume-interface, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                  type: string}
                resource_group:
                  properties:
                    id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                      format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                      type: string}
                  title: idreference
                  type: object
                tags:
                  description: A collection of tags for this resource
                  example: [production, backend]
                  items: {description: A tag for the resource, type: string}
                  type: array
                  x-omitempty: true
                volume:
                  description: The identity of the volume to attach to the instance
                    or a template for a new volume
                  properties:
                    auto_delete: {default: false, description: 'If set to true, this
                        volume will be automatically deleted if the only instance
                        it is attached to is deleted', type: boolean}
                    billing_term:
                      default: hourly
                      description: The billing term for the volume
                      enum: [hourly, monthly]
                      example: hourly
                      type: string
                    capacity: {default: 100, description: The capacity of the volume
                        in gigabytes, example: 100, maximum: 64000, minimum: 10, type: integer}
                    crn: {description: The CRN for this volume, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5',
                      format: crn, type: string}
                    encryption_key:
                      description: The encryption key for the volume
                      properties:
                        crn: {description: The CRN for the volume encryption key,
                          example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::encryption-key:1a6b7274-678d-4dfb-8981-c71dd9d4daa5',
                          format: crn, type: string}
                      title: VolumeEncryptionKey
                      type: object
                    id: {description: The unique identifier for this volume, example: 1a6b7274-678d-4dfb-8981-c71dd9d4daa5,
                      format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                      type: string}
                    iops:
                      description: The bandwidth for the volume
                      enum: [1000, 10000, 100000]
                      type: integer
                    name: {description: The user-defined name for this volume, example: my-volume,
                      format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
                    profile:
                      properties:
                        crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                          format: crn, type: string}
                        name: {description: The user-defined name for this resource,
                          example: my-snapshot, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                          type: string}
                      title: reference
                      type: object
                    resource_group:
                      properties:
                        id: {description: The unique identifier for this resource,
                          example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f, format: uuid,
                          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                          type: string}
                      title: idreference
                      type: object
                    source_snapshot:
                      properties:
                        crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                          format: crn, type: string}
                        id: {description: The unique identifier for this resource,
                          example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f, format: uuid,
                          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                          type: string}
                        name: {description: The user-defined name for this resource,
                          example: my-snapshot, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                          type: string}
                      title: reference
                      type: object
                    tags:
                      description: A collection of tags for this resource
                      example: [production, backend]
                      items: {description: A tag for the resource, type: string}
                      type: array
                      x-omitempty: true
                    type:
                      description: The volume type
                      enum: [boot, data]
                      type: string
                  title: BootVolumeTemplateinstanceContext
                  type: object
              title: VolumeAttachmentTemplateinstanceContext
              type: object
            flavor:
              properties:
                crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                  format: crn, type: string}
                name: {description: The user-defined name for this resource, example: my-snapshot,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: reference
              type: object
            generation: {$ref: '#/definitions/generation'}
            image:
              description: The the identity of the image to be used when provisioning
                the instance
              example: {id: 72b27b5c-f4b0-48bb-b954-5becc7c1dcb8}
              properties:
                crn: {description: The CRN for this image, example: 'crn:v1:bluemix:public:rias:us-south-1:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8',
                  format: crn, type: string}
                id: {description: The unique identifier for this image, example: 72b27b5c-f4b0-48bb-b954-5becc7c1dcb8,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
                name: {description: The user-defined name for this image, example: my-image,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: ImageIdentityByName
              type: object
            keys:
              description: The public SSH keys to install on the instance; if no keys
                are provided the instance will be inaccessible unless the image used
                provides a means of access
              example:
              - {id: a6b1a881-2ce8-41a3-80fc-36316a73f803}
              items:
                properties:
                  crn: {description: The CRN for this key, example: 'crn:v1:bluemix:public:gt::a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803',
                    format: crn, type: string}
                  fingerprint: {description: The SHA256 fingerprint of the public
                      key, example: yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY, type: string}
                  id: {description: The unique identifier for this key, example: a6b1a881-2ce8-41a3-80fc-36316a73f803,
                    format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                    type: string}
                  name: {description: The user-defined name for this key, example: my-key,
                    format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
                title: KeyIdentityByFingerprint
                type: object
              type: array
              x-omitempty: true
            name: {description: The user-defined name for this instance, example: my-instance,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            network_interfaces:
              description: Collection of network interfaces to create for the instance
              items:
                description: network interface
                properties:
                  name: {description: The user-defined name for this network interface,
                    example: my-network-interface, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                    type: string}
                  port_speed: {description: The network interface port speed in Mbps,
                    example: 10000, type: integer}
                  primary_ipv4_address: {description: The primary IPv4 address, example: 10.0.0.5,
                    type: string}
                  primary_ipv6_address: {description: The primary IPv6 address in
                      any valid notation as specified by RFC 4291, example: '2001:0db8:85a3:0000:0000:8a2e:0370:7334',
                    type: string}
                  resource_group:
                    properties:
                      id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                        type: string}
                    title: idreference
                    type: object
                  secondary_addresses:
                    description: Collection seconary IP addresses
                    example: [10.0.0.6, '2001:0db8:85a3:0000:0000:8a2e:0370:7335']
                    items: {description: A secondary IP address, type: string}
                    type: array
                    x-omitempty: true
                  security_groups:
                    items:
                      properties:
                        crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                          format: crn, type: string}
                        id: {description: The unique identifier for this resource,
                          example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f, format: uuid,
                          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                          type: string}
                        name: {description: The user-defined name for this resource,
                          example: my-snapshot, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                          type: string}
                      title: reference
                      type: object
                    type: array
                    x-omitempty: true
                  subnet:
                    properties:
                      crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                        format: crn, type: string}
                      id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                        type: string}
                      name: {description: The user-defined name for this resource,
                        example: my-snapshot, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                        type: string}
                    title: reference
                    type: object
                  tags:
                    description: A collection of tags for this resource
                    example: [production, backend]
                    items: {description: A tag for the resource, type: string}
                    type: array
                    x-omitempty: true
                title: PrimaryNetworkInterfaceTemplate
                type: object
              type: array
              x-omitempty: true
            primary_network_interface:
              description: Primary network interface
              properties:
                floating_ips:
                  description: Optional array of identities and/or templates of floating
                    IPs to associate with this network interface
                  example:
                  - {name: my-new-floating-ip}
                  items:
                    properties:
                      address: {description: The globally unique IP address, example: 203.0.113.1,
                        type: string}
                      crn: {description: The CRN for this floating IP, example: 'crn:v1:bluemix:public::us-south::gt:floating-ip:203.0.113.1',
                        format: crn, type: string}
                      name: {description: The user-defined name for this floating
                          IP, example: my-floating-ip, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                        type: string}
                      resource_group:
                        properties:
                          id: {description: The unique identifier for this resource,
                            example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f, format: uuid,
                            pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                            type: string}
                        title: idreference
                        type: object
                      tags:
                        description: A collection of tags for this resource
                        example: [production, backend]
                        items: {description: A tag for the resource, type: string}
                        type: array
                        x-omitempty: true
                    title: FloatingIPTemplateBasic
                    type: object
                  type: array
                  x-omitempty: true
                name: {description: The user-defined name for this network interface,
                  example: my-network-interface, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                  type: string}
                port_speed: {description: The network interface port speed in Mbps,
                  example: 10000, type: integer}
                primary_ipv4_address: {description: The primary IPv4 address, example: 10.0.0.5,
                  type: string}
                primary_ipv6_address: {description: The primary IPv6 address in any
                    valid notation as specified by RFC 4291, example: '2001:0db8:85a3:0000:0000:8a2e:0370:7334',
                  type: string}
                resource_group:
                  properties:
                    id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                      format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                      type: string}
                  title: idreference
                  type: object
                secondary_addresses:
                  description: Collection seconary IP addresses
                  example: [10.0.0.6, '2001:0db8:85a3:0000:0000:8a2e:0370:7335']
                  items: {description: A secondary IP address, type: string}
                  type: array
                  x-omitempty: true
                security_groups:
                  items:
                    properties:
                      crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                        format: crn, type: string}
                      id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                        type: string}
                      name: {description: The user-defined name for this resource,
                        example: my-snapshot, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                        type: string}
                    title: reference
                    type: object
                  type: array
                  x-omitempty: true
                subnet:
                  properties:
                    crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                      format: crn, type: string}
                    id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                      format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                      type: string}
                    name: {description: The user-defined name for this resource, example: my-snapshot,
                      format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
                  title: reference
                  type: object
                tags:
                  description: A collection of tags for this resource
                  example: [production, backend]
                  items: {description: A tag for the resource, type: string}
                  type: array
                  x-omitempty: true
              title: PrimaryNetworkInterfaceTemplate
              type: object
            profile:
              properties:
                crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                  format: crn, type: string}
                name: {description: The user-defined name for this resource, example: my-snapshot,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: reference
              type: object
            resource_group:
              properties:
                id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
              title: idreference
              type: object
            tags:
              description: A collection of tags for this resource
              example: [production, backend]
              items: {description: A tag for the resource, type: string}
              type: array
              x-omitempty: true
            type:
              default: virtual
              description: instance Type
              enum: [virtual]
              type: string
            user_data: {description: User data to be made available when setting up
                the instance, type: string}
            volume_attachments:
              description: Collection of volume interfaces
              items:
                description: The boot volume interface for the instance
                properties:
                  name: {description: The user-defined name for this volume interface,
                    example: my-volume-interface, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                    type: string}
                  resource_group:
                    properties:
                      id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                        type: string}
                    title: idreference
                    type: object
                  tags:
                    description: A collection of tags for this resource
                    example: [production, backend]
                    items: {description: A tag for the resource, type: string}
                    type: array
                    x-omitempty: true
                  volume:
                    description: The identity of the volume to attach to the instance
                      or a template for a new volume
                    properties:
                      auto_delete: {default: false, description: 'If set to true,
                          this volume will be automatically deleted if the only instance
                          it is attached to is deleted', type: boolean}
                      billing_term:
                        default: hourly
                        description: The billing term for the volume
                        enum: [hourly, monthly]
                        example: hourly
                        type: string
                      capacity: {default: 100, description: The capacity of the volume
                          in gigabytes, example: 100, maximum: 64000, minimum: 10,
                        type: integer}
                      crn: {description: The CRN for this volume, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5',
                        format: crn, type: string}
                      encryption_key:
                        description: The encryption key for the volume
                        properties:
                          crn: {description: The CRN for the volume encryption key,
                            example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::encryption-key:1a6b7274-678d-4dfb-8981-c71dd9d4daa5',
                            format: crn, type: string}
                        title: VolumeEncryptionKey
                        type: object
                      id: {description: The unique identifier for this volume, example: 1a6b7274-678d-4dfb-8981-c71dd9d4daa5,
                        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                        type: string}
                      iops:
                        description: The bandwidth for the volume
                        enum: [1000, 10000, 100000]
                        type: integer
                      name: {description: The user-defined name for this volume, example: my-volume,
                        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
                      profile:
                        properties:
                          crn: {description: The CRN for this profile, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                            format: crn, type: string}
                          name: {description: The user-defined name for this resource,
                            example: my-snapshot, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                            type: string}
                        title: reference
                        type: object
                      resource_group:
                        properties:
                          id: {description: The unique identifier for this resource,
                            example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f, format: uuid,
                            pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                            type: string}
                        title: idreference
                        type: object
                      source_snapshot:
                        properties:
                          crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                            format: crn, type: string}
                          id: {description: The unique identifier for this resource,
                            example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f, format: uuid,
                            pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                            type: string}
                          name: {description: The user-defined name for this resource,
                            example: my-snapshot, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                            type: string}
                        title: reference
                        type: object
                      tags:
                        description: A collection of tags for this resource
                        example: [production, backend]
                        items: {description: A tag for the resource, type: string}
                        type: array
                        x-omitempty: true
                      type:
                        description: The volume type
                        enum: [boot, data]
                        type: string
                    title: BootVolumeTemplateinstanceContext
                    type: object
                title: VolumeAttachmentTemplateinstanceContext
                type: object
              type: array
              x-omitempty: true
            vpc:
              description: The VPC the instance is to be a part of
              example: {id: 4727d842-f94f-4a2d-824a-9bc9b02c523b}
              properties:
                crn: {description: The CRN for this VPC, example: 'crn:v1:bluemix:public:gt::a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b',
                  format: crn, type: string}
                id: {description: The unique identifier for this VPC, example: 4727d842-f94f-4a2d-824a-9bc9b02c523b,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
                name: {description: The user-defined name for this VPC, example: my-vpc,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: VPCIdentityByName
              type: object
            zone: {$ref: '#/definitions/NameReference'}
          title: instanceFromImageTemplate
          type: object
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/instance'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a instance
      tags: [Compute]
  /instances/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes a instance. This operation cannot be reversed.
      parameters:
      - {description: The instance identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes specified instance
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request retrieves a single instance specified by the identifier
        in the URL.
      parameters:
      - {description: The instance identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/instance'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves a instance
      tags: [Compute]
    patch:
      consumes: [application/json]
      description: This request updates a instance with the information in a provided
        instance patch. The instance patch object is structured in the same way as
        a retrieved instance and contains only the information to be updated.
      parameters:
      - {description: The instance identifier, in: path, name: id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema:
          properties:
            name: {description: The user-defined name for this network ACL, example: my-network-acl,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            profile:
              properties:
                crn: {description: The CRN for this profile, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                  format: crn, type: string}
                name: {description: The user-defined name for this resource, example: my-snapshot,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: reference
              type: object
          type: object
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/instance'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates specified instance
      tags: [Compute]
  /instances/{id}/tags:
    get:
      consumes: [application/json]
      description: This request retrieves all tags for the resource specified by the
        identifier in the URL.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              tags:
                description: A collection of tags for this resource
                example: [production, backend]
                items: {description: A tag for the resource, type: string}
                type: array
                x-omitempty: true
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all tags for a resource
      tags: [Compute]
  /instances/{id}/tags/{tag_name}:
    delete:
      consumes: [application/json]
      description: This request removes a tag from a resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Removes a tag from a resource
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request succeeds if a tag exists on the resource and fails
        otherwise.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Checks if a specific tag exists on a specific resource
      tags: [Compute]
    put:
      consumes: [application/json]
      description: This request adds the specified tag to the specified resource.
        A request body is not required, and if supplied, is ignored. It succeeds if
        the tag already exists on the resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Sets a tag on a resource
      tags: [Compute]
  /instances/{instance_id}/initialization:
    get:
      tags:
      - "Compute"
      summary: "Retrieves configuration used to initialize the instance."
      description: "Retrieves configuration variables used to initialize the instance such as SSH keys and the Windows administrator password."
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: "The initialization configuration was retrieved successfully."
          schema: {$ref: '#/definitions/InstanceInitialization'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
  /instances/{instance_id}/actions:
    get:
      consumes: [application/json]
      description: This request retrieves all pending, running, and recent actions
        on a instance.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: A instance-supplied token determining what resource to start
          the page on, in: query, name: start, required: false, type: string}
      - {default: 50, description: The number of resources to return on a page, format: int32,
        in: query, maximum: 100, minimum: 1, name: limit, required: false, type: integer}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              actions:
                description: Collection of instance actions
                items: {$ref: '#/definitions/instance_action'}
                type: array
                x-omitempty: true
              first:
                description: A reference to the first page of resources
                properties:
                  href: {description: The URL for the first page of resources, example: 'http://iaas.bluemix.net/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/actions?limit=20',
                    format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                    type: string}
                type: object
              limit: {description: The maximum number of resources can be returned
                  by the request, example: 20, format: int64, maximum: 100, minimum: 1,
                type: integer}
              next: {$ref: '#/definitions/Next'}
              total_count: {description: The total number of resources across all
                  pages, example: 132, format: int64, minimum: 0, type: integer}
            title: instanceActionCollection
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all actions on a instance
      tags: [Compute]
    post:
      description: This request creates a new action which will be queued up to run
        as soon as any currently pending or running actions have completed.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema:
          properties:
            type:
              description: The type of action
              enum: [start, stop, reboot, reset]
              type: string
          title: instanceActionTemplate
          type: object
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/instance_action'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a new action
      tags: [Compute]
  /instances/{instance_id}/actions/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes a instance action. It will only succeed if
        the action is currently pending.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The instance action identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes a pending action, preventing it from running
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request retrieves a single instance action specified by the
        identifier in the URL.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The instance action identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/instance_action'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified instance action
      tags: [Compute]
  /instances/{instance_id}/network_interfaces:
    get:
      consumes: [application/json]
      description: This request retrieves all network interfaces on a instance. A
        network interface is an abstract representation of a network interface card
        and connects a instance to a subnet. instances may have more than one network
        interface, but each network interface can be attached to only one subnet.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: Filters the collection to resources within the resource group
          of the specified identifier, in: query, name: resource_group.id, required: false,
        type: string}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              network_interfaces:
                description: Collection of network interfaces
                items: {$ref: '#/definitions/instance_network_interface'}
                type: array
                x-omitempty: true
            title: NetworkInterfaceCollection
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all network interfaces on a instance
      tags: [Compute]
    post:
      description: This request creates a new network interface from a network interface
        template. The specified subnet must reside in the same VPC as the instance.
        The network interface template object is structured in the same way as a retrieved
        network interface, and contains the information necessary to create the new
        network interface. Each primary and secondary address in the network interface
        must be contained by one of the specified subnet's CIDR blocks.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema:
          example:
            total_ipv4_address_count: 256
            vpc: {id: 4727d842-f94f-4a2d-824a-9bc9b02c523b}
            zone: {name: us-south-1}
          properties:
            name: {description: The user-defined name for this interface, example: my-interface,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            port_speed: {description: The network interface port speed in Mbps, example: 10000,
              type: integer}
            primary_ipv4_address: {description: The primary IPv4 address, example: 10.0.0.5,
              type: string}
            primary_ipv6_address: {description: The primary IPv6 address in any valid
                notation as specified by RFC 4291, example: '2001:0db8:85a3:0000:0000:8a2e:0370:7334',
              type: string}
            resource_group:
              properties:
                id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
              title: idreference
              type: object
            secondary_addresses:
              description: Collection seconary IP addresses
              example: [10.0.0.6, '2001:0db8:85a3:0000:0000:8a2e:0370:7335']
              items: {description: A secondary IP address, type: string}
              type: array
              x-omitempty: true
            security_groups:
              example:
              - {id: be5df5ca-12a0-494b-907e-aa6ec2bfa271}
              - {crn: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'}
              - {name: allow_ssh}
              items:
                properties:
                  crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                    format: crn, type: string}
                  id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                    format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                    type: string}
                  name: {description: The user-defined name for this resource, example: my-snapshot,
                    format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
                title: reference
                type: object
              type: array
              x-omitempty: true
            subnet:
              description: The associated subnet
              example: {id: 7ec86020-1c6e-4889-b3f0-a15f2e50f87e}
              properties:
                crn: {description: The CRN for this subnet, example: 'crn:v1:staging:public:gt:us-south-1:a/123456::network-interface:10c02d81-0ecb-4dc5-897d-28392913b81e',
                  format: crn, type: string}
                id: {description: The unique identifier for this subnet, example: 10c02d81-0ecb-4dc5-897d-28392913b81e,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
                name: {description: The user-defined name for this subnet, example: my-network-interface,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: SubnetReference
              type: object
            tags:
              description: A collection of tags for this resource
              example: [production, backend]
              items: {description: A tag for the resource, type: string}
              type: array
              x-omitempty: true
          title: NetworkInterfaceTemplate
          type: object
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/instance_network_interface'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a network inferface
      tags: [Compute]
  /instances/{instance_id}/network_interfaces/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes a network interface. This operation cannot
        be reversed.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The network interface identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes specified network_interface
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request retrieves a single network interface specified by
        the identifier in the URL.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The network interface identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/instance_network_interface'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified network interface
      tags: [Compute]
    patch:
      consumes: [application/json]
      description: This request updates a network interface with the information in
        a provided network interface patch. The network interface patch object is
        structured in the same way as a retrieved network interface and can contain
        an updated name and/or port speed.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The network interface identifier, in: path, name: id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema:
          example: {name: my-intf}
          properties:
            name: {description: The user-defined name for this interface, example: my-interface,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            port_speed: {description: The network interface port speed in Mbps, example: 10000,
              type: integer}
          type: object
      produces: [application/json]
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/instance_network_interface'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates a network inferface
      tags: [Compute]
  /instances/{instance_id}/network_interfaces/{id}/tags:
    get:
      consumes: [application/json]
      description: This request retrieves all tags for the resource specified by the
        identifier in the URL.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              tags:
                description: A collection of tags for this resource
                example: [production, backend]
                items: {description: A tag for the resource, type: string}
                type: array
                x-omitempty: true
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all tags for a resource
      tags: [Compute]
  /instances/{instance_id}/network_interfaces/{id}/tags/{tag_name}:
    delete:
      consumes: [application/json]
      description: This request removes a tag from a resource.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Removes a tag from a resource
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request succeeds if a tag exists on the resource and fails
        otherwise.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Checks if a specific tag exists on a specific resource
      tags: [Compute]
    put:
      consumes: [application/json]
      description: This request adds the specified tag to the specified resource.
        A request body is not required, and if supplied, is ignored. It succeeds if
        the tag already exists on the resource.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Sets a tag on a resource
      tags: [Compute]
  /instances/{instance_id}/network_interfaces/{network_interface_id}/floating_ips:
    get:
      consumes: [application/json]
      description: This request retrieves all floating IPs associated with a network
        interface.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The network interface identifier, in: path, name: network_interface_id,
        required: true, type: string}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: The associated floating IPs were retrieved successfully.
          schema:
            description: Collection of floating IPs
            properties:
              floating_ips:
                description: Collection of floating IPs
                items: {$ref: '#/definitions/floating_ip'}
                type: array
                x-omitempty: true
            title: UnpaginatedFloatingIPCollection
            type: object
        404:
          description: A network interface with the specified identifier could not
            be found.
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all floating IPs associated with a network interface
      tags: [Compute]
  /instances/{instance_id}/network_interfaces/{network_interface_id}/floating_ips/{address}:
    delete:
      consumes: [application/json]
      description: This request disassociates the specified floating IP from the specified
        network interface
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The network interface identifier, in: path, name: network_interface_id,
        required: true, type: string}
      - {description: The floating IP address, in: path, name: address, required: true,
        type: string}
      produces: [application/json]
      responses:
        204: {description: The floating IP was disassociated successfully.}
        400:
          description: The specified floating IP could not be disassociated.
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: The specified floating IP address is not associated with the
            network interface with the specified identifier
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Disassociates specified floating IP
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request a retrieves a specified floating IP address if it
        is associated with the network interface and instance specified in the URL
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The network interface identifier, in: path, name: network_interface_id,
        required: true, type: string}
      - {description: The floating IP address, in: path, name: address, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: The associated floating IP was retrieved successfully.
          schema: {$ref: '#/definitions/floating_ip'}
        404:
          description: The floating IP address is not associated with a network interface
            with the specified identifier
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves associated floating IP
      tags: [Compute]
    put:
      consumes: [application/json]
      description: This request associates the specified floating IP with the specified
        network interface
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The network interface identifier, in: path, name: network_interface_id,
        required: true, type: string}
      - {description: The floating IP address, in: path, name: address, required: true,
        type: string}
      produces: [application/json]
      responses:
        201:
          description: The floating IP was successfully associated with the network
            interface.
          schema: {$ref: '#/definitions/floating_ip'}
        400:
          description: The specified floating IP could not be associated with the
            specified network interface.
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Associates a floating IP with a network interface
      tags: [Compute]
  /instances/{instance_id}/volume_attachments:
    get:
      consumes: [application/json]
      description: This request retrieves all volume interfaces for a instance. A
        volume interface is the attachment of a volume to a instance. Each instance
        may have many volume interfaces but each volume interface attaches exactly
        one instance to exactly one volume.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: Filters the collection to resources within the resource group
          of the specified identifier, in: query, name: resource_group.id, required: false,
        type: string}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              volume_attachments:
                description: Collection of volume attachments
                items: {$ref: '#/definitions/instance_volume_attachment'}
                type: array
                x-omitempty: true
            title: VolumeAttachmentCollection
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all volumes attached to a instance
      tags: [Compute]
    post:
      description: This request creates a new volume interface from a volume interface
        template. The volume interface template object is structured in the same way
        as a retrieved volume interface, and contains the information necessary to
        create the new volume interface. The creation of a new volume interface attaches
        a volume to a instance.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema:
          properties:
            name: {description: The user-defined name for this subnet, example: my-subnet,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            resource_group:
              properties:
                id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
              title: idreference
              type: object
            tags:
              description: A collection of tags for this resource
              example: [production, backend]
              items: {description: A tag for the resource, type: string}
              type: array
              x-omitempty: true
            volume:
              description: The identity of the volume to attach to the instance
              example: {id: a4e28308-8ee7-46ab-8108-9f881f22bdbf}
              properties:
                crn: {description: The CRN for this volume, example: 'crn:v1:bluemix:public:rias:us-south:a/123456::volume:a4e28308-8ee7-46ab-8108-9f881f22bdbf',
                  format: crn, type: string}
                id: {description: The unique identifier for this volume, example: a4e28308-8ee7-46ab-8108-9f881f22bdbf,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
                name: {description: The user-defined name for this volume, example: my-volume,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: VolumeIdentity
              type: object
          title: VolumeAttachmentTemplate
          type: object
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/instance_volume_attachment'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a volume interface, attaching a volume to a instance
      tags: [Compute]
  /instances/{instance_id}/volume_attachments/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes a volume interface. The deletion of a volume
        interface detaches a volume from a instance.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The volume interface identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes a volume interface, detaching a volume from a instance
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request retrieves a single volume interface specified by the
        identifier in the URL.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The volume interface identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/instance_volume_attachment'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified volume interface
      tags: [Compute]
    patch:
      consumes: [application/json]
      description: This request updates a volume interface with the information in
        a provided volume interface patch. The volume interface patch object is structured
        in the same way as a retrieved volume interface and can contain an updated
        name and/or bandwidth.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The volume interface identifier, in: path, name: id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema:
          example: {name: my-volumeattachment}
          properties:
            name: {description: The user-defined name for this volumeattachment, example: my-volumeattachment,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
          type: object
      produces: [application/json]
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/instance_volume_attachment'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates a volume inferface
      tags: [Compute]
  /instances/{instance_id}/volume_attachments/{id}/tags:
    get:
      consumes: [application/json]
      description: This request retrieves all tags for the resource specified by the
        identifier in the URL.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              tags:
                description: A collection of tags for this resource
                example: [production, backend]
                items: {description: A tag for the resource, type: string}
                type: array
                x-omitempty: true
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all tags for a resource
      tags: [Compute]
  /instances/{instance_id}/volume_attachments/{id}/tags/{tag_name}:
    delete:
      consumes: [application/json]
      description: This request removes a tag from a resource.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Removes a tag from a resource
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request succeeds if a tag exists on the resource and fails
        otherwise.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Checks if a specific tag exists on a specific resource
      tags: [Compute]
    put:
      consumes: [application/json]
      description: This request adds the specified tag to the specified resource.
        A request body is not required, and if supplied, is ignored. It succeeds if
        the tag already exists on the resource.
      parameters:
      - {description: The instance identifier, in: path, name: instance_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Sets a tag on a resource
      tags: [Compute]
  /keys:
    get:
      consumes: [application/json]
      description: This request retrieves all keys. A key contains a public 2048-bit
        RSA SSH key which may be installed on servers when they are created. Private
        keys are not stored by the system.
      parameters:
      - {description: A server-supplied token determining what resource to start the
          page on, in: query, name: start, required: false, type: string}
      - {default: 50, description: The number of resources to return on a page, format: int32,
        in: query, maximum: 100, minimum: 1, name: limit, required: false, type: integer}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      - {description: Filters the collection to resources within the resource group
          of the specified identifier, in: query, name: resource_group.id, required: false,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              first:
                description: A reference to the first page of resources
                properties:
                  href: {description: The URL for the first page of resources, example: 'http://iaas.bluemix.net/v1/keys?limit=20',
                    format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                    type: string}
                type: object
              keys:
                description: Collection of keys
                items: {$ref: '#/definitions/key'}
                type: array
                x-omitempty: true
              limit: {description: The maximum number of resources can be returned
                  by the request, example: 20, format: int64, maximum: 100, minimum: 1,
                type: integer}
              next: {$ref: '#/definitions/Next'}
              total_count: {description: The total number of resources across all
                  pages, example: 132, format: int64, minimum: 0, type: integer}
            title: KeyCollection
            type: object
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all keys
      tags: [Compute]
    post:
      description: This request imports a new key from a key template containing a
        public 2048-bit RSA SSH key.
      parameters:
      - in: body
        name: body
        required: true
        schema:
          properties:
            name: {description: The user-defined name for this key, example: my-key,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            public_key: {description: A public SSH key to be imported into the system,
              example: AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En,
              type: string}
            resource_group:
              properties:
                id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
              title: idreference
              type: object
            tags:
              description: A collection of tags for this resource
              example: [production, backend]
              items: {description: A tag for the resource, type: string}
              type: array
              x-omitempty: true
            type:
              default: rsa
              description: The cryptosystem used by this key
              enum: [rsa]
              type: string
          title: KeyTemplate
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/key'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a key
      tags: [Compute]
  /keys/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes a key. This operation cannot be reversed.
      parameters:
      - {description: The key identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes specified key
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request retrieves a single key specified by the identifier
        in the URL.
      parameters:
      - {description: The key idenitifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/key'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified key
      tags: [Compute]
    patch:
      consumes: [application/json]
      description: This request updates a key's name.
      parameters:
      - {description: The key identifier, in: path, name: id, required: true, type: string}
      - in: body
        name: body
        required: true
        schema:
          example: {name: my-network-acl}
          properties:
            name: {description: The user-defined name for this key, example: my-network-acl,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
          type: object
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/key'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates specified key
      tags: [Compute]
  /keys/{id}/tags:
    get:
      consumes: [application/json]
      description: This request retrieves all tags for the resource specified by the
        identifier in the URL.
      parameters:
      - {description: The key ID, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              tags:
                description: A collection of tags for this resource
                example: [production, backend]
                items: {description: A tag for the resource, type: string}
                type: array
                x-omitempty: true
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all tags for a resource
      tags: [Compute]
  /keys/{id}/tags/{tag_name}:
    delete:
      consumes: [application/json]
      description: This request removes a tag from a resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Removes a tag from a resource
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request succeeds if a tag exists on the resource and fails
        otherwise.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Checks if a specific tag exists on a specific resource
      tags: [Compute]
    put:
      consumes: [application/json]
      description: This request adds the specified tag to the specified resource.
        A request body is not required, and if supplied, is ignored. It succeeds if
        the tag already exists on the resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Sets a tag on a resource
      tags: [Compute]
  /network_acls:
    get:
      consumes: [application/json]
      description: This request retrieves all network ACLs in the region. A network
        ACL defines a set of packet filtering (5-tuple) rules for all traffic in and
        out of a subnet. Both allow and deny rules can be defined, and rules are stateless
        such that reverse traffic in response to allowed traffic is not automatically
        permitted.
      parameters:
      - {description: A server-supplied token determining what resource to start the
          page on, in: query, name: start, required: false, type: string}
      - {default: 50, description: The number of resources to return on a page, format: int32,
        in: query, maximum: 100, minimum: 1, name: limit, required: false, type: integer}
      - {description: Filters the collection to resources within the resource group
          of the specified identifier, in: query, name: resource_group.id, required: false,
        type: string}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              first:
                description: A reference to the first page of resources
                properties:
                  href: {description: The URL for the first page of resources, example: 'http://iaas.bluemix.net/v1/network_acls?limit=20',
                    format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                    type: string}
                type: object
              limit: {description: The maximum number of resources can be returned
                  by the request, example: 20, format: int64, maximum: 100, minimum: 1,
                type: integer}
              network_acls:
                description: Collection of network ACLs
                items: {$ref: '#/definitions/network_acl'}
                type: array
                x-omitempty: true
              next: {$ref: '#/definitions/Next'}
              total_count: {description: The total number of resources across all
                  pages, example: 132, format: int64, minimum: 0, type: integer}
            title: NetworkACLCollection
            type: object
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all network ACLs
      tags: [Network]
    post:
      description: This request creates a new network ACL from a network ACL template.
        The network ACL template object is structured in the same way as a retrieved
        network ACL, and contains the information necessary to create the new network
        ACL.
      parameters:
      - in: body
        name: body
        required: false
        schema:
          example: {name: my-network-acl}
          properties:
            name: {description: The user-defined name for this network ACL, example: my-network-acl,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            resource_group:
              description: The resource group for this network ACL
              properties:
                id: {description: The unique identifier for this resource group, example: 56969d60-43e9-465c-883c-b9f7363e78e8,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
              title: ResourceGroupIdentity
              type: object
            rules:
              description: Collection of rule templates for rules to be created along
                with the network ACL
              items:
                properties:
                  action:
                    description: Whether to allow or deny matching traffic
                    enum: [allow, deny]
                    type: string
                  code: {description: 'The ICMP traffic code to allow. Valid values
                      from 0 to 255. If unspecified, all codes are allowed. This can
                      only be specified if type is also specified.', type: integer,
                    x-nullable: true}
                  destination: {description: The destination IP address or CIDR block,
                    example: 192.168.0.0/24, type: string}
                  direction:
                    description: Whether the traffic to be matched is ingress or egress
                    enum: [ingress, egress]
                    type: string
                  name: {description: The user-defined name for this network ACL rule,
                    example: my-network-acl-rule-2, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                    type: string}
                  port_max: {description: 'The highest port in the range of ports
                      to be matched; if unspecified, `65535` is used.', example: 65535,
                    type: integer, x-nullable: true}
                  port_min: {description: 'The lowest port in the range of ports to
                      be matched; if unspecified, `1` is used.', example: 49152, type: integer,
                    x-nullable: true}
                  protocol: {description: Must be `all` to match all protocols., example: all,
                    type: string}
                  source: {description: The source IP address or CIDR block, example: 10.0.0.5,
                    type: string}
                  type: {description: 'The ICMP traffic type to allow. Valid values
                      from 0 to 254. If unspecified, all types are allowed by this
                      rule.', example: 8, type: integer, x-nullable: true}
                title: TupleRuleTemplateNetworkACLContext
                type: object
              type: array
              x-omitempty: true
            source_network_acl:
              description: Optional network ACL to copy rules from
              example: {id: a4e28308-8ee7-46ab-8108-9f881f22bdbf}
              properties:
                crn: {description: The CRN for this network ACL, example: 'crn:v1:bluemix:public:rias:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf',
                  format: crn, type: string}
                id: {description: The unique identifier for this network ACL, example: a4e28308-8ee7-46ab-8108-9f881f22bdbf,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
                name: {description: The user-defined name for this network ACL, example: my-network-acl,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: NetworkACLIdentityByName
              type: object
            tags:
              description: A collection of tags for this resource
              example: [production, backend]
              items: {description: A tag for the resource, type: string}
              type: array
              x-omitempty: true
          title: NetworkACLTemplateFromSource
          type: object
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/network_acl'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a network ACL
      tags: [Network]
  /network_acls/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes a network ACL. This operation cannot be reversed.
      parameters:
      - {description: The network ACL identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes specified network ACL
      tags: [Network]
    get:
      consumes: [application/json]
      description: This request retrieves a single network ACL specified by the identifier
        in the URL.
      parameters:
      - {description: The network ACL identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/network_acl'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified network ACL
      tags: [Network]
    patch:
      consumes: [application/json]
      description: This request updates a network ACL's name.
      parameters:
      - {description: The network ACL identifier, in: path, name: id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema:
          example: {name: my-acl}
          properties:
            name: {description: The user-defined name for this acl, example: my-acl,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
          type: object
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/network_acl'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates a network ACL
      tags: [Network]
  /network_acls/{id}/tags:
    get:
      consumes: [application/json]
      description: This request retrieves all tags for the resource specified by the
        identifier in the URL.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              tags:
                description: A collection of tags for this resource
                example: [production, backend]
                items: {description: A tag for the resource, type: string}
                type: array
                x-omitempty: true
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all tags for a resource
      tags: [Network]
  /network_acls/{id}/tags/{tag_name}:
    delete:
      consumes: [application/json]
      description: This request removes a tag from a resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Removes a tag from a resource
      tags: [Network]
    get:
      consumes: [application/json]
      description: This request succeeds if a tag exists on the resource and fails
        otherwise.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Checks if a specific tag exists on a specific resource
      tags: [Network]
    put:
      consumes: [application/json]
      description: This request adds the specified tag to the specified resource.
        A request body is not required, and if supplied, is ignored. It succeeds if
        the tag already exists on the resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Sets a tag on a resource
      tags: [Network]
  /network_acls/{network_acl_id}/rules:
    get:
      consumes: [application/json]
      description: This request retrieves all rules for a network ACL. These rules
        can allow or deny traffic between a source CIDR block and a destination CIDR
        block over a particular protocol and port range.
      parameters:
      - {description: The network ACL identifier, in: path, name: network_acl_id,
        required: true, type: string}
      - {description: A server-supplied token determining what resource to start the
          page on, in: query, name: start, required: false, type: string}
      - {default: 50, description: The number of resources to return on a page, format: int32,
        in: query, maximum: 100, minimum: 1, name: limit, required: false, type: integer}
      - description: Filters the collection to rules with the specified direction
        enum: [ingress, egress]
        in: query
        name: direction
        required: false
        type: string
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              first:
                description: A reference to the first page of resources
                properties:
                  href: {description: The URL for the first page of resources, example: 'http://iaas.bluemix.net/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?limit=20',
                    format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                    type: string}
                type: object
              limit: {description: The maximum number of resources can be returned
                  by the request, example: 20, format: int64, maximum: 100, minimum: 1,
                type: integer}
              next: {$ref: '#/definitions/Next'}
              rules:
                description: Collection of rules
                items: {$ref: '#/definitions/network_acl_rule'}
                type: array
                x-omitempty: true
              total_count: {description: The total number of resources across all
                  pages, example: 132, format: int64, minimum: 0, type: integer}
            title: TupleRuleCollection
            type: object
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all rules for a network ACL
      tags: [Network]
    post:
      description: This request creates a new rule from a rule template. The rule
        template object is structured in the same way as a retrieved rule, and contains
        the information necessary to create the new rule.
      parameters:
      - {description: The network ACL identifier, in: path, name: network_acl_id,
        required: true, type: string}
      - in: body
        name: body
        required: true
        schema:
          properties:
            action:
              description: Whether to allow or deny matching traffic
              enum: [allow, deny]
              type: string
            before: {$ref: '#/definitions/resource_reference'}
            code: {description: 'The ICMP traffic code to allow. Valid values from
                0 to 255. If unspecified, all codes are allowed. This can only be
                specified if type is also specified.', type: integer, x-nullable: true}
            destination: {description: The destination IP address or CIDR block, example: 192.168.0.0/24,
              type: string}
            direction:
              description: Whether the traffic to be matched is ingress or egress
              enum: [ingress, egress]
              type: string
            name: {description: The user-defined name for this public gateway, example: my-gateway,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            port_max: {description: 'The highest port in the range of ports to be
                matched; if unspecified, `65535` is used.', example: 65535, type: integer,
              x-nullable: true}
            port_min: {description: 'The lowest port in the range of ports to be matched;
                if unspecified, `1` is used.', example: 49152, type: integer, x-nullable: true}
            protocol: {description: 'The protocol to be matched. Must be `tcp`, or
                `udp`.', example: tcp, type: string}
            source: {description: The source IP address or CIDR block, example: 10.0.0.5,
              type: string}
            type: {description: 'The ICMP traffic type to allow. Valid values from
                0 to 254. If unspecified, all types are allowed by this rule.', example: 8,
              type: integer, x-nullable: true}
          title: TupleRuleTemplate
          type: object
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/network_acl_rule'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a rule
      tags: [Network]
  /network_acls/{network_acl_id}/rules/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes a rule. This operation cannot be reversed.
      parameters:
      - {description: The network ACL identifier, in: path, name: network_acl_id,
        required: true, type: string}
      - {description: The rule identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes specified rule
      tags: [Network]
    get:
      consumes: [application/json]
      description: This request retrieves a single rule specified by the identifier
        in the URL.
      parameters:
      - {description: The network ACL identifier, in: path, name: network_acl_id,
        required: true, type: string}
      - {description: The rule identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/network_acl_rule'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified rule
      tags: [Network]
    patch:
      consumes: [application/json]
      description: This request updates a rule with the information in a provided
        rule patch. The rule patch object is structured in the same way as a retrieved
        rule and contains only the information to be updated.
      parameters:
      - {description: The network ACL identifier, in: path, name: network_acl_id,
        required: true, type: string}
      - {description: The rule identifier, in: path, name: id, required: true, type: string}
      - in: body
        name: body
        required: true
        schema:
          properties:
            action:
              description: Whether to allow or deny matching traffic
              enum: [allow, deny]
              type: string
            before: {$ref: '#/definitions/resource_reference'}
            code: {description: 'The ICMP traffic code to allow. Valid values from
                0 to 255. If unspecified, all codes are allowed. This can only be
                specified if type is also specified.', type: integer, x-nullable: true}
            destination: {description: The destination IP address or CIDR block, example: 192.168.0.0/24,
              type: string}
            direction:
              description: Whether the traffic to be matched is ingress or egress
              enum: [ingress, egress]
              type: string
            name: {description: The user-defined name for this public gateway, example: my-gateway,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            port_max: {description: 'The highest port in the range of ports to be
                matched; if unspecified, `65535` is used.', example: 65535, type: integer,
              x-nullable: true}
            port_min: {description: 'The lowest port in the range of ports to be matched;
                if unspecified, `1` is used.', example: 49152, type: integer, x-nullable: true}
            protocol: {description: 'The protocol to be matched. Must be `tcp`, or
                `udp`.', example: tcp, type: string}
            source: {description: The source IP address or CIDR block, example: 10.0.0.5,
              type: string}
            type: {description: 'The ICMP traffic type to allow. Valid values from
                0 to 254. If unspecified, all types are allowed by this rule.', example: 8,
              type: integer, x-nullable: true}
          title: TupleRulePatch
          type: object
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/network_acl_rule'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates a rule
      tags: [Network]
  /public_gateways:
    get:
      consumes: [application/json]
      description: This request retrieves all public gateways. A public gateway is
        a virtual network device associated with a VPC which allows access to the
        Internet. A public gateway resides in a zone and can only be connected to
        subnets in the same zone.
      parameters:
      - {description: A server-supplied token determining what resource to start the
          page on, in: query, name: start, required: false, type: string}
      - {default: 50, description: The number of resources to return on a page, format: int32,
        in: query, maximum: 100, minimum: 1, name: limit, required: false, type: integer}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      - {description: Filters the collection to resources within the specified zone,
        in: query, name: zone.name, required: false, type: string}
      - {description: Filters the collection to resources within the VPC of the specified
          identifier, in: query, name: vpc.id, required: false, type: string}
      - {description: Filters the collection to resources within the VPC of the specified
          CRN, in: query, name: vpc.crn, required: false, type: string}
      - {description: Filters the collection to resources within the VPC of the specified
          name, in: query, name: vpc.name, required: false, type: string}
      - {description: Filters the collection to resources within the resource group
          of the specified identifier, in: query, name: resource_group.id, required: false,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              first:
                description: A reference to the first page of resources
                properties:
                  href: {description: The URL for the first page of resources, example: 'http://iaas.bluemix.net/v1/public_gateways?limit=20',
                    format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                    type: string}
                type: object
              limit: {description: The maximum number of resources can be returned
                  by the request, example: 20, format: int64, maximum: 100, minimum: 1,
                type: integer}
              next: {$ref: '#/definitions/Next'}
              public_gateways:
                description: Collection of public gateways
                items: {$ref: '#/definitions/public_gateway'}
                type: array
                x-omitempty: true
              total_count: {description: The total number of resources across all
                  pages, example: 132, format: int64, minimum: 0, type: integer}
            title: PublicGatewayCollection
            type: object
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves public gateways
      tags: [Network]
    post:
      description: This request creates a new public gateway from a public gateway
        template. A public gateway can be created with an existing unbound floating
        address. If a floating address is not supplied, one will be created and bound
        to the public gateway. Once a public gateway is created, its external address
        cannot be unbound. The only way to rebind a floating address bound to a public
        gateway is to delete the gateway.
      parameters:
      - in: body
        name: body
        required: true
        schema:
          properties:
            floating_ip:
              example: {address: 203.0.113.1}
              properties:
                address: {description: The globally unique IP address, example: 203.0.113.1,
                  type: string}
                crn: {description: The CRN for this floating IP, example: 'crn:v1:bluemix:public::us-south::gt:floating-ip:203.0.113.1',
                  format: crn, type: string}
                name: {description: The user-defined name for this floating IP, example: my-floating-ip,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
                tags:
                  description: A collection of tags for this resource
                  example: [production, backend]
                  items: {description: A tag for the resource, type: string}
                  type: array
                  x-omitempty: true
              title: FloatingIPTemplateBasic
              type: object
            name: {description: The user-defined name for this public gateway, example: my-gateway,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            resource_group:
              properties:
                id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
              title: idreference
              type: object
            tags:
              description: A collection of tags for this resource
              example: [production, backend]
              items: {description: A tag for the resource, type: string}
              type: array
              x-omitempty: true
            vpc:
              description: The VPC this public gateway will serve
              properties:
                id: {description: The unique identifier for this VPC, example: 4727d842-f94f-4a2d-824a-9bc9b02c523b,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
              title: VPCIdentity
              type: object
            zone: {$ref: '#/definitions/NameReference'}
          title: PublicGatewayTemplate
          type: object
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/public_gateway'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a public gateway
      tags: [Network]
  /public_gateways/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes a public gateway. This operation cannot be
        reversed.
      parameters:
      - {description: The public gateway identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes specified public gateway
      tags: [Network]
    get:
      consumes: [application/json]
      description: This request retrieves a single public gateway specified by the
        identifier in the URL.
      parameters:
      - {description: The public gateway idenitifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/public_gateway'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified public gateway
      tags: [Network]
    patch:
      consumes: [application/json]
      description: This request updates a public gateway's name.
      parameters:
      - {description: The public gateway identifier, in: path, name: id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema:
          example: {name: my-public_gateway}
          properties:
            name: {description: The user-defined name for this public gateway, example: my-public_gateway,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
          type: object
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/public_gateway'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates a public gateway's name
      tags: [Network]
  /public_gateways/{id}/tags:
    get:
      consumes: [application/json]
      description: This request retrieves all tags for the resource specified by the
        identifier in the URL.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              tags:
                description: A collection of tags for this resource
                example: [production, backend]
                items: {description: A tag for the resource, type: string}
                type: array
                x-omitempty: true
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all tags for a resource
      tags: [Network]
  /public_gateways/{id}/tags/{tag_name}:
    delete:
      consumes: [application/json]
      description: This request removes a tag from a resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Removes a tag from a resource
      tags: [Network]
    get:
      consumes: [application/json]
      description: This request succeeds if a tag exists on the resource and fails
        otherwise.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Checks if a specific tag exists on a specific resource
      tags: [Network]
    put:
      consumes: [application/json]
      description: This request adds the specified tag to the specified resource.
        A request body is not required, and if supplied, is ignored. It succeeds if
        the tag already exists on the resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Sets a tag on a resource
      tags: [Network]
  /regions:
    get:
      consumes: [application/json]
      description: "This request retrieves all regions. Each\_region\_is a separate\
        \ geographic area containing multiple isolated zones. Resources can be provisioned\
        \ into a one or more zones in a region. Each zone is isolated, but connected\
        \ to other zones in the same region with low-latency and high-bandwidth links.\
        \ Regions represent the top-level of fault isolation available. Resources\
        \ deployed within a single region also benefit from the low latency afforded\
        \ by geographic proximity."
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              regions:
                description: Array of Region objects
                items: {$ref: '#/definitions/region'}
                type: array
                x-omitempty: true
            title: RegionCollection
            type: object
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all regions
      tags: [Geography]
  /regions/{name}:
    get:
      consumes: [application/json]
      description: This request retrieves a single region specified by the name in
        the URL.
      parameters:
      - {description: The region name, in: path, name: name, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/region'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves a region
      tags: [Geography]
  /regions/{region_name}/zones:
    get:
      consumes: [application/json]
      description: This request retrieves all zones in a region. Zones represent logically-isolated
        data centers with high-bandwidth, low-latency interconnects to other zones
        in the same region. Faults in a zone do not impact other zones.
      parameters:
      - {description: The region name, in: path, name: region_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              zones:
                description: Collection of zones
                items: {$ref: '#/definitions/zone'}
                type: array
                x-omitempty: true
            title: ZoneCollection
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all zones in a region
      tags: [Geography]
  /regions/{region_name}/zones/{zone_name}:
    get:
      consumes: [application/json]
      description: This request retrieves a single zone specified by the region and
        zone names in the URL.
      parameters:
      - {description: The region name, in: path, name: region_name, required: true,
        type: string}
      - {description: The zone name, in: path, name: zone_name, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/zone'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves a zone
      tags: [Geography]
  /security_groups:
    get:
      consumes: [application/json]
      description: Retrieves a paginated list of all security groups belonging to
        this account.
      parameters:
      - {description: A server-supplied token determining what resource to start the
          page on, in: query, name: start, required: false, type: string}
      - {default: 50, description: The number of resources to return on a page, format: int32,
        in: query, maximum: 100, minimum: 1, name: limit, required: false, type: integer}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      - {description: Filters the collection to resources within the VPC of the specified
          identifier, in: query, name: vpc.id, required: false, type: string}
      - {description: Filters the collection to resources within the VPC of the specified
          CRN, in: query, name: vpc.crn, required: false, type: string}
      - {description: Filters the collection to resources within the VPC of the specified
          name, in: query, name: vpc.name, required: false, type: string}
      - {description: Filters the collection to resources within the resource group
          of the specified identifier, in: query, name: resource_group.id, required: false,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              first:
                description: A reference to the first page of resources
                properties:
                  href: {description: The URL for the first page of resources, example: 'http://iaas.bluemix.net/v1/security_groups?limit=20',
                    format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                    type: string}
                type: object
              limit: {description: The maximum number of resources can be returned
                  by the request, example: 20, format: int64, maximum: 100, minimum: 1,
                type: integer}
              next: {$ref: '#/definitions/Next'}
              security_groups:
                description: Collection of security groups
                items: {$ref: '#/definitions/security_group'}
                type: array
                x-omitempty: true
              total_count: {description: The total number of resources across all
                  pages, example: 132, format: int64, minimum: 0, type: integer}
            title: SecurityGroupCollection
            type: object
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all security groups
      tags: [Network]
    post:
      description: Creates a new security group.
      parameters:
      - in: body
        name: body
        required: true
        schema:
          properties:
            name: {description: 'The user-assigned name of this security group. If
                the user does not provide a name, one will be automatically assigned.
                Security group names must be unique, within the scope of a user account.',
              example: allow_ssh, type: string}
            resource_group:
              properties:
                id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
              title: idreference
              type: object
            rules:
              description: Collection of rule templates for rules to be created along
                with the security group
              items: {$ref: '#/definitions/SecurityGroupRuleTemplate'}
              type: array
              x-omitempty: true
            tags:
              description: A collection of tags for this resource
              example: [production, backend]
              items: {description: A tag for the resource, type: string}
              type: array
              x-omitempty: true
            vpc:
              description: The VPC the server is to be a part of
              example: {id: 4727d842-f94f-4a2d-824a-9bc9b02c523b}
              properties:
                crn: {description: The CRN for this VPC, example: 'crn:v1:bluemix:public:gt::a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b',
                  format: crn, type: string}
                id: {description: The unique identifier for this VPC, example: 4727d842-f94f-4a2d-824a-9bc9b02c523b,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
                name: {description: The user-defined name for this VPC, example: my-vpc,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: VPCIdentityByName
              type: object
          title: SecurityGroupTemplate
          type: object
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/security_group'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a security group
      tags: [Network]
  /security_groups/{id}:
    delete:
      consumes: [application/json]
      description: Deletes a security group. This operation cannot be reversed.
      parameters:
      - {description: The security group identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes a security group
      tags: [Network]
    get:
      consumes: [application/json]
      description: Retrieves a single security group specified by the identifier in
        the URL path.
      parameters:
      - {description: The security group identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/security_group'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves a security group
      tags: [Network]
    patch:
      consumes: [application/json]
      description: Updates the properties of an existing security group.
      parameters:
      - {description: The security group identifier, in: path, name: id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema:
          properties:
            name: {description: The user-defined name for this security group, example: my-sg,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
          type: object
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/security_group'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates a security group
      tags: [Network]
  /security_groups/{id}/tags:
    get:
      consumes: [application/json]
      description: This request retrieves all tags for the resource specified by the
        identifier in the URL.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              tags:
                description: A collection of tags for this resource
                example: [production, backend]
                items: {description: A tag for the resource, type: string}
                type: array
                x-omitempty: true
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all tags for a resource
      tags: [Network]
  /security_groups/{id}/tags/{tag_name}:
    delete:
      consumes: [application/json]
      description: This request removes a tag from a resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Removes a tag from a resource
      tags: [Network]
    get:
      consumes: [application/json]
      description: This request succeeds if a tag exists on the resource and fails
        otherwise.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Checks if a specific tag exists on a specific resource
      tags: [Network]
    put:
      consumes: [application/json]
      description: This request adds the specified tag to the specified resource.
        A request body is not required, and if supplied, is ignored. It succeeds if
        the tag already exists on the resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Sets a tag on a resource
      tags: [Network]
  /security_groups/{security_group_id}/network_interfaces:
    get:
      consumes: [application/json]
      description: Retrieves a paginated collection of all the network interfaces
        in a security group.
      parameters:
      - {description: The security group identifier, in: path, name: security_group_id,
        required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              network_interfaces:
                description: Collection of network interfaces
                items: {$ref: '#/definitions/instance_network_interface'}
                type: array
                x-omitempty: true
            title: NetworkInterfaceCollection
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves a security group's network interfaces
      tags: [Network]
  /security_groups/{security_group_id}/network_interfaces/{id}:
    delete:
      consumes: [application/json]
      description: Removes a network interface from a security group.
      parameters:
      - {description: The security group identifier, in: path, name: security_group_id,
        required: true, type: string}
      - {description: The network interface identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Removes a network interface from a security group.
      tags: [Network]
    get:
      consumes: [application/json]
      description: Gets a network interface in a security group.
      parameters:
      - {description: The security group identifier, in: path, name: security_group_id,
        required: true, type: string}
      - {description: The network interface identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/instance_network_interface'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Get a network interface in a security group
      tags: [Network]
    put:
      consumes: [application/json]
      description: Adds an existing network interface to an existing security group.
      parameters:
      - {description: The security group identifier, in: path, name: security_group_id,
        required: true, type: string}
      - {description: The network interface identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/instance_network_interface'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Adds a network interface to a security group
      tags: [Network]
  /security_groups/{security_group_id}/rules:
    get:
      consumes: [application/json]
      description: Retrieves all the rules of a particular security group.
      parameters:
      - {description: The security group identifier, in: path, name: security_group_id,
        required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            description: Collection of rules in a security group
            properties:
              rules:
                description: Array of rules
                items: {$ref: '#/definitions/security_group_rule'}
                type: array
                x-omitempty: true
            title: SecurityGroupRuleCollection
            type: object
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all the rules of a security group
      tags: [Network]
    post:
      description: Creates a new rule on an existing security group.
      parameters:
      - {description: The security group identifier, in: path, name: security_group_id,
        required: true, type: string}
      - in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/SecurityGroupRuleTemplate'}
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/security_group_rule'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a security group rule
      tags: [Network]
  /security_groups/{security_group_id}/rules/{id}:
    delete:
      consumes: [application/json]
      description: Deletes a rule from a security group. This operation cannot be
        reversed.
      parameters:
      - {description: The security group identifier, in: path, name: security_group_id,
        required: true, type: string}
      - {description: The rule identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes a security group rule
      tags: [Network]
    get:
      consumes: [application/json]
      description: Retrieves a single security group rule specified by identifier.
      parameters:
      - {description: The security group identifier, in: path, name: security_group_id,
        required: true, type: string}
      - {description: The rule identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/security_group_rule'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves a security group rule
      tags: [Network]
    patch:
      consumes: [application/json]
      description: Updates the properties of an existing rule on a security group.
      parameters:
      - {description: The security group identifier, in: path, name: security_group_id,
        required: true, type: string}
      - {description: The rule identifier, in: path, name: id, required: true, type: string}
      - in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/SecurityGroupRuleTemplate'}
      produces: [application/json]
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/security_group_rule'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates a security group rule
      tags: [Network]
  /server/profiles:
    get:
      consumes: [application/json]
      description: This request retrieves all server profiles available in the region.
        A server profile specifies the performance characteristics and pricing model
        for a server.
      parameters:
      - {description: A server-supplied token determining what resource to start the
          page on, in: query, name: start, required: false, type: string}
      - {default: 50, description: The number of resources to return on a page, format: int32,
        in: query, maximum: 100, minimum: 1, name: limit, required: false, type: integer}
      produces: [application/json]
      responses:
        200:
          description: Server profiles retrieved successfully
          schema:
            properties:
              first:
                properties:
                  href: {example: 'https://iaas.bluemix.net/v1/server/profiles?limit=20'}
              limit: {description: The maximum number of resources can be returned
                  by the request, example: 20, format: int64, maximum: 100, minimum: 1,
                type: integer}
              next: {$ref: '#/definitions/Next'}
              profiles:
                description: Collection of server profiels
                items: {$ref: '#/definitions/server_profile'}
                type: array
                x-omitempty: true
              total_count: {description: The total number of resources across all
                  pages, example: 132, format: int64, minimum: 0, type: integer}
            title: ServerProfileCollection
            type: object
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all server profiles
      tags: [Compute]
  /server/profiles/{name}:
    get:
      consumes: [application/json]
      description: This request retrieves a single server profile specified by the
        name in the URL.
      parameters:
      - {description: The server profile name, in: path, name: name, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/server_profile'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified server action
      tags: [Compute]
  /servers:
    get:
      consumes: [application/json]
      description: This request retrieves all servers in the region.
      parameters:
      - {description: A server-supplied token determining what resource to start the
          page on, in: query, name: start, required: false, type: string}
      - {default: 50, description: The number of resources to return on a page, format: int32,
        in: query, maximum: 100, minimum: 1, name: limit, required: false, type: integer}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      - {description: Filters the collection to resources within the specified zone,
        in: query, name: zone.name, required: false, type: string}
      - {description: Filters the collection to resources within the VPC of the specified
          identifier, in: query, name: vpc.id, required: false, type: string}
      - {description: Filters the collection to resources within the VPC of the specified
          CRN, in: query, name: vpc.crn, required: false, type: string}
      - {description: Filters the collection to resources within the VPC of the specified
          name, in: query, name: vpc.name, required: false, type: string}
      - {description: Filters the collection to servers on the subnet of the specified
          identifier, in: query, name: network_interfaces.subnet.id, required: false,
        type: string}
      - {description: Filters the collection to servers on the subnet of the specified
          CRN, in: query, name: network_interfaces.subnet.crn, required: false, type: string}
      - {description: Filters the collection to servers on the subnet of the specified
          name, in: query, name: network_interfaces.subnet.name, required: false,
        type: string}
      - {description: Filters the collection to resources within the resource group
          of the specified identifier, in: query, name: resource_group.id, required: false,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              first:
                description: A reference to the first page of resources
                properties:
                  href: {description: The URL for the first page of resources, example: 'http://iaas.bluemix.net/v1/servers?limit=20',
                    format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                    type: string}
                type: object
              limit: {description: The maximum number of resources can be returned
                  by the request, example: 20, format: int64, maximum: 100, minimum: 1,
                type: integer}
              next: {$ref: '#/definitions/Next'}
              servers:
                description: Collection of servers
                items: {$ref: '#/definitions/server'}
                type: array
                x-omitempty: true
              total_count: {description: The total number of resources across all
                  pages, example: 132, format: int64, minimum: 0, type: integer}
            title: ServerCollection
            type: object
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all servers
      tags: [Compute]
    post:
      description: This request provisions a new server for a server template. The
        server template object is structured in the same way as a retrieved server,
        and contains the information necessary to provision the new server
      parameters:
      - in: body
        name: body
        required: true
        schema:
          example:
            flavor: {name: a1.4x64}
            image: {name: my-image}
            keys:
            - {fingerprint: yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY}
            type: virtual
            vpc: {name: my-vpc}
          properties:
            boot_volume_attachment:
              description: The boot volume interface for the server
              properties:
                name: {description: The user-defined name for this volume interface,
                  example: my-volume-interface, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                  type: string}
                resource_group:
                  properties:
                    id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                      format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                      type: string}
                  title: idreference
                  type: object
                tags:
                  description: A collection of tags for this resource
                  example: [production, backend]
                  items: {description: A tag for the resource, type: string}
                  type: array
                  x-omitempty: true
                volume:
                  description: The identity of the volume to attach to the server
                    or a template for a new volume
                  properties:
                    auto_delete: {default: false, description: 'If set to true, this
                        volume will be automatically deleted if the only server it
                        is attached to is deleted', type: boolean}
                    billing_term:
                      default: hourly
                      description: The billing term for the volume
                      enum: [hourly, monthly]
                      example: hourly
                      type: string
                    capacity: {default: 100, description: The capacity of the volume
                        in gigabytes, example: 100, maximum: 64000, minimum: 10, type: integer}
                    crn: {description: The CRN for this volume, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5',
                      format: crn, type: string}
                    encryption_key:
                      description: The encryption key for the volume
                      properties:
                        crn: {description: The CRN for the volume encryption key,
                          example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::encryption-key:1a6b7274-678d-4dfb-8981-c71dd9d4daa5',
                          format: crn, type: string}
                      title: VolumeEncryptionKey
                      type: object
                    id: {description: The unique identifier for this volume, example: 1a6b7274-678d-4dfb-8981-c71dd9d4daa5,
                      format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                      type: string}
                    iops:
                      description: The bandwidth for the volume
                      enum: [1000, 10000, 100000]
                      type: integer
                    name: {description: The user-defined name for this volume, example: my-volume,
                      format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
                    profile:
                      properties:
                        crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                          format: crn, type: string}
                        name: {description: The user-defined name for this resource,
                          example: my-snapshot, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                          type: string}
                      title: reference
                      type: object
                    resource_group:
                      properties:
                        id: {description: The unique identifier for this resource,
                          example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f, format: uuid,
                          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                          type: string}
                      title: idreference
                      type: object
                    source_snapshot:
                      properties:
                        crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                          format: crn, type: string}
                        id: {description: The unique identifier for this resource,
                          example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f, format: uuid,
                          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                          type: string}
                        name: {description: The user-defined name for this resource,
                          example: my-snapshot, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                          type: string}
                      title: reference
                      type: object
                    tags:
                      description: A collection of tags for this resource
                      example: [production, backend]
                      items: {description: A tag for the resource, type: string}
                      type: array
                      x-omitempty: true
                    type:
                      description: The volume type
                      enum: [boot, data]
                      type: string
                  title: BootVolumeTemplateServerContext
                  type: object
              title: VolumeAttachmentTemplateServerContext
              type: object
            flavor:
              default: {name: u1.1x2}
              description: The identity of the flavor the server is to have
              example: {name: a1.4x64}
              properties:
                crn: {description: The CRN for this flavor, example: 'crn:v1:bluemix:public::us-south-1::gt:flavor:a1.4x64',
                  format: crn, type: string}
                name: {default: u1.1x2, description: The name for this flavor, example: a1.4x64,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_.]*$', type: string}
              title: FlavorIdentityByCRN
            generation: {$ref: '#/definitions/generation'}
            image:
              description: The the identity of the image to be used when provisioning
                the server
              example: {id: 72b27b5c-f4b0-48bb-b954-5becc7c1dcb8}
              properties:
                crn: {description: The CRN for this image, example: 'crn:v1:bluemix:public:rias:us-south-1:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8',
                  format: crn, type: string}
                id: {description: The unique identifier for this image, example: 72b27b5c-f4b0-48bb-b954-5becc7c1dcb8,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
                name: {description: The user-defined name for this image, example: my-image,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: ImageIdentityByName
              type: object
            keys:
              description: The public SSH keys to install on the server; if no keys
                are provided the server will be inaccessible unless the image used
                provides a means of access
              example:
              - {id: a6b1a881-2ce8-41a3-80fc-36316a73f803}
              items:
                properties:
                  crn: {description: The CRN for this key, example: 'crn:v1:bluemix:public:gt::a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803',
                    format: crn, type: string}
                  fingerprint: {description: The SHA256 fingerprint of the public
                      key, example: yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY, type: string}
                  id: {description: The unique identifier for this key, example: a6b1a881-2ce8-41a3-80fc-36316a73f803,
                    format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                    type: string}
                  name: {description: The user-defined name for this key, example: my-key,
                    format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
                title: KeyIdentityByFingerprint
                type: object
              type: array
              x-omitempty: true
            name: {description: The user-defined name for this server, example: my-server,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            network_interfaces:
              description: Collection of network interfaces to create for the server
              items:
                description: network interface
                properties:
                  name: {description: The user-defined name for this network interface,
                    example: my-network-interface, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                    type: string}
                  port_speed: {description: The network interface port speed in Mbps,
                    example: 10000, type: integer}
                  primary_ipv4_address: {description: The primary IPv4 address, example: 10.0.0.5,
                    type: string}
                  primary_ipv6_address: {description: The primary IPv6 address in
                      any valid notation as specified by RFC 4291, example: '2001:0db8:85a3:0000:0000:8a2e:0370:7334',
                    type: string}
                  resource_group:
                    properties:
                      id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                        type: string}
                    title: idreference
                    type: object
                  secondary_addresses:
                    description: Collection seconary IP addresses
                    example: [10.0.0.6, '2001:0db8:85a3:0000:0000:8a2e:0370:7335']
                    items: {description: A secondary IP address, type: string}
                    type: array
                    x-omitempty: true
                  security_groups:
                    items:
                      properties:
                        crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                          format: crn, type: string}
                        id: {description: The unique identifier for this resource,
                          example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f, format: uuid,
                          pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                          type: string}
                        name: {description: The user-defined name for this resource,
                          example: my-snapshot, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                          type: string}
                      title: reference
                      type: object
                    type: array
                    x-omitempty: true
                  subnet:
                    properties:
                      crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                        format: crn, type: string}
                      id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                        type: string}
                      name: {description: The user-defined name for this resource,
                        example: my-snapshot, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                        type: string}
                    title: reference
                    type: object
                  tags:
                    description: A collection of tags for this resource
                    example: [production, backend]
                    items: {description: A tag for the resource, type: string}
                    type: array
                    x-omitempty: true
                title: PrimaryNetworkInterfaceTemplate
                type: object
              type: array
              x-omitempty: true
            primary_network_interface:
              description: Primary network interface
              properties:
                floating_ips:
                  description: Optional array of identities and/or templates of floating
                    IPs to associate with this network interface
                  example:
                  - {name: my-new-floating-ip}
                  items:
                    properties:
                      address: {description: The globally unique IP address, example: 203.0.113.1,
                        type: string}
                      crn: {description: The CRN for this floating IP, example: 'crn:v1:bluemix:public::us-south::gt:floating-ip:203.0.113.1',
                        format: crn, type: string}
                      name: {description: The user-defined name for this floating
                          IP, example: my-floating-ip, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                        type: string}
                      resource_group:
                        properties:
                          id: {description: The unique identifier for this resource,
                            example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f, format: uuid,
                            pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                            type: string}
                        title: idreference
                        type: object
                      tags:
                        description: A collection of tags for this resource
                        example: [production, backend]
                        items: {description: A tag for the resource, type: string}
                        type: array
                        x-omitempty: true
                    title: FloatingIPTemplateBasic
                    type: object
                  type: array
                  x-omitempty: true
                name: {description: The user-defined name for this network interface,
                  example: my-network-interface, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                  type: string}
                port_speed: {description: The network interface port speed in Mbps,
                  example: 10000, type: integer}
                primary_ipv4_address: {description: The primary IPv4 address, example: 10.0.0.5,
                  type: string}
                primary_ipv6_address: {description: The primary IPv6 address in any
                    valid notation as specified by RFC 4291, example: '2001:0db8:85a3:0000:0000:8a2e:0370:7334',
                  type: string}
                resource_group:
                  properties:
                    id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                      format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                      type: string}
                  title: idreference
                  type: object
                secondary_addresses:
                  description: Collection seconary IP addresses
                  example: [10.0.0.6, '2001:0db8:85a3:0000:0000:8a2e:0370:7335']
                  items: {description: A secondary IP address, type: string}
                  type: array
                  x-omitempty: true
                security_groups:
                  items:
                    properties:
                      crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                        format: crn, type: string}
                      id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                        type: string}
                      name: {description: The user-defined name for this resource,
                        example: my-snapshot, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                        type: string}
                    title: reference
                    type: object
                  type: array
                  x-omitempty: true
                subnet:
                  properties:
                    crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                      format: crn, type: string}
                    id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                      format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                      type: string}
                    name: {description: The user-defined name for this resource, example: my-snapshot,
                      format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
                  title: reference
                  type: object
                tags:
                  description: A collection of tags for this resource
                  example: [production, backend]
                  items: {description: A tag for the resource, type: string}
                  type: array
                  x-omitempty: true
              title: PrimaryNetworkInterfaceTemplate
              type: object
            profile:
              properties:
                crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                  format: crn, type: string}
                name: {description: The user-defined name for this resource, example: my-snapshot,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: reference
              type: object
            resource_group:
              properties:
                id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
              title: idreference
              type: object
            tags:
              description: A collection of tags for this resource
              example: [production, backend]
              items: {description: A tag for the resource, type: string}
              type: array
              x-omitempty: true
            type:
              default: virtual
              description: Server Type
              enum: [virtual]
              type: string
            user_data: {description: User data to be made available when setting up
                the server, type: string}
            volume_attachments:
              description: Collection of volume interfaces
              items:
                description: The boot volume interface for the server
                properties:
                  name: {description: The user-defined name for this volume interface,
                    example: my-volume-interface, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                    type: string}
                  resource_group:
                    properties:
                      id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                        type: string}
                    title: idreference
                    type: object
                  tags:
                    description: A collection of tags for this resource
                    example: [production, backend]
                    items: {description: A tag for the resource, type: string}
                    type: array
                    x-omitempty: true
                  volume:
                    description: The identity of the volume to attach to the server
                      or a template for a new volume
                    properties:
                      auto_delete: {default: false, description: 'If set to true,
                          this volume will be automatically deleted if the only server
                          it is attached to is deleted', type: boolean}
                      billing_term:
                        default: hourly
                        description: The billing term for the volume
                        enum: [hourly, monthly]
                        example: hourly
                        type: string
                      capacity: {default: 100, description: The capacity of the volume
                          in gigabytes, example: 100, maximum: 64000, minimum: 10,
                        type: integer}
                      crn: {description: The CRN for this volume, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5',
                        format: crn, type: string}
                      encryption_key:
                        description: The encryption key for the volume
                        properties:
                          crn: {description: The CRN for the volume encryption key,
                            example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::encryption-key:1a6b7274-678d-4dfb-8981-c71dd9d4daa5',
                            format: crn, type: string}
                        title: VolumeEncryptionKey
                        type: object
                      id: {description: The unique identifier for this volume, example: 1a6b7274-678d-4dfb-8981-c71dd9d4daa5,
                        format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                        type: string}
                      iops:
                        description: The bandwidth for the volume
                        enum: [1000, 10000, 100000]
                        type: integer
                      name: {description: The user-defined name for this volume, example: my-volume,
                        format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
                      profile:
                        properties:
                          crn: {description: The CRN for this profile, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                            format: crn, type: string}
                          name: {description: The user-defined name for this resource,
                            example: my-snapshot, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                            type: string}
                        title: reference
                        type: object
                      resource_group:
                        properties:
                          id: {description: The unique identifier for this resource,
                            example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f, format: uuid,
                            pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                            type: string}
                        title: idreference
                        type: object
                      source_snapshot:
                        properties:
                          crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                            format: crn, type: string}
                          id: {description: The unique identifier for this resource,
                            example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f, format: uuid,
                            pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                            type: string}
                          name: {description: The user-defined name for this resource,
                            example: my-snapshot, format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
                            type: string}
                        title: reference
                        type: object
                      tags:
                        description: A collection of tags for this resource
                        example: [production, backend]
                        items: {description: A tag for the resource, type: string}
                        type: array
                        x-omitempty: true
                      type:
                        description: The volume type
                        enum: [boot, data]
                        type: string
                    title: BootVolumeTemplateServerContext
                    type: object
                title: VolumeAttachmentTemplateServerContext
                type: object
              type: array
              x-omitempty: true
            vpc:
              description: The VPC the server is to be a part of
              example: {id: 4727d842-f94f-4a2d-824a-9bc9b02c523b}
              properties:
                crn: {description: The CRN for this VPC, example: 'crn:v1:bluemix:public:gt::a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b',
                  format: crn, type: string}
                id: {description: The unique identifier for this VPC, example: 4727d842-f94f-4a2d-824a-9bc9b02c523b,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
                name: {description: The user-defined name for this VPC, example: my-vpc,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: VPCIdentityByName
              type: object
            zone: {$ref: '#/definitions/NameReference'}
          title: ServerFromImageTemplate
          type: object
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/server'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a server
      tags: [Compute]
  /servers/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes a server. This operation cannot be reversed.
      parameters:
      - {description: The server identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes specified server
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request retrieves a single server specified by the identifier
        in the URL.
      parameters:
      - {description: The server identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/server'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves a server
      tags: [Compute]
    patch:
      consumes: [application/json]
      description: This request updates a server with the information in a provided
        server patch. The server patch object is structured in the same way as a retrieved
        server and contains only the information to be updated.
      parameters:
      - {description: The server identifier, in: path, name: id, required: true, type: string}
      - in: body
        name: body
        required: true
        schema:
          properties:
            name: {description: The user-defined name for this network ACL, example: my-network-acl,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            profile:
              properties:
                crn: {description: The CRN for this profile, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                  format: crn, type: string}
                name: {description: The user-defined name for this resource, example: my-snapshot,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: reference
              type: object
          type: object
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/server'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates specified server
      tags: [Compute]
  /servers/{id}/tags:
    get:
      consumes: [application/json]
      description: This request retrieves all tags for the resource specified by the
        identifier in the URL.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              tags:
                description: A collection of tags for this resource
                example: [production, backend]
                items: {description: A tag for the resource, type: string}
                type: array
                x-omitempty: true
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all tags for a resource
      tags: [Compute]
  /servers/{id}/tags/{tag_name}:
    delete:
      consumes: [application/json]
      description: This request removes a tag from a resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Removes a tag from a resource
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request succeeds if a tag exists on the resource and fails
        otherwise.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Checks if a specific tag exists on a specific resource
      tags: [Compute]
    put:
      consumes: [application/json]
      description: This request adds the specified tag to the specified resource.
        A request body is not required, and if supplied, is ignored. It succeeds if
        the tag already exists on the resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Sets a tag on a resource
      tags: [Compute]
  /servers/{server_id}/actions:
    get:
      consumes: [application/json]
      description: This request retrieves all pending, running, and recent actions
        on a server.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: A server-supplied token determining what resource to start the
          page on, in: query, name: start, required: false, type: string}
      - {default: 50, description: The number of resources to return on a page, format: int32,
        in: query, maximum: 100, minimum: 1, name: limit, required: false, type: integer}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              actions:
                description: Collection of server actions
                items: {$ref: '#/definitions/server_action'}
                type: array
                x-omitempty: true
              first:
                description: A reference to the first page of resources
                properties:
                  href: {description: The URL for the first page of resources, example: 'http://iaas.bluemix.net/v1/servers/1e09281b-f177-46fb-baf1-bc152b2e391a/actions?limit=20',
                    format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                    type: string}
                type: object
              limit: {description: The maximum number of resources can be returned
                  by the request, example: 20, format: int64, maximum: 100, minimum: 1,
                type: integer}
              next: {$ref: '#/definitions/Next'}
              total_count: {description: The total number of resources across all
                  pages, example: 132, format: int64, minimum: 0, type: integer}
            title: ServerActionCollection
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all actions on a server
      tags: [Compute]
    post:
      description: This request creates a new action which will be queued up to run
        as soon as any currently pending or running actions have completed.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema:
          properties:
            type:
              description: The type of action
              enum: [start, stop, reboot, reset]
              type: string
          title: ServerActionTemplate
          type: object
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/server_action'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a new action
      tags: [Compute]
  /servers/{server_id}/actions/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes a server action. It will only succeed if the
        action is currently pending.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The server action identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes a pending action, preventing it from running
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request retrieves a single server action specified by the
        identifier in the URL.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The server action identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/server_action'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified server action
      tags: [Compute]
  /servers/{server_id}/network_interfaces:
    get:
      consumes: [application/json]
      description: This request retrieves all network interfaces on a server. A network
        interface is an abstract representation of a network interface card and connects
        a server to a subnet. Servers may have more than one network interface, but
        each network interface can be attached to only one subnet.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: Filters the collection to resources within the resource group
          of the specified identifier, in: query, name: resource_group.id, required: false,
        type: string}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              network_interfaces:
                description: Collection of network interfaces
                items: {$ref: '#/definitions/server_network_interface'}
                type: array
                x-omitempty: true
            title: NetworkInterfaceCollection
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all network interfaces on a server
      tags: [Compute]
    post:
      description: This request creates a new network interface from a network interface
        template. The specified subnet must reside in the same VPC as the server.
        The network interface template object is structured in the same way as a retrieved
        network interface, and contains the information necessary to create the new
        network interface. Each primary and secondary address in the network interface
        must be contained by one of the specified subnet's CIDR blocks.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema:
          example:
            total_ipv4_address_count: 256
            vpc: {id: 4727d842-f94f-4a2d-824a-9bc9b02c523b}
            zone: {name: us-south-1}
          properties:
            name: {description: The user-defined name for this interface, example: my-interface,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            port_speed: {description: The network interface port speed in Mbps, example: 10000,
              type: integer}
            primary_ipv4_address: {description: The primary IPv4 address, example: 10.0.0.5,
              type: string}
            primary_ipv6_address: {description: The primary IPv6 address in any valid
                notation as specified by RFC 4291, example: '2001:0db8:85a3:0000:0000:8a2e:0370:7334',
              type: string}
            resource_group:
              properties:
                id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
              title: idreference
              type: object
            secondary_addresses:
              description: Collection seconary IP addresses
              example: [10.0.0.6, '2001:0db8:85a3:0000:0000:8a2e:0370:7335']
              items: {description: A secondary IP address, type: string}
              type: array
              x-omitempty: true
            security_groups:
              example:
              - {id: be5df5ca-12a0-494b-907e-aa6ec2bfa271}
              - {crn: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271'}
              - {name: allow_ssh}
              items:
                properties:
                  crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                    format: crn, type: string}
                  id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                    format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                    type: string}
                  name: {description: The user-defined name for this resource, example: my-snapshot,
                    format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
                title: reference
                type: object
              type: array
              x-omitempty: true
            subnet:
              description: The associated subnet
              example: {id: 7ec86020-1c6e-4889-b3f0-a15f2e50f87e}
              properties:
                crn: {description: The CRN for this subnet, example: 'crn:v1:staging:public:gt:us-south-1:a/123456::network-interface:10c02d81-0ecb-4dc5-897d-28392913b81e',
                  format: crn, type: string}
                id: {description: The unique identifier for this subnet, example: 10c02d81-0ecb-4dc5-897d-28392913b81e,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
                name: {description: The user-defined name for this subnet, example: my-network-interface,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: SubnetReference
              type: object
            tags:
              description: A collection of tags for this resource
              example: [production, backend]
              items: {description: A tag for the resource, type: string}
              type: array
              x-omitempty: true
          title: NetworkInterfaceTemplate
          type: object
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/server_network_interface'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a network inferface
      tags: [Compute]
  /servers/{server_id}/network_interfaces/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes a network interface. This operation cannot
        be reversed.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The network interface identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes specified network_interface
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request retrieves a single network interface specified by
        the identifier in the URL.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The network interface identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/server_network_interface'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified network interface
      tags: [Compute]
    patch:
      consumes: [application/json]
      description: This request updates a network interface with the information in
        a provided network interface patch. The network interface patch object is
        structured in the same way as a retrieved network interface and can contain
        an updated name and/or port speed.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The network interface identifier, in: path, name: id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema:
          example: {name: my-intf}
          properties:
            name: {description: The user-defined name for this interface, example: my-interface,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            port_speed: {description: The network interface port speed in Mbps, example: 10000,
              type: integer}
          type: object
      produces: [application/json]
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/server_network_interface'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates a network inferface
      tags: [Compute]
  /servers/{server_id}/network_interfaces/{id}/tags:
    get:
      consumes: [application/json]
      description: This request retrieves all tags for the resource specified by the
        identifier in the URL.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              tags:
                description: A collection of tags for this resource
                example: [production, backend]
                items: {description: A tag for the resource, type: string}
                type: array
                x-omitempty: true
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all tags for a resource
      tags: [Compute]
  /servers/{server_id}/network_interfaces/{id}/tags/{tag_name}:
    delete:
      consumes: [application/json]
      description: This request removes a tag from a resource.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Removes a tag from a resource
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request succeeds if a tag exists on the resource and fails
        otherwise.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Checks if a specific tag exists on a specific resource
      tags: [Compute]
    put:
      consumes: [application/json]
      description: This request adds the specified tag to the specified resource.
        A request body is not required, and if supplied, is ignored. It succeeds if
        the tag already exists on the resource.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Sets a tag on a resource
      tags: [Compute]
  /servers/{server_id}/network_interfaces/{network_interface_id}/floating_ips:
    get:
      consumes: [application/json]
      description: This request retrieves all floating IPs associated with a network
        interface.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The network interface identifier, in: path, name: network_interface_id,
        required: true, type: string}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: The associated floating IPs were retrieved successfully.
          schema:
            description: Collection of floating IPs
            properties:
              floating_ips:
                description: Collection of floating IPs
                items: {$ref: '#/definitions/floating_ip'}
                type: array
                x-omitempty: true
            title: UnpaginatedFloatingIPCollection
            type: object
        404:
          description: A network interface with the specified identifier could not
            be found.
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all floating IPs associated with a network interface
      tags: [Compute]
  /servers/{server_id}/network_interfaces/{network_interface_id}/floating_ips/{address}:
    delete:
      consumes: [application/json]
      description: This request disassociates the specified floating IP from the specified
        network interface
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The network interface identifier, in: path, name: network_interface_id,
        required: true, type: string}
      - {description: The floating IP address, in: path, name: address, required: true,
        type: string}
      produces: [application/json]
      responses:
        204: {description: The floating IP was disassociated successfully.}
        400:
          description: The specified floating IP could not be disassociated.
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: The specified floating IP address is not associated with the
            network interface with the specified identifier
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Disassociates specified floating IP
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request a retrieves a specified floating IP address if it
        is associated with the network interface and server specified in the URL
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The network interface identifier, in: path, name: network_interface_id,
        required: true, type: string}
      - {description: The floating IP address, in: path, name: address, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: The associated floating IP was retrieved successfully.
          schema: {$ref: '#/definitions/floating_ip'}
        404:
          description: The floating IP address is not associated with a network interface
            with the specified identifier
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves associated floating IP
      tags: [Compute]
    put:
      consumes: [application/json]
      description: This request associates the specified floating IP with the specified
        network interface
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The network interface identifier, in: path, name: network_interface_id,
        required: true, type: string}
      - {description: The floating IP address, in: path, name: address, required: true,
        type: string}
      produces: [application/json]
      responses:
        201:
          description: The floating IP was successfully associated with the network
            interface.
          schema: {$ref: '#/definitions/floating_ip'}
        400:
          description: The specified floating IP could not be associated with the
            specified network interface.
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Associates a floating IP with a network interface
      tags: [Compute]
  /servers/{server_id}/volume_attachments:
    get:
      consumes: [application/json]
      description: This request retrieves all volume interfaces for a server. A volume
        interface is the attachment of a volume to a server. Each server may have
        many volume interfaces but each volume interface attaches exactly one server
        to exactly one volume.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: Filters the collection to resources within the resource group
          of the specified identifier, in: query, name: resource_group.id, required: false,
        type: string}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              volume_attachments:
                description: Collection of volume attachments
                items: {$ref: '#/definitions/server_volume_attachment'}
                type: array
                x-omitempty: true
            title: VolumeAttachmentCollection
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all volumes attached to a server
      tags: [Compute]
    post:
      description: This request creates a new volume interface from a volume interface
        template. The volume interface template object is structured in the same way
        as a retrieved volume interface, and contains the information necessary to
        create the new volume interface. The creation of a new volume interface attaches
        a volume to a server.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema:
          properties:
            name: {description: The user-defined name for this subnet, example: my-subnet,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            resource_group:
              properties:
                id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
              title: idreference
              type: object
            tags:
              description: A collection of tags for this resource
              example: [production, backend]
              items: {description: A tag for the resource, type: string}
              type: array
              x-omitempty: true
            volume:
              description: The identity of the volume to attach to the server
              example: {id: a4e28308-8ee7-46ab-8108-9f881f22bdbf}
              properties:
                crn: {description: The CRN for this volume, example: 'crn:v1:bluemix:public:rias:us-south:a/123456::volume:a4e28308-8ee7-46ab-8108-9f881f22bdbf',
                  format: crn, type: string}
                id: {description: The unique identifier for this volume, example: a4e28308-8ee7-46ab-8108-9f881f22bdbf,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
                name: {description: The user-defined name for this volume, example: my-volume,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: VolumeIdentity
              type: object
          title: VolumeAttachmentTemplate
          type: object
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/server_volume_attachment'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a volume interface, attaching a volume to a server
      tags: [Compute]
  /servers/{server_id}/volume_attachments/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes a volume interface. The deletion of a volume
        interface detaches a volume from a server.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The volume interface identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes a volume interface, detaching a volume from a server
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request retrieves a single volume interface specified by the
        identifier in the URL.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The volume interface identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/server_volume_attachment'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified volume interface
      tags: [Compute]
    patch:
      consumes: [application/json]
      description: This request updates a volume interface with the information in
        a provided volume interface patch. The volume interface patch object is structured
        in the same way as a retrieved volume interface and can contain an updated
        name and/or bandwidth.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The volume interface identifier, in: path, name: id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema:
          example: {name: my-volumeattachment}
          properties:
            name: {description: The user-defined name for this volumeattachment, example: my-volumeattachment,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
          type: object
      produces: [application/json]
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/server_volume_attachment'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates a volume inferface
      tags: [Compute]
  /servers/{server_id}/volume_attachments/{id}/tags:
    get:
      consumes: [application/json]
      description: This request retrieves all tags for the resource specified by the
        identifier in the URL.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              tags:
                description: A collection of tags for this resource
                example: [production, backend]
                items: {description: A tag for the resource, type: string}
                type: array
                x-omitempty: true
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all tags for a resource
      tags: [Compute]
  /servers/{server_id}/volume_attachments/{id}/tags/{tag_name}:
    delete:
      consumes: [application/json]
      description: This request removes a tag from a resource.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Removes a tag from a resource
      tags: [Compute]
    get:
      consumes: [application/json]
      description: This request succeeds if a tag exists on the resource and fails
        otherwise.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Checks if a specific tag exists on a specific resource
      tags: [Compute]
    put:
      consumes: [application/json]
      description: This request adds the specified tag to the specified resource.
        A request body is not required, and if supplied, is ignored. It succeeds if
        the tag already exists on the resource.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Sets a tag on a resource
      tags: [Compute]
  /subnets:
    get:
      consumes: [application/json]
      description: This request retrieves all subnets in the region. Subnets are contiguous
        ranges of IP addresses specified in CIDR block notation. Each subnet is within
        a particular zone and cannot span multiple zones or regions.
      parameters:
      - {description: A server-supplied token determining what resource to start the
          page on, in: query, name: start, required: false, type: string}
      - {default: 50, description: The number of resources to return on a page, format: int32,
        in: query, maximum: 100, minimum: 1, name: limit, required: false, type: integer}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      - {description: Filters the collection to resources within the specified zone,
        in: query, name: zone.name, required: false, type: string}
      - {description: Filters the collection to resources within the VPC of the specified
          identifier, in: query, name: vpc.id, required: false, type: string}
      - {description: Filters the collection to resources within the VPC of the specified
          CRN, in: query, name: vpc.crn, required: false, type: string}
      - {description: Filters the collection to resources within the VPC of the specified
          name, in: query, name: vpc.name, required: false, type: string}
      - {description: Filters the collection to subnets with the network ACL of the
          specified identifier, in: query, name: network_acl.id, required: false,
        type: string}
      - {description: Filters the collection to subnets with the network ACL of the
          specified CRN, in: query, name: network_acl.crn, required: false, type: string}
      - {description: Filters the collection to subnets with the network ACL of the
          specified name, in: query, name: network_acl.name, required: false, type: string}
      - {description: Filters the collection to resources within the resource group
          of the specified identifier, in: query, name: resource_group.id, required: false,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              first:
                description: A reference to the first page of resources
                properties:
                  href: {description: The URL for the first page of resources, example: 'http://iaas.bluemix.net/v1/subnets?limit=20',
                    format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                    type: string}
                type: object
              limit: {description: The maximum number of resources can be returned
                  by the request, example: 20, format: int64, maximum: 100, minimum: 1,
                type: integer}
              next: {$ref: '#/definitions/Next'}
              subnets:
                description: Collection of subnets
                items: {$ref: '#/definitions/subnet'}
                type: array
                x-omitempty: true
              total_count: {description: The total number of resources across all
                  pages, example: 132, format: int64, minimum: 0, type: integer}
            title: SubnetCollection
            type: object
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all subnets
      tags: [Network]
    post:
      description: This request creates a new subnet from a subnet template. The subnet
        template object is structured in the same way as a retrieved subnet, and contains
        the information necessary to create the new subnet.
      parameters:
      - in: body
        name: body
        required: true
        schema:
          example:
            total_ipv4_address_count: 256
            vpc: {id: 4727d842-f94f-4a2d-824a-9bc9b02c523b}
            zone: {name: us-south-1}
          properties:
            generation: {$ref: '#/definitions/generation'}
            ip_version:
              description: The IP version(s) supported by this subnet; if unspecified,
                `ipv4` is used
              enum: [ipv4, ipv6, both]
              example: both
              type: string
            ipv4_cidr_block: {description: 'The IPv4 range of the subnet, expressed
                in CIDR format', example: 10.0.0.0/24, type: string}
            name: {description: The user-defined name for this subnet, example: my-subnet,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            network_acl:
              description: The network ACL to use for this subnet; if unspecified,
                the default network ACL for the VPC is used
              example: {id: a4e28308-8ee7-46ab-8108-9f881f22bdbf}
              properties:
                crn: {description: The CRN for this network ACL, example: 'crn:v1:bluemix:public:rias:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf',
                  format: crn, type: string}
                id: {description: The unique identifier for this network ACL, example: a4e28308-8ee7-46ab-8108-9f881f22bdbf,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
                name: {description: The user-defined name for this network ACL, example: my-network-acl,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: NetworkACLIdentityByName
              type: object
            public_gateway:
              description: The public gateway to handle internet bound traffic for
                this subnet.
              properties:
                id: {description: The unique identifier for this public gateway, example: dc5431ef-1fc6-4861-adc9-a59d077d1241,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
              title: PublicGatewayIdentity
              type: object
            resource_group:
              properties:
                id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
              title: idreference
              type: object
            tags:
              description: A collection of tags for this resource
              example: [production, backend]
              items: {description: A tag for the resource, type: string}
              type: array
              x-omitempty: true
            total_ipv4_address_count: {description: The total number of IPv4 addresses
                required, example: 256, format: int64, type: integer}
            vpc:
              description: The VPC the subnet is to be a part of
              example: {id: 4727d842-f94f-4a2d-824a-9bc9b02c523b}
              properties:
                crn: {description: The CRN for this VPC, example: 'crn:v1:bluemix:public:gt::a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b',
                  format: crn, type: string}
                id: {description: The unique identifier for this VPC, example: 4727d842-f94f-4a2d-824a-9bc9b02c523b,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
                name: {description: The user-defined name for this VPC, example: my-vpc,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: VPCIdentityByName
              type: object
            zone: {$ref: '#/definitions/NameReference'}
          title: SubnetTemplate
          type: object
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/subnet'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a subnet
      tags: [Network]
  /subnets/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes a subnet. This operation cannot be reversed.
      parameters:
      - {description: The subnet identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes specified subnet
      tags: [Network]
    get:
      consumes: [application/json]
      description: This request retrieves a single subnet specified by the identifier
        in the URL.
      parameters:
      - {description: The subnet identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/subnet'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified subnet
      tags: [Network]
    patch:
      consumes: [application/json]
      description: This request updates a subnet with the information in a provided
        subnet patch. The subnet patch object is structured in the same way as a retrieved
        subnet and contains only the information to be updated.
      parameters:
      - {description: The subnet identifier, in: path, name: id, required: true, type: string}
      - in: body
        name: body
        required: true
        schema:
          example: {name: my-vpc}
          properties:
            name: {description: The user-defined name for this subnet, example: my-subnet,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            network_acl:
              properties:
                crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                  format: crn, type: string}
                href: {description: The URL for this resource, example: 'http://iaas.bluemix.net/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5/snapshots/349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                  format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                  type: string}
                id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
                name: {description: The user-defined name for this resource, example: my-snapshot,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: reference
              type: object
            public_gateway:
              properties:
                crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                  format: crn, type: string}
                href: {description: The URL for this resource, example: 'http://iaas.bluemix.net/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5/snapshots/349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                  format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                  type: string}
                id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
                name: {description: The user-defined name for this resource, example: my-snapshot,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: reference
              type: object
          type: object
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/subnet'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates specified subnet
      tags: [Network]
  /subnets/{id}/tags/{tag_name}:
    delete:
      consumes: [application/json]
      description: This request removes a tag from a resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Removes a tag from a resource
      tags: [Network]
    get:
      consumes: [application/json]
      description: This request succeeds if a tag exists on the resource and fails
        otherwise.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Checks if a specific tag exists on a specific resource
      tags: [Network]
    put:
      consumes: [application/json]
      description: This request adds the specified tag to the specified resource.
        A request body is not required, and if supplied, is ignored. It succeeds if
        the tag already exists on the resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Sets a tag on a resource
      tags: [Network]
  /subnets/{server_id}/tags:
    get:
      consumes: [application/json]
      description: This request retrieves all tags for the resource specified by the
        identifier in the URL.
      parameters:
      - {description: The server identifier, in: path, name: server_id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              tags:
                description: A collection of tags for this resource
                example: [production, backend]
                items: {description: A tag for the resource, type: string}
                type: array
                x-omitempty: true
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all tags for a resource
      tags: [Network]
  /subnets/{subnet_id}/network_acl:
    get:
      consumes: [application/json]
      description: This request retrieves the network ACL attached to the subnet specified
        by the identifier in the URL.
      parameters:
      - {description: The subnet identifier, in: path, name: subnet_id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/network_acl'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves attached public gatway
      tags: [Network]
    put:
      consumes: [application/json]
      description: This request attaches the network ACL specified in the request
        body to the subnet specified by the subnet identifier in the URL. If a network
        ACL is already attached to the subnet, it is detached before the new network
        ACL is attached.
      parameters:
      - {description: The subnet identifier, in: path, name: subnet_id, required: true,
        type: string}
      produces: [application/json]
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/network_acl'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Attaches a network ACL to a subnet
      tags: [Network]
  /subnets/{subnet_id}/public_gateway:
    delete:
      consumes: [application/json]
      description: This request detaches the public gateway from the subnet specified
        by the subnet identifier in the URL.
      parameters:
      - {description: The subnet identifier, in: path, name: subnet_id, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Detaches a public gateway from a subnet
      tags: [Network]
    get:
      consumes: [application/json]
      description: This request retrieves the public gateway attached to the subnet
        specified by the identifier in the URL.
      parameters:
      - {description: The subnet identifier, in: path, name: subnet_id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/public_gateway'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves attached public gateway
      tags: [Network]
    put:
      consumes: [application/json]
      description: This request attaches the public gateway specified in the request
        body to the subnet specified by the subnet identifier in the URL. If a public
        gateway is already attached to the subnet, it is detached before the new public
        gateway is attached.
      parameters:
      - {description: The subnet identifier, in: path, name: subnet_id, required: true,
        type: string}
      produces: [application/json]
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/public_gateway'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Attaches a public gateway to a subnet
      tags: [Network]
  /volumes:
    get:
      consumes: [application/json]
      description: This request retrieves all volumes in the region. Volumes are network-connected
        block storage devices which may be attached to one or more servers in the
        same region.
      parameters:
      - {description: A server-supplied token determining what resource to start the
          page on, in: query, name: start, required: false, type: string}
      - {default: 50, description: The number of resources to return on a page, format: int32,
        in: query, maximum: 100, minimum: 1, name: limit, required: false, type: integer}
      - {description: Filters the collection to resources within the resource group
          of the specified identifier, in: query, name: resource_group.id, required: false,
        type: string}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      - {description: Filters the collection to resources within the specified zone,
        in: query, name: zone.name, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              first:
                description: A reference to the first page of resources
                properties:
                  href: {description: The URL for the first page of resources, example: 'http://iaas.bluemix.net/v1/volumes?limit=20',
                    format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                    type: string}
                type: object
              limit: {description: The maximum number of resources can be returned
                  by the request, example: 20, format: int64, maximum: 100, minimum: 1,
                type: integer}
              next: {$ref: '#/definitions/Next'}
              total_count: {description: The total number of resources across all
                  pages, example: 132, format: int64, minimum: 0, type: integer}
              volumes:
                description: Collection of volumes
                items: {$ref: '#/definitions/volume'}
                type: array
                x-omitempty: true
            title: VolumeCollection
            type: object
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all volumes
      tags: [Storage]
    post:
      description: This request creates a new volume from a volume template. The volume
        template object is structured in the same way as a retrieved volume, and contains
        the information necessary to create the new volume.
      parameters:
      - in: body
        name: body
        required: true
        schema:
          example:
            capacity: 100
            iops: 10000
            type: data
            vpc: {id: 4727d842-f94f-4a2d-824a-9bc9b02c523b}
            zone: {name: us-south-1}
          properties:
            auto_delete: {default: false, description: 'If set to true, this volume
                will be automatically deleted if the only server it is attached to
                is deleted', type: boolean}
            billing_term:
              default: hourly
              description: The billing term for the volume
              enum: [hourly, monthly]
              example: hourly
              type: string
            capacity: {default: 100, description: The capacity of the volume in gigabytes,
              example: 100, maximum: 64000, minimum: 10, type: integer}
            encryption_key:
              description: The encryption key for the volume
              properties:
                crn: {description: The CRN for the volume encryption key, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::encryption-key:1a6b7274-678d-4dfb-8981-c71dd9d4daa5',
                  format: crn, type: string}
              title: VolumeEncryptionKey
              type: object
            iops:
              description: The bandwidth for the volume
              enum: [1000, 10000, 100000]
              type: integer
            name: {description: The user-defined name for this volume, example: my-volume,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            profile:
              properties:
                crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                  format: crn, type: string}
                name: {description: The user-defined name for this resource, example: my-snapshot,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: reference
              type: object
            resource_group:
              properties:
                id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
              title: idreference
              type: object
            source_snapshot:
              description: The identity of the snapshot from which to clone the volume
              example: {id: 349a61d8-7ab1-420f-a690-5fed76ef9d4f}
              properties:
                crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                  format: crn, type: string}
                id: {description: The unique identifier for this snapshot, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
                name: {description: The user-defined name for this snapshot, example: my-snapshot,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: SnapshotIdentityByName
              type: object
            tags:
              description: A collection of tags for this resource
              example: [production, backend]
              items: {description: A tag for the resource, type: string}
              type: array
              x-omitempty: true
            type:
              description: The volume type
              enum: [boot, data]
              type: string
            zone: {$ref: '#/definitions/NameReference'}
          title: VolumeTemplateFromSnapshot
          type: object
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/volume'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a volume
      tags: [Storage]
  /volumes/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes a volume. This operation cannot be reversed.
        In order for this request to succeed, the volume must not be attached to any
        servers.
      parameters:
      - {description: The volume identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes specified volume
      tags: [Storage]
    get:
      consumes: [application/json]
      description: This request retrieves a single volume specified by the identifier
        in the URL.
      parameters:
      - {description: The volume identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/volume_extended'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified volume
      tags: [Storage]
    patch:
      consumes: [application/json]
      description: This request updates a volume with the information in a provided
        volume patch. The volume patch object is structured in the same way as a retrieved
        volume and can contain an updated name, IOPS rate, or (increased) capacity
        for the volume.
      parameters:
      - {description: The volume identifier, in: path, name: id, required: true, type: string}
      - in: body
        name: body
        required: true
        schema:
          properties:
            auto_delete: {description: 'If set to true, this volume will be automatically
                deleted if the only server it is attached to is deleted', type: boolean}
            capacity: {description: The capacity of the volume in gigabytes, example: 100,
              maximum: 64000, minimum: 10, type: integer}
            iops:
              description: The bandwidth for the volume
              enum: [1000, 10000, 100000]
              type: integer
            name: {description: The user-defined name for this volume, example: my-volume,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            profile:
              properties:
                crn: {description: The CRN for this snapshot, example: 'crn:v1:bluemix:public:gt:us-south-1:a/123456::snapshot:349a61d8-7ab1-420f-a690-5fed76ef9d4f',
                  format: crn, type: string}
                name: {description: The user-defined name for this resource, example: my-snapshot,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: reference
              type: object
          title: VolumePatch
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/volume'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates specified volume
      tags: [Storage]
  /volumes/{id}/tags:
    get:
      consumes: [application/json]
      description: This request retrieves all tags for the resource specified by the
        identifier in the URL.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              tags:
                description: A collection of tags for this resource
                example: [production, backend]
                items: {description: A tag for the resource, type: string}
                type: array
                x-omitempty: true
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all tags for a resource
      tags: [Storage]
  /volumes/{id}/tags/{tag_name}:
    delete:
      consumes: [application/json]
      description: This request removes a tag from a resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Removes a tag from a resource
      tags: [Storage]
    get:
      consumes: [application/json]
      description: This request succeeds if a tag exists on the resource and fails
        otherwise.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Checks if a specific tag exists on a specific resource
      tags: [Storage]
    put:
      consumes: [application/json]
      description: This request adds the specified tag to the specified resource.
        A request body is not required, and if supplied, is ignored. It succeeds if
        the tag already exists on the resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Sets a tag on a resource
      tags: [Storage]
  /volumes/{volume_id}/snapshots:
    get:
      consumes: [application/json]
      description: This request retrieves all snapshots of the volume specified by
        the identifier in the URL. A snapshot preserves the state of a volume at the
        time the snapshot is created.
      parameters:
      - {description: The volume identifier, in: path, name: volume_id, required: true,
        type: string}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      - {description: Filters the collection to resources within the resource group
          of the specified identifier, in: query, name: resource_group.id, required: false,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              snapshots:
                description: Collection of snapshots
                items: {$ref: '#/definitions/volume_snapshot'}
                type: array
                x-omitempty: true
            title: SnapshotCollection
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all snapshots of a volume
      tags: [Storage]
    post:
      description: This request creates a new snapshot of the volume specified by
        the identifier in the URL. The new snapshot's name is specified in the snapshot
        template.
      parameters:
      - {description: The volume identifier, in: path, name: volume_id, required: true,
        type: string}
      - in: body
        name: body
        required: false
        schema:
          properties:
            name: {description: The user-defined name for this subnet, example: my-subnet,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            resource_group:
              properties:
                id: {description: The unique identifier for this resource, example: 349a61d8-7ab1-420f-a690-5fed76ef9d4f,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
              title: idreference
              type: object
            tags:
              description: A collection of tags for this resource
              example: [production, backend]
              items: {description: A tag for the resource, type: string}
              type: array
              x-omitempty: true
          title: VPCTemplate
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/volume_snapshot'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a snapshot for a volume
      tags: [Storage]
  /volumes/{volume_id}/snapshots/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes a snapshot. This operation cannot be reversed.
      parameters:
      - {description: The volume identifier, in: path, name: volume_id, required: true,
        type: string}
      - {description: The snapshot identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes specified snapshot
      tags: [Storage]
    get:
      consumes: [application/json]
      description: This request retrieves a single snapshot specified by the identifier
        in the URL.
      parameters:
      - {description: The volume identifier, in: path, name: volume_id, required: true,
        type: string}
      - {description: The snapshot identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/volume_snapshot'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified snapshot
      tags: [Storage]
    patch:
      consumes: [application/json]
      description: This request updates a snapshot's name.
      parameters:
      - {description: The volume identifier, in: path, name: volume_id, required: true,
        type: string}
      - {description: The snapgshot identifier, in: path, name: id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema:
          example: {name: my-snapshot}
          properties:
            name: {description: The user-defined name for this snapshot, example: my-snapshot,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
          type: object
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/volume_snapshot'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates specified snapshot
      tags: [Storage]
  /volumes/{volume_id}/snapshots/{id}/tags:
    get:
      consumes: [application/json]
      description: This request retrieves all tags for the resource specified by the
        identifier in the URL.
      parameters:
      - {description: The volume identifier, in: path, name: volume_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              tags:
                description: A collection of tags for this resource
                example: [production, backend]
                items: {description: A tag for the resource, type: string}
                type: array
                x-omitempty: true
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all tags for a resource
      tags: [Storage]
  /volumes/{volume_id}/snapshots/{id}/tags/{tag_name}:
    delete:
      consumes: [application/json]
      description: This request removes a tag from a resource.
      parameters:
      - {description: The volume identifier, in: path, name: volume_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Removes a tag from a resource
      tags: [Storage]
    get:
      consumes: [application/json]
      description: This request succeeds if a tag exists on the resource and fails
        otherwise.
      parameters:
      - {description: The volume identifier, in: path, name: volume_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Checks if a specific tag exists on a specific resource
      tags: [Storage]
    put:
      consumes: [application/json]
      description: This request adds the specified tag to the specified resource.
        A request body is not required, and if supplied, is ignored. It succeeds if
        the tag already exists on the resource.
      parameters:
      - {description: The volume identifier, in: path, name: volume_id, required: true,
        type: string}
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Sets a tag on a resource
      tags: [Storage]
  /vpcs:
    get:
      consumes: [application/json]
      description: This request retrieves all VPCs. A VPC is a virtual network that
        belongs to an account and provides logical isolation from other networks.
        A VPC is made up of resources in one or more zones. VPCs are global and each
        can contain resources in zones from any region.
      parameters:
      - {description: A server-supplied token determining what resource to start the
          page on, in: query, name: start, required: false, type: string}
      - {default: 50, description: The number of resources to return on a page, format: int32,
        in: query, maximum: 100, minimum: 1, name: limit, required: false, type: integer}
      - {description: Filters the collection to resources containing the specified
          tag, in: query, name: tag, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              first:
                description: A reference to the first page of resources
                properties:
                  href: {description: The URL for the first page of resources, example: 'http://iaas.bluemix.net/v1/vpcs?limit=20',
                    format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                    type: string}
                type: object
              limit: {description: The maximum number of resources can be returned
                  by the request, example: 20, format: int64, maximum: 100, minimum: 1,
                type: integer}
              next: {$ref: '#/definitions/Next'}
              total_count: {description: The total number of resources across all
                  pages, example: 132, format: int64, minimum: 0, type: integer}
              vpcs:
                description: Collection of VPCs
                items: {$ref: '#/definitions/vpc'}
                type: array
                x-omitempty: true
            title: VPCCollection
            type: object
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all VPCs
      tags: [Network]
    post:
      description: This request creates a new VPC from a VPC template. The VPC template
        object is structured in the same way as a retrieved VPC, and contains the
        information necessary to create the new VPC.
      parameters:
      - in: body
        name: body
        required: false
        schema:
          properties:
            default_network_acl:
              description: The default network ACL to use for subnets created in this
                VPC; if no default network ACL is provided a new one which allows
                all traffic will be created
              example: {id: a4e28308-8ee7-46ab-8108-9f881f22bdbf}
              properties:
                crn: {description: The CRN for this network ACL, example: 'crn:v1:bluemix:public:rias:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf',
                  format: crn, type: string}
                id: {description: The unique identifier for this network ACL, example: a4e28308-8ee7-46ab-8108-9f881f22bdbf,
                  format: uuid, pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',
                  type: string}
                name: {description: The user-defined name for this network ACL, example: my-network-acl,
                  format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: NetworkACLIdentityByName
              type: object
            is_default: {description: Indicates whether this is the default VPC for
                the account, type: boolean}
            name: {description: The user-defined name for this VPC, example: my-vpc,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
            tags:
              description: A collection of tags for this resource
              example: [production, backend]
              items: {description: A tag for the resource, type: string}
              type: array
              x-omitempty: true
          title: VPCTemplate
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/vpc'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates a VPC
      tags: [Network]
  /vpcs/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes a VPC. This operation cannot be reversed.
        In order for this request to succeed, the VPC must not contain any servers
        or volumes.
      parameters:
      - {description: The VPC identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes specified VPC
      tags: [Network]
    get:
      consumes: [application/json]
      description: This request retrieves a single VPC specified by the identifier
        in the URL.
      parameters:
      - {description: The VPC idenitifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/vpc'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified VPC
      tags: [Network]
    patch:
      consumes: [application/json]
      description: This request updates a VPC's name.
      parameters:
      - {description: The VPC identifier, in: path, name: id, required: true, type: string}
      - in: body
        name: body
        required: true
        schema:
          example: {name: my-vpc}
          properties:
            name: {description: The user-defined name for this vpc, example: my-vpc,
              format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
          type: object
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/vpc'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates specified VPC
      tags: [Network]
  /vpcs/{id}/tags:
    get:
      consumes: [application/json]
      description: This request retrieves all tags for the resource specified by the
        identifier in the URL.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema:
            properties:
              tags:
                description: A collection of tags for this resource
                example: [production, backend]
                items: {description: A tag for the resource, type: string}
                type: array
                x-omitempty: true
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all tags for a resource
      tags: [Network]
  /vpcs/{id}/tags/{tag_name}:
    delete:
      consumes: [application/json]
      description: This request removes a tag from a resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Removes a tag from a resource
      tags: [Network]
    get:
      consumes: [application/json]
      description: This request succeeds if a tag exists on the resource and fails
        otherwise.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Checks if a specific tag exists on a specific resource
      tags: [Network]
    put:
      consumes: [application/json]
      description: This request adds the specified tag to the specified resource.
        A request body is not required, and if supplied, is ignored. It succeeds if
        the tag already exists on the resource.
      parameters:
      - {description: The resource identifier, in: path, name: id, required: true,
        type: string}
      - {description: The name of the tag, in: path, name: tag_name, required: true,
        type: string}
      produces: [application/json]
      responses:
        204:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Sets a tag on a resource
      tags: [Network]
  /vpcs/{vpc_id}/address_prefixes:
    get:
      consumes: [application/json]
      description: This request retrieves all address pool prefixes for a VPC.
      parameters:
      - {description: The VPC identifier, in: path, name: vpc_id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: The prefixes were retrieved successfully.
          schema:
            properties:
              address_prefixes:
                description: Collection of address prefixes
                items: {$ref: '#/definitions/address_pool_prefix'}
                type: array
                x-omitempty: true
            title: AddressPoolPrefixCollection
            type: object
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves all address pool prefixes for a VPC
      tags: [Network]
    post:
      consumes: [application/json]
      description: This request creates a new prefix from a prefix template. The prefix
        template object is structured in the same way as a retrieved prefix, and contains
        the information necessary to create the new prefix.
      parameters:
      - {description: The VPC identifier, in: path, name: vpc_id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema:
          properties:
            cidr: {description: The CIDR block for this prefix., example: 10.0.0.0/24,
              type: string}
            name: {description: 'The user-defined name for this prefix. By default
                the base IP address will be the name. For example, for 10.0.0.0/24
                the name will be 10.0.0.0.', format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
              type: string}
            zone:
              description: The zone the floating IP resides in
              properties:
                href: {description: The URL for this zone, example: 'http://iaas.bluemix.net/v1/regions/us-south/zones/us-south-1',
                  format: url, pattern: '^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$',
                  type: string}
                name: {description: The name for this zone, example: us-south-1, format: name,
                  pattern: '^[A-Za-z][-A-Za-z0-9_]*$', type: string}
              title: ZoneReference
              type: object
          title: AddressPoolPrefixTemplate
          type: object
      produces: [application/json]
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/address_pool_prefix'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: The specified VPC could not be found.
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Creates an address pool prefix
      tags: [Network]
  /vpcs/{vpc_id}/address_prefixes/{id}:
    delete:
      consumes: [application/json]
      description: This request deletes a prefix. This operation cannot be reversed.
        Delete will fail if existing subnets use addresses from this prefix.
      parameters:
      - {description: The VPC identifier, in: path, name: vpc_id, required: true,
        type: string}
      - {description: The prefix identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        204: {description: The prefix was deleted successfully.}
        404:
          description: A prefix with the specified identifier could not be found.
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Deletes specified address pool prefix
      tags: [Network]
    get:
      consumes: [application/json]
      description: This request retrieves a single prefix specified by the identifier
        in the URL.
      parameters:
      - {description: The VPC identifier, in: path, name: vpc_id, required: true,
        type: string}
      - {description: The prefix identifier, in: path, name: id, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/address_pool_prefix'}
        404:
          description: A prefix with the specified identifier could not be found.
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves specified address pool prefix
      tags: [Network]
    patch:
      consumes: [application/json]
      description: This request updates a prefix with the information in a provided
        prefix patch. The prefix patch object is structured in the same way as a retrieved
        prefix and contains only the information to be updated. The update will fail
        if it would result in existing subnets falling outside of the address pool.
        The update will fail if the new prefix overlaps any other prefix in the VPC's
        address pools.
      parameters:
      - {description: The VPC identifier, in: path, name: vpc_id, required: true,
        type: string}
      - {description: The prefix identifier, in: path, name: id, required: true, type: string}
      - in: body
        name: body
        required: true
        schema:
          properties:
            cidr: {description: The CIDR block for this prefix., example: 10.0.0.0/24,
              type: string}
            name: {description: 'The user-defined name for this prefix. By default
                the base IP address will be the name. For example, for 10.0.0.0/24
                the name will be 10.0.0.0.', format: name, pattern: '^[A-Za-z][-A-Za-z0-9_]*$',
              type: string}
          title: AddressPoolPrefixPatch
          type: object
      produces: [application/json]
      responses:
        200:
          description: The prefix was updated successfully.
          schema: {$ref: '#/definitions/address_pool_prefix'}
        400:
          description: An invalid prefix patch was provided.
          schema: {$ref: '#/definitions/riaaserror'}
        404:
          description: A prefix with the specified identifier could not be found.
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Updates an address pool prefix
      tags: [Network]
  /vpcs/{vpc_id}/default_network_acl:
    get:
      consumes: [application/json]
      description: This request retrieves the default network ACL for the VPC specified
        by the identifier in the URL. The default network ACL is applied to any new
        subnets in the VPC which do not specify a network ACL.
      parameters:
      - {description: The VPC identifier, in: path, name: vpc_id, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: dummy
          schema: {$ref: '#/definitions/network_acl'}
        404:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Retrieves default network ACL
      tags: [Network]
    put:
      consumes: [application/json]
      description: This request sets the network ACL specified in the request body
        as the default network ACL for the VPC specified by the VPC identifier in
        the URL.  The default network ACL is applied to any new subnets in the VPC
        which do not specify a network ACL.
      parameters:
      - {description: The VPC identifier, in: path, name: vpc_id, required: true,
        type: string}
      - in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/resource_reference'}
      produces: [application/json]
      responses:
        201:
          description: dummy
          schema: {$ref: '#/definitions/network_acl'}
        400:
          description: error
          schema: {$ref: '#/definitions/riaaserror'}
        default:
          description: unexpectederror
          schema: {$ref: '#/definitions/riaaserror'}
      summary: Sets the default network ACL for a VPC
      tags: [Network]
security:
- iamToken: []
securityDefinitions:
  iamToken: {in: header, name: User Email, type: apiKey}
swagger: '2.0'
